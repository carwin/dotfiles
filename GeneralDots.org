#+title: General Dotfiles
#+PROPERTY: header-args :mkdirp yes

* Environment Variables

#+begin_src sh :tangle ./tangled/profile :mkdirp yes
EDITOR='vim'
VISUAL='vim'
DIFFPROG='vim'
LANG=en_US.UTF-8
LC_ALL=en_US.UTF-8
RANGER_LOAD_DEFAULT_RC=false

# Ensure 256 colors
[[ "$TERM" == "xterm" ]] && export TERM=xterm-256-color
[[ "$TERM" == "rxvt" ]] && export TERM=rxvt-unicode-256-color
[[ "$TERM" == "rxvt-256color" ]] && export TERM=rxvt-unicode-256-color

# Add Ruby gems into path
if which ruby >/dev/null && which gem >/dev/null; then
  PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi

# Source nvm
if which nvm >/dev/null; then
  source /usr/share/nvm/init-nvm.sh
fi

# Add personal binaries into PATH.
PATH="$HOME/.local/bin:$PATH"

# XDG Basedir specification
XDG_CONFIG_HOME="$HOME/.config"
XDG_DATA_HOME="$HOME/.local/share"
XDG_CACHE_HOME="$HOME/.cache"
#+end_src

** Post-tangle actions

#+begin_src sh :noweb-ref symlinks
ln -sfv $(pwd)/tangled/profile $HOME/.profile
source $HOME/.profile
#+end_src

* XDG User Directories

#+begin_src conf :tangle ./tangled/user-dirs.dirs
XDG_DESKTOP_DIR="$HOME/"
XDG_DOWNLOAD_DIR="$HOME/Downloads"
XDG_TEMPLATES_DIR="$HOME/Templates"
XDG_PUBLICSHARE_DIR="$HOME/Public"
XDG_DOCUMENTS_DIR="$HOME/"
XDG_MUSIC_DIR="$HOME/Audio/Music"
XDG_PICTURES_DIR="$HOME/Pictures"
XDG_VIDEOS_DIR="$HOME/Videos"
#+end_src

#+begin_src sh :noweb-ref symlinks
ln -sfv $(pwd)/tangled/user-dirs.dirs $HOME/.config/user-dirs.dirs
xdg-user-dirs-update
#+end_src

* Systemd

This section is for storing all of my Systemd configs and timers. I'll write them all in here and have Org tangle them out.

User level Systemd configurations live in =~/.config/systemd/user=.

** Emacs

Emacs ships with a systemd unit (at least in Arch), so there's really no configuration necessary. On a fresh system, simply enable the service and start it.

#+begin_src shell
systemctl --user enable --now emacs
systemctl --user start emacs
#+end_src

Now assuming everything else is setup correctly, I can simply connect to Emacs instead of starting it up fresh everytime I happen to close it.

#+begin_src
emacsclient -d
#+end_src

** OneDrive Sync

First set up a service we can run as needed.

#+begin_src conf :tangle ./tangled/onedrive-sync.service
[Unit]
Description=Syncs OneDrive

[Service]
ExecStart=/usr/bin/onedrive --synchronize

fInstall]
WantedBy=default.target
#+end_src

Now set up a timer to do it hourly.

#+begin_src conf :tangle ./tangled/onedrive-sync.timer
[Unit]
Description=Run OneDrive synchronization hourly

[Timer]
OnBootSec=15min
OnUnitActiveSec=1h

[Install]
WantedBy=timers.target
#+end_src

** Post-tangle actions
#+description: @todo This only tangles out individual files to the existing directory, it would be nice if this could export the entire directory.

Describe the symlink to be created for this section and any actions that should be taken after the symlinks are created.

#+begin_src sh :noweb-ref symlinks
ln -sfv $(pwd)/tangled/onedrive-sync.timer ~/.config/systemd/user/onedrive-sync.timer

ln -sfv $(pwd)/tangled/onedrive-sync.service ~/.config/systemd/user/onedrive-sync.service
#+end_src

Enable the onedrive-sync timer.

#+begin_src sh :noweb-ref symlinks
systemctl --user enable onedrive-sync.timer
#+end_src

* Xresources

#+begin_src conf :tangle ./tangled/Xresources
!emacs*Background: DarkSlateGray
!emacs*Foreground: Wheat
!emacs*pointerColor: Orchid
!emacs*cursorColor: Orchid
!emacs*bitmapIcon: on
!emacs*font: fixed
!emacs.geometry: 80x25
Xcursor.size: 18

! ------------------------------------------------------------------------------
! Colour Configuration
! ------------------------------------------------------------------------------

! special
*.foreground:   #d8dee8
*.background:   #2f343f
*.cursorColor:  #b48ead

! black
*.color0  : #4b5262
*.color8  : #434a5a

! red
*.color  : #bf616a
*.color9  : #b3555e

! green
*.color2  : #a3be8c
*.color10 : #93ae7c

! yellow
*.color3  : #ebcb8b
*.color11 : #dbbb7b

! blue
*.color4  : #81a1c1
*.color12 : #7191b1

! magenta
*.color5  : #b48ead
*.color13 : #a6809f

! cyan
*.color6  : #89d0bA
*.color14 : #7dbba8

! white
*.color7  : #e5e9f0
*.color15 : #d1d5dc

! ------------------------------------------------------------------------------
! Font configuration
! ------------------------------------------------------------------------------

URxvt*font:    xft:M+ 1mn:regular:size=10
URxvt*boldFont:   xft:M+ 1mn:bold:size=10
URxvt*italicFont:  xft:M+ 1mn:italic:size=10
URxvt*boldItalicFont: xft:M+ 1mn:bold italic:size=10

! ------------------------------------------------------------------------------
! Xft Font Configuration
! ------------------------------------------------------------------------------

Xft.autohint: 0
Xft.lcdfilter: lcddefault
Xft.hintstyle: hintslight
Xft.hinting: 1
Xft.antialias: 1
Xft.rgba: rgb

! ------------------------------------------------------------------------------
! URxvt configs
! ------------------------------------------------------------------------------

! font spacing
URxvt*letterSpace:  0
URxvt.lineSpace:  0

! general settings
URxvt*saveline:   15000
URxvt*termName:   rxvt-256color
URxvt*iso14755:   false
URxvt*urgentOnBell:  true

! appearance
URxvt*depth:   24
URxvt*scrollBar:  false
URxvt*scrollBar_right: false
URxvt*internalBorder: 24
URxvt*externalBorder: 0
URxvt.geometry:   84x22

! perl extensions
URxvt.perl-ext-common: default,clipboard,url-select,keyboard-select,selection-clipboard

! macros for clipboard and selection
URxvt.copyCommand:  xclip -i -selection clipboard
URxvt.pasteCommand:  xclip -o -selection clipboard
URxvt.keysym.M-c:  perl:clipboard:copy
URxvt.keysym.M-v:  perl:clipboard:paste
URxvt.keysym.M-C-v:  perl:clipboard:paste_escaped
URxvt.keysym.M-Escape: perl:keyboard-select:activate
URxvt.keysym.M-s:  perl:keyboard-select:search
URxvt.keysym.M-u:  perl:url-select:select_next
URxvt.urlLauncher:  firefox
URxvt.underlineURLs: true
URxvt.urlButton:  1

! scroll one line
URxvt.keysym.Shift-Up:  command:\033]720;1\007
URxvt.keysym.Shift-Down: command:\033]721;1\007

! control arrow
URxvt.keysym.Control-Up: \033[1;5A
URxvt.keysym.Control-Down: \033[1;5B
URxvt.keysym.Control-Right: \033[1;5C
URxvt.keysym.Control-Left: \033[1;5D

! Copy/Pasta
URxvt.keysym.Shift-Control-V: eval:paste_clipboard
URxvt.keysym.Shift-Control-C: eval:selection_to_clipboard

! ------------------------------------------------------------------------------
! Rofi configs
! ------------------------------------------------------------------------------

rofi.color-enabled: true
rofi.color-window: #2e3440, #2e3440, #2e3440
rofi.color-normal: #2e3440, #d8dee9, #2e3440, #2e3440, #bf616a
rofi.color-active: #2e3440, #b48ead, #2e3440, #2e3440, #93e5cc
rofi.color-urgent: #2e3440, #ebcb8b, #2e3440, #2e3440, #ebcb8b
rofi.modi: run,drun,window,ssh

! ------------------------------------------------------------------------------
! Dmenu configs
! ------------------------------------------------------------------------------

dmenu.selforeground:     #d8dee9
dmenu.background:         #2e3440
dmenu.selbackground:     #bf616a
dmenu.foreground:         #d8dee9

#+end_src

** Post-tangle actions

Describe the symlink to be created for this file.

#+begin_src sh :noweb-ref symlinks
ln -sfv ~/Projects/Home/dotfiles/tangled/Xresources ~/.Xresources
#+end_src

Source the Xresources file.

#+begin_src sh :noweb-ref symlinks
xrdb ~/.Xresources
#+end_src

* Gitconfig

Writes out a ~/.gitconfig file for global configuration.

#+begin_src shell :tangle ./tangled/gitconfig
[core]
  editor = vim
[user]
  name = Carwin Young
  email = carwin@mobomo.com
  signingkey = D6FA5A05B721CCDE
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  frag = cyan bold
  meta = yellow bold
  new = green bold
  old = red bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  log = true
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com"]
  insteadOf = "gist:"
[url "git@heroku.com:"]
  insteadOf = "heroku:"
[alias]
  br = branch
  st = status
  co = checkout
  df = diff
  g  = grep -I
  rc = rank-contributors
  pr = pull --rebase
  lgp = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
  lg = log --show-signature
  cm = commit -S -m
	change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch -f --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f"
#+end_src

Describe the symlink to be created for this file.

#+begin_src sh :noweb-ref symlinks
ln -sfv ~/Projects/Home/dotfiles/tangled/gitconfig ~/.gitconfig
#+end_src

* i3

** Main i3 config

#+begin_src conf :tangle ./tangled/i3/config :mkdirp yes

# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!

# set $mod Mod4
set $mod Mod1

# set a mode for swapping Mod in a given context, like Emacs:

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:monospace 8

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
#font pango:DejaVu Sans Mono 8

# The combination of xss-lock, nm-applet and pactl is a popular choice, so
# they are included here as an example. Modify as you see fit.

# xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
# screen before suspend. Use loginctl lock-session to lock your screen.
exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork

# NetworkManager is the most popular way to manage wireless networks on Linux,
# and nm-applet is a desktop environment-independent system tray GUI for it.
exec --no-startup-id nm-applet

# Common app binds
bindsym Print exec scrot


# Use pactl to adjust volume in PulseAudio.
set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

# Keybindings to control MPD
bindsym XF86AudioPlay exec "mpc toggle"
bindsym XF86AudioStop exec "mpc stop"
bindsym XF86AudioNext exec "mpc next"

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec i3-sensible-terminal

# kill focused window
bindsym $mod+Shift+q kill

# start dmenu (a program launcher)
# bindsym $mod+d exec dmenu_run

#bindsym $mod+d exec rofi -combi-modi window,drun,ssh,run,combi -font "hack 16" -theme slate -show combi -show-icons
# bindsym $mod+d exec rofi -combi-modi window#drun#ssh -font "Hack 16" -theme slate -show combi -show-icons
bindsym $mod+d exec ~/Scripts/rofia.sh


# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
# bindsym $mod+d exec --no-startup-id i3-dmenu-desktop

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# alternatively, you can use the cursor keys:
# bindsym $mod+Left focus left
# bindsym $mod+Down focus down
# bindsym $mod+Up focus up
# bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
# bindsym $mod+h split h
bindsym $mod+bar split h

# split in vertical orientation
# bindsym $mod+v split v
bindsym $mod+minus split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# switch to workspace
bindsym $mod+1 workspace number $ws1
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace number $ws1
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}

bindsym $mod+r mode "resize"

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
        colors {
        background #2f343f
        statusline #2f343f
        separator #4b5262

        # colour of border, background, and text
        focused_workspace       #2f343f #bf616a #d8dee8
        active_workspace        #2f343f #2f343f #d8dee8
        inactive_workspace      #2f343f #2f343f #d8dee8
        urgent_workspacei       #2f343f #ebcb8b #2f343f
    }
        status_command i3status
}

# window rules, you can find the window class using xprop
for_window [class=".*"] border pixel 1
assign [class=Firefox|Transmission-gtk] 2
assign [class=Thunar|File-roller] 3
assign [class=Geany|Evince|Gucharmap|Soffice|libreoffice*] 4
assign [class=Audacity|Vlc|mpv|Ghb|Xfburn|Gimp*|Inkscape] 5
assign [class=Lxappearance|System-config-printer.py|Lxtask|GParted|Pavucontrol|Exo-helper*|Lxrandr|Arandr] 6
for_window [class=Viewnior|feh|Audacious|File-roller|Lxappearance|Lxtask|Pavucontrol] floating enable
for_window [class=URxvt|Firefox|Geany|Evince|Soffice|libreoffice*|mpv|Ghb|Xfburn|Gimp*|Inkscape|Vlc|Lxappearance|Audacity] focus
for_window [class=Xfburn|GParted|System-config-printer.py|Lxtask|Pavucontrol|Exo-helper*|Lxrandr|Arandr] focus
for_window [class=zoom title="^Participants"] floating enable
for_window [class=zoom title="^Zoom Meeting"] floating enable
for_window [class=zoom title="^Zoom - Licensed Account"] floating enable

# Autostart applications and other things
exec --no-startup-id ~/.fehbg &
exec --no-startup-id xsettingsd &
exec --no-startup-id ~/.screenlayout/home_triple.sh &
exec --no-startup-id dunst &
exec --no-startup-id picom -b

# colour of border, background, text, indicator, and child_border
client.focused              #bf616a #2f343f #d8dee8 #bf616a #ff91a4
client.focused_inactive     #2f343f #2f343f #d8dee8 #2f343f #2f343f
client.unfocused            #2f343f #2f343f #d8dee8 #2f343f #2f343f
client.urgent               #2f343f #2f343f #d8dee8 #2f343f #2f343f
client.placeholder          #2f343f #2f343f #d8dee8 #2f343f #2f343f
client.background           #2f343f
#+end_src

** i3status

#+begin_src conf :tangle ./tangled/i3status/config :mkdirp yes
general {
        output_format = "i3bar"
        colors = false
        markup = pango
        interval = 5
        color_good = '#2f343f'
    color_degraded = '#ebcb8b'
    color_bad = '#ba5e57'
}

order += "load"
order += "cpu_temperature 0"
order += "disk /"
order += "disk /home"
order += "ethernet eno1"
# order += "wireless wlp5s0"
order += "volume master"
# order += "battery 1"
order += "tztime local"

load {
        format = "<span background='#f59335'>  %5min Load </span>"
}

cpu_temperature 0 {
        format = "<span background='#bf616a'>  %degrees °C </span>"
        path = "/sys/class/thermal/thermal_zone0/temp"
}

disk "/" {
        format = "<span background='#fec7cd'>  %free Free </span>"
}

disk "/home" {
        format = "<span background='#a1d569'>  %free Free </span>"
}

ethernet eno1 {
        format_up = "<span background='#88c0d0'>  %ip </span>"
        format_down = "<span background='#88c0d0'>  Disconnected </span>"
}

wireless wlp5s0 {
        format_up = "<span background='#b48ead'>  %essid </span>"
        format_down = "<span background='#b48ead'>  Disconnected </span>"
}

volume master {
        format = "<span background='#ebcb8b'>  %volume </span>"
        format_muted = "<span background='#ebcb8b'>  Muted </span>"
        device = "default"
        mixer = "Master"
        mixer_idx = 0
}

battery 1 {
  last_full_capacity = true
        format = "<span background='#a3be8c'>  %status %percentage </span>"
        format_down = "No Battery"
        status_chr = "Charging"
        status_bat = "Battery"
        status_unk = "Unknown"
        status_full = "Charged"
        path = "/sys/class/power_supply/BAT%d/uevent"
        low_threshold = 10
}

tztime local {
    format = "<span background='#81a1c1'> %time </span>"
    format_time = " %a %-d %b %H:%M"
}
general {
        output_format = "i3bar"
        colors = false
        markup = pango
        interval = 5
        color_good = '#2f343f'
    color_degraded = '#ebcb8b'
    color_bad = '#ba5e57'
}

order += "load"
order += "cpu_temperature 0"
order += "disk /"
order += "disk /home"
order += "ethernet eno1"
# order += "wireless wlp5s0"
order += "volume master"
# order += "battery 1"
order += "tztime local"

load {
        format = "<span background='#f59335'>  %5min Load </span>"
}

cpu_temperature 0 {
        format = "<span background='#bf616a'>  %degrees °C </span>"
        path = "/sys/class/thermal/thermal_zone0/temp"
}

disk "/" {
        format = "<span background='#fec7cd'>  %free Free </span>"
}

disk "/home" {
        format = "<span background='#a1d569'>  %free Free </span>"
}

ethernet eno1 {
        format_up = "<span background='#88c0d0'>  %ip </span>"
        format_down = "<span background='#88c0d0'>  Disconnected </span>"
}

wireless wlp5s0 {
        format_up = "<span background='#b48ead'>  %essid </span>"
        format_down = "<span background='#b48ead'>  Disconnected </span>"
}

volume master {
        format = "<span background='#ebcb8b'>  %volume </span>"
        format_muted = "<span background='#ebcb8b'>  Muted </span>"
        device = "default"
        mixer = "Master"
        mixer_idx = 0
}

battery 1 {
  last_full_capacity = true
        format = "<span background='#a3be8c'>  %status %percentage </span>"
        format_down = "No Battery"
        status_chr = "Charging"
        status_bat = "Battery"
        status_unk = "Unknown"
        status_full = "Charged"
        path = "/sys/class/power_supply/BAT%d/uevent"
        low_threshold = 10
}

tztime local {
    format = "<span background='#81a1c1'> %time </span>"
    format_time = " %a %-d %b %H:%M"
}

#+end_src

** Post-tangle actions

#+begin_src sh :noweb-ref symlinks
ln -sfv $(pwd)/tangled/i3status ~/.config/i3status
ln -sfv $(pwd)/tangled/i3 ~/.config/i3
#+end_src

* Tmux
#+description: @todo I think tmux now supports using XDG_CONFIG_HOME so it can be stored in ~/.config/tmux/.

#+begin_src conf :tangle ./tangled/tmux.conf

# Key bindings
# ------------------------------------------------------------------------------
# Unbind the default Prefix
unbind C-b
# Bind <C-a> as the new Prefix
set -g prefix C-a
# Send the prefix when used with prefix+a for nested sessions
bind C-a send-prefix
# Split windows horizontally with |
bind | split-window -h
# Split windows vertically with -
bind - split-window -v
# Reload configuration with 'r'
unbind r
bind r source-file ~/.tmux.conf
# Move around panes with hjkl
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# Resize panes with HJKL
bind-key H resize-pane -L 5
bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key L resize-pane -R 5
# Vim keystrokes for select and copy (yank) to clipboard.
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"

# General Settings
# ------------------------------------------------------------------------------
# Be colorful
# set -g default-terminal "screen-256color"

# Enable the mouse
set-option -g mouse on

# Set the base index to 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1

# Use Vi mode
set -g status-keys vi
setw -g mode-keys vi
set-window-option -g mode-keys vi

# No delay for escape key press.
set -sg escape-time 0
# Set delay for repeat key press.
set -sg repeat-time 600


# THEME
set -g status-bg colour236
set -g status-fg white
set -g status-justify centre
set-window-option -g window-status-current-style bg=colour167,fg=colour236,bold
set -g status-interval 60
set -g status-left-length 30
set -g status-left '#[fg=green](#S) #(whoami)'
set -g status-right '#[fg=yellow]#(curl "wttr.in/?format=3")#[default] #[fg=white]%H:%M#[default]'

#+end_src

** Post-tangle actions

Describe the symlink to be created for this file.

#+begin_src sh :noweb-ref symlinks
ln -sfv ~/Projects/Home/dotfiles/tangled/tmux.conf ~/.tmux.conf
#+end_src

* Dunst

Dunst is the notification system I use.

#+begin_src conf :tangle ./tangled/dunst/dunstrc

[global]
monitor = 0
follow = mouse
geometry = "250x50-24+24"
indicate_hidden = yes
shrink = no
separator_height = 0
padding = 16
horizontal_padding = 24
frame_width = 2
sort = no
idle_threshold = 120
font = M+ 1p 8
line_height = 4
markup = full
format = "<b>%s</b>\n%b"
alignment = left
show_age_threshold = 60
word_wrap = yes
ignore_newline = no
stack_duplicates = false
hide_duplicate_count = yes
show_indicators = no
icon_position = off
sticky_history = yes
history_length = 20
browser = /usr/bin/firefox -new-tab
always_run_script = true
title = Dunst
class = Dunst

[shortcuts]
close = ctrl+space
close_all = ctrl+shift+space
history = ctrl+grave
context = ctrl+shift+period

[urgency_low]
background = "#2f343f"
foreground = "#d8dee8"
timeout = 2

[urgency_normal]
background = "#2f343f"
foreground = "#d8dee8"
timeout = 4

[urgency_critical]
background = "#2f343f"
foreground = "#d8dee8"
frame_color = "#bf616a"
timeout = 0

#+end_src

** Post-tangle actions

Describe the symlink to be created for this file.

#+begin_src sh :noweb-ref symlinks
ln -sfv $(pwd)/tangled/dunst ~/.config/dunst
#+end_src


* Mutt

Email with mutt.

#+begin_src conf :tangle ./tangled/mutt/muttrc

# Paths ------------------------------------------------------------------------
set folder 						= ~/.mail												# mailbox location
set alias_file	            = ~/.config/mutt/alias		# where to store aliases
set header_cache           = ~/.config/mutt/cache/headers	# where to store headers
set message_cachedir 	    = ~/.config/mutt/cache/bodies	# where to store bodies
set certificate_file	    = ~/.config/mutt/certificates	# where to store certs
set mailcap_path           = ~/.config/mutt/mailcap            # entries for filetypes
set tmpdir                 = ~/.config/mutt/tmp                # where to keep temp files
set signature              = ~/.config/mutt/sig                # my signature file

# Basic Options ----------------------------------------------------------------
set wait_key		= no         # shut up, mutt
set mbox_type		= Maildir    # mailbox type
set timeout 		= 3          # idle time before scanning
set mail_check	        = 0          # minimum time between scans
unset move                          # gmail does that
set delete                          # don't ask, just do
unset confirmappend                 # don't ask, just do
set quit                            # don't ask, just do
unset mark_old	                     # read/new is good enough for me
set beep_new                        # bell on new mails
set pipe_decode                     # strip headers and eval mimes when piping
set thorough_search                 # strip headers and eval mimes before searching

# Sidebar ----------------------------------------------------------------------

# Should the Sidebar be shown?
set sidebar_visible = yes

# How wide should the Sidebar be in screen columns?
# Note: Some characters, e.g. Chinese, take up two columns each.
set sidebar_width = 25

# Should the mailbox paths be abbreviated?
set sidebar_short_path = yes

# When abbreviating mailbox path names, use any of these characters as path
# separators.  Only the part after the last separators will be shown.
# For file folders '/' is good.  For IMAP folders, often '.' is useful.
set sidebar_delim_chars = '/.'

# If the mailbox path is abbreviated, should it be indented?
set sidebar_folder_indent = yes

# Indent mailbox paths with this string.
set sidebar_indent_string = ' '

# Make the Sidebar only display mailboxes that contain new, or flagged,
# mail.
set sidebar_new_mail_only = no

# Any mailboxes that are whitelisted will always be visible, even if the
# sidebar_new_mail_only option is enabled.
# sidebar_whitelist '/home/user/mailbox1'
# sidebar_whitelist '/home/user/mailbox2'

# When searching for mailboxes containing new mail, should the search wrap
# around when it reaches the end of the list?
set sidebar_next_new_wrap = no

# The character to use as the divider between the Sidebar and the other Mutt
# panels.
# Note: Only the first character of this string is used.
set sidebar_divider_char = ' | '

# Enable extended buffy mode to calculate total, new, and flagged
# message counts for each mailbox.
set mail_check_stats

# Display the Sidebar mailboxes using this format string.
# set sidebar_format = '%B%?F? [%F]?%* %?N?%N/?%S'
set sidebar_format = "%B %* [%?N?%N / ?%S]"

# Sort the mailboxes in the Sidebar using this method:
#       count    - total number of messages
#       flagged  - number of flagged messages
#       new      - number of new messages
#       path     - mailbox path
#       unsorted - do not sort the mailboxes
set sidebar_sort_method = 'unsorted'

# FUNCTIONS - shown with an example mapping

# Move the highlight to the previous mailbox
bind index,pager \Cp sidebar-prev

# Move the highlight to the next mailbox
bind index,pager \Cn sidebar-next

# Open the highlighted mailbox
bind index,pager \Co sidebar-open

# Move the highlight to the previous page
# This is useful if you have a LOT of mailboxes.
bind index,pager <F3> sidebar-page-up

# Move the highlight to the next page
# This is useful if you have a LOT of mailboxes.
bind index,pager <F4> sidebar-page-down

# Move the highlight to the previous mailbox containing new, or flagged,
# mail.
bind index,pager <F5> sidebar-prev-new

# Move the highlight to the next mailbox containing new, or flagged, mail.
bind index,pager <F6> sidebar-next-new

# Toggle the visibility of the Sidebar.
bind index,pager B sidebar-toggle-visible

# COLORS - some unpleasant examples are given
# Note: All color operations are of the form:
#       color OBJECT FOREGROUND BACKGROUND

# Color of the current, open, mailbox
# Note: This is a general Mutt option which colors all selected items.
color indicator cyan black

# Color of the highlighted, but not open, mailbox.
color sidebar_highlight black color8

# Color of the divider separating the Sidebar from Mutt panels
color sidebar_divider color8 black

# Color to give mailboxes containing flagged mail
color sidebar_flagged red black

# Color to give mailboxes containing new mail
color sidebar_new green black

# Status Bar -------------------------------------------------------------------
set status_chars = " *%A"
set status_format = "---[ Folder: %f ]---[%r%m messages%?n? (%n new)?%?d? (%d to delete)?%?t? (%t tagged)? ]---%>-%?p?( %p postponed )?---"

# Header Options ---------------------------------------------------------------
ignore *																			# ignore all headers
unignore from: to: cc: bcc: date: subject:		# show only these
unhdr_order *																	# some distros order things by default
hdr_order from: to: cc: bcc: date: subject:		# and in this order

# Account Settings -------------------------------------------------------------

# Default inbox
set spoolfile = "+carwinyoung-gmail.com/INBOX"

# Alternate email addresses.

# Mailboxes to show in the sidebar
mailboxes "Personal =================" \
          +carwinyoung-gmail.com/INBOX \
					+carwinyoung-gmail.com/archive \
					+carwinyoung-gmail.com/sent \
					+carwinyoung-gmail.com/drafts \
          "Mobomo ======================" \
          +carwin-mobomo.com/INBOX \
          +carwin-mobomo.com/sales \
          +carwin-mobomo.com/archive \
          +carwin-mobomo.com/sent \
          +carwin-mobomo.com/drafts \

# Other special folders
set mbox			= "+carwinyoung-gmail.com/archive"
set postponed = "+carwinyoung-gmail.com/drafts"

# Index View Options -----------------------------------------------------------
set date_format = "%m/%d"
set index_format = "[%Z]  %D  %-20.20F  %s"
set sort = threads                          # like gmail
set sort_aux = reverse-last-date-received   # like gmail
set uncollapse_jump                         # don't collapse on an unread message
set sort_re                                 # thread based on regex
set reply_regexp = "^(([Rr][Ee]?(\[[0-9]+\])?: *)?(\[[^]]+\] *)?)*"

# Index Key Bindings -----------------------------------------------------------
bind index gg         first-entry
bind index G          last-entry

bind index R          group-reply
bind index <tab>      sync-mailbox
bind index <space>    collapse-thread

# Ctrl-R mark all as read
macro index \Cr "T~U<enter><tag-prefix><clear-flag>N<untag-pattern>.<enter>" "mark all messages as read"

# Sync email
macro index O "<shell-escape>offlineimap<enter>"            "run offlineimap to sync all mail"
macro index o "<shell-escape>offlineimap -qf INBOX<enter>"  "run offlineimap to sync inbox"

# Saner copy/move dialogs
macro index C "<copy-message>?<toggle-mailboxes>"     "copy a message to a mailbox"
macro index M "<save-message>?<toggle-mailboxes>"     "move a message to a mailbox"

# Sidebar Navigation -----------------------------------------------------------
bind index,pager <down>     sidebar-next
bind index,pager <up>       sidebar-prev
bind index,pager <right>    sidebar-open

# Pager View Options -----------------------------------------------------------
set pager_index_lines = 10        # number of index lines to show
set pager_context = 3             # number of context lines to show
set pager_stop                    # don't go to next message automatically
set menu_scroll                   # scroll in menus
set tilde                         # show tildes like in vim
unset markers                     # no ugly plus signs

set quote_regexp = "^( {0,4}[>|:#%]| {0,4}[a-z0-9]+[>|]+)+"
alternative_order text/plain text/enriched text/html

# Pager Key Bindings -----------------------------------------------------------
bind pager k previous-line
bind pager j next-line
bind pager gg top
bind pager G bottom
bind pager R group-reply

# View attachments properly.
bind attach <return> view-mailcap

# Compose View Options ---------------------------------------------------------
set realname = "Carwin Young"                 # who am i?
set envelope_from                             # which from?
set sig_dashes                                # dashes before sig
set edit_headers                              # show headers when composing
set fast_reply                                # skip to compose when replying
set askcc                                     # ask for CC:
set fcc_attach                                # save attachments with the body
unset mime_forward                            # forward attachments as part of body
set forward_format = "Fwd: %s"                # format of subject when forwarding
set forward_decode                            # decode when forwarding
set attribution = "On %d, %n wrote:"          # format of quoting header
set reply_to                                  # reply to Reply to: field
set reverse_name                              # reply to whomever it was to
set include                                   # include message in replies
set forward_quote                             # include message in forwards
set editor = "vim"                            # Use terminal Vim to compose email
auto_view text/html


folder-hook 'carwinyoung-gmail.com'  set from="carwinyoung@gmail.com"
folder-hook 'carwin-mobomo.com'  set from="carwin@mobomo.com"
#+end_src

** Secret Management

#+begin_src python :tangle ./tangled/mutt/offlineimap.py

'''
gkgetsecret.py
This provides a handful of functions for retrieving secrets from GNOME Keyring
using the libsecret API. See the documentation for each function
'''

from gi import require_version
require_version('Secret', '1')
from gi.repository import Secret

def get_pw_from_desc(pw_desc) :
    '''
    This function returns the password for an item in the default keyring
    which contains the description provided.
    Use this function if you created a password using the dialogue in Seahorse
    '''
    # Get service
    service = Secret.Service.get_sync(Secret.ServiceFlags.LOAD_COLLECTIONS)

    # Get default keyring
    keyring = Secret.Collection.for_alias_sync(service, "default", \
          Secret.CollectionFlags.NONE, None)

    # Get keyring items
    items = keyring.get_items()

    # Load secrets
    Secret.Item.load_secrets_sync(items)

    # Loop through items, find the matching one and return its password
    password = None
    for item in items :
        if item.get_label() == pw_desc :
            password = item.get_secret().get_text()
            break

    # Close connection
    service.disconnect()

    return password

def get_pw_from_attrs(*attr_val_pairs) :
    '''
    This function returns the password for an item in the default keyring
    which contains all of the attribute value pairs provided as arguments.
    Use this function if you created a password using the secret-tool command
    or another such program that interfaces with libsecret
    '''
    # Check the list of attr-val pairs is present and contains an even number
    # of elements
    if attr_val_pairs == () :
        raise TypeError("get_pw_from_attrs() at least 1 attribute-value pair " \
                "must be supplied")
    if len(attr_val_pairs) % 2 != 0 :
        raise TypeError("get_pw_from_attrs() incomplete attribute-value " \
                "pair was supplied")

    # Get service
    service = Secret.Service.get_sync(Secret.ServiceFlags.LOAD_COLLECTIONS)

    # Get default keyring
    keyring = Secret.Collection.for_alias_sync(service, "default", \
          Secret.CollectionFlags.NONE, None)

    # Get keyring items
    items = keyring.get_items()

    # Load secrets
    Secret.Item.load_secrets_sync(items)

    # Loop through items, find the one which contains all supplied attr_val
    # pairs and return its password
    password = None
    for item in items :
        attrs = item.get_attributes()
        match = True
        for x in range(0, len(attr_val_pairs), 2) :
            key = attr_val_pairs[x]
            value = attr_val_pairs[x + 1]
            try :
                if attrs[key] != value :
                    match = False
                    break
            except KeyError :
                match = False
                break
        if match :
            password = item.get_secret().get_text()
            break

    # Close connection
    service.disconnect()

    return password

def get_val_from_attrs(attr, *attr_val_pairs) :
    '''
    This function returns the value for a given attribute. The first item
    found that contains that attribute will be the one that is used. To ensure
    that the correct item is chosen, any number of attribute-value pairs can
    be optionally supplied as arguments and only the item which contains all
    of those attr-val pairs (along with the main attr) will be used.
    Use this function if you created a password using the secret-tool command
    or another such program that interfaces with libsecret
    '''
    # Check the list of attr-val pairs contains an even number of elements
    # if it exists
    if attr_val_pairs != () :
        if len(attr_val_pairs) % 2 != 0 :
            raise TypeError("get_val_from_attrs() incomplete attribute-value " \
                    "pair was supplied")

    # Get service
    service = Secret.Service.get_sync(Secret.ServiceFlags.LOAD_COLLECTIONS)

    # Get default keyring
    keyring = Secret.Collection.for_alias_sync(service, "default", \
          Secret.CollectionFlags.NONE, None)

    # Get keyring items
    items = keyring.get_items()

    # Loop through items, find the one which contains the supplied attribute
    # (plus any attr_val pairs if specified) and return that attribute's
    # value
    attr_value = None
    for item in items :
        attrs = item.get_attributes()
        try :
            attrs[attr]
        except KeyError :
            continue
        match = True
        for x in range(0, len(attr_val_pairs), 2) :
            key = attr_val_pairs[x]
            value = attr_val_pairs[x + 1]
            try :
                if attrs[key] != value :
                    match = False
                    break
            except KeyError :
                match = False
                break
        if match :
            attr_value = attrs[attr]
            break

    # Close connection
    service.disconnect()

    return attr_value

#+end_src

** Mailcap

#+begin_src conf :tangle ./tangled/mutt/mailcap
# MS Word documents
#application/msword; ~/.config/mutt/view_attachment.sh %s "-" 'document-viewer'

# Images
image/jpg; ~/.config/mutt/view_attachment.sh %s jpg
image/jpeg; ~/.config/mutt/view_attachment.sh %s jpg
image/pjpeg; ~/.config/mutt/view_attachment.sh %s jpg
image/png; ~/.config/mutt/view_attachment.sh %s png
image/gif; ~/.config/mutt/view_attachment.sh %s gif

# PDFs
application/pdf; ~/.config/mutt/view_attachment.sh %s pdf

# HTML
# text/html; ~/.config/mutt/view_attachment.sh %s html
text/html; w3m -I %{charset} -T text/html; copiousoutput;

# Unidentified files
application/octet-stream; ~/.mutt/view_attachment.sh %s "-"
#+end_src

** View Attachments

#+begin_src sh :tangle ./tangled/mutt/view_attachment.sh
#!/bin/bash
#
# Author:  Eric Gebhart
#
# Purpose:  To be called by mutt as indicated by .mailcap to handle mail attachments.
#
# Function: Copy the given file to a temporary directory so mutt
#           Won't delete it before it is read by the application.
#
#           Along the way, discern the file type or use the type
#           That is given.
#
#           Finally use 'open' or 'open -a' if the third argument is
#           given.
#
#
# Arguments:
#
#     $1 is the file
#     $2 is the type - for those times when file magic isn't enough.
#                      I frequently get html mail that has no extension
#                      and file can't figure out what it is.
#
#                      Set to '-' if you don't want the type to be discerned.
#                      Many applications can sniff out the type on their own.
#                      And they do a better job of it too.
#
#                      Open Office and MS Office for example.
#
#     $3 is open with.  as in open -a 'open with this .app' foo.xls
#
# Examples:  These are typical .mailcap entries which use this program.
#
#     Image/JPEG; /Users/vdanen/.mutt/view_attachment %s
#     Image/PNG; /Users/vdanen/.mutt/view_attachment %s
#     Image/GIF; /Users/vdanen/.mutt/view_attachment %s
#
#     Application/PDF; /Users/vdanen/.mutt/view_attachment %s
#
#         #This HTML example passes the type because file doesn't always work and
#         #there aren't always extensions.
#
#     text/html; /Users/vdanen/.mutt/view_attachment %s html
#
#         # If your Start OpenOffice.org.app is spelled with a space like this one, <--
#         # then you'll need to precede the space with a \ .  I found that too painful
#         # and renamed it with an _.
#
#     Application/vnd.ms-excel; /Users/vdanen/.mutt/view_attachment %s "-" '/Applications/OpenOffice.org1.1.2/Start_OpenOffice.org.app'
#     Application/msword; /Users/vdanen/.mutt/view_attachment %s "-" '/Applications/OpenOffice.org1.1.2/Start_OpenOffice.org.app'
#
#
# Debugging:  If you have problems set debug to 'yes'.  That will cause a debug file
#             be written to /tmp/mutt_attach/debug so you can see what is going on.
#
# See Also:  The man pages for open, file, basename
#

# the tmp directory to use.
tmpdir="/tmp/mutt_attach"

# the name of the debug file if debugging is turned on.
debug_file=$tmpdir/debug

# debug.  yes or no.
#debug="no"
debug="yes"

type=$2
open_with=$3

# make sure the tmpdir exists.
mkdir -p $tmpdir

# clean it out.  Remove this if you want the directory
# to accumulate attachment files.
rm -f $tmpdir/*

# Mutt puts everything in /tmp by default.
# This gets the basic filename from the full pathname.
filename=`basename $1`

# get rid of the extenson and save the name for later.
file=`echo $filename | cut -d"." -f1`

if [ $debug = "yes" ]; then
    echo "1:" $1 " 2:" $2 " 3:" $3 > $debug_file
    echo "Filename:"$filename >> $debug_file
    echo "File:"$file >> $debug_file
    echo "===========================" >> $debug_file
fi

# if the type is empty then try to figure it out.
if [ -z $type ]; then
    file  $1
    type=`file -bi $1 | cut -d"/" -f2`
fi

# if the type is '-' then we don't want to mess with type.
# Otherwise we are rebuilding the name.  Either from the
# type that was passed in or from the type we discerned.
if [ $type = "-" ]; then
    newfile=$filename
else
    newfile=$file.$type
fi

newfile=$tmpdir/$newfile

# Copy the file to our new spot so mutt can't delete it
# before the app has a chance to view it.
cp $1 $newfile

if [ $debug = "yes" ]; then
    echo "File:" $file "TYPE:" $type >> $debug_file
    echo "Newfile:" $newfile >> $debug_file
    echo "Open With:" $open_with >> $debug_file
fi

# If there's no 'open with' then we can let preview do it's thing.
# Otherwise we've been told what to use.  So do an open -a.

if [ -z $open_with ]; then
    xdg-open $newfile
else
    xdg-open $newfile
fi
#+end_src
** Post-tangle actions

#+begin_src sh :noweb-ref symlinks
ln -sfv $(pwd)/tangled/mutt ~/.config/mutt
#+end_src

* OfflineImap
#+begin_src conf :tangle ./tangled/offlineimap/config
[general]
ui = ttyui
accounts = CarwinYoung, Mobomo
pythonfile=~/.config/mutt/offlineimap.py
fsync = False

[Account CarwinYoung]
localrepository = CarwinYoung-Local
remoterepository = CarwinYoung-Remote
postsynchook = notmuch new

[Repository CarwinYoung-Local]
type = Maildir
localfolders = ~/.mail/carwinyoung-gmail.com
nametrans = lambda folder: {'drafts':   '[Gmail]/Drafts',
                            'sent':     '[Gmail]/Sent Mail',
                            'flagged':  '[Gmail]/Starred',
                            'trash':    '[Gmail]/Trash',
                            'archive':  '[Gmail]/All Mail',
                            }.get(folder, folder)

[Repository CarwinYoung-Remote]
maxconnections = 1
type = Gmail
ssl = yes
remoteuser = carwinyoung@gmail.com
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
remotepasseval = get_pw_from_desc("Personal gmail password for mutt")
realdelete = no
nametrans = lambda folder: {'[Gmail]/Drafts':     'drafts',
                            '[Gmail]/Sent Mail':  'sent',
                            '[Gmail]/Starred':    'flagged',
                            '[Gmail]/Trash':      'trash',
                            '[Gmail]/All Mail':   'archive',
                            }.get(folder, folder)
folderfilter = lambda folder: folder not in ['[Gmail]/Trash',
                                             '[Gmail]/Important',
                                             '[Gmail]/Spam'
                                            ]





[Account Mobomo]
localrepository = Mobomo-Local
remoterepository = Mobomo-Remote
postsynchook = notmuch new

[Repository Mobomo-Local]
type = Maildir
localfolders = ~/.mail/carwin-mobomo.com
nametrans = lambda folder: {'drafts':     '[Gmail]/Drafts',
                            'sent':       '[Gmail]/Sent Mail',
                            'sales':      'Sales',
                            'flagged':    '[Gmail]/Starred',
                            'trash':      '[Gmail]/Trash',
                            'archive':    '[Gmail]/All Mail',
                           }.get(folder, folder)


[Repository Mobomo-Remote]
maxconnections = 1
type = Gmail
ssl = yes
remoteuser = carwin@mobomo.com
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
remotepasseval = get_pw_from_desc("Mobomo gmail password for mutt")
realdelete = no
nametrans = lambda folder: {'[Gmail]/Drafts':     'drafts',
                            '[Gmail]/Sent Mail':  'sent',
                            'Sales':              'sales',
                            '[Gmail]/Starred':    'flagged',
                            '[Gmail]/Trash':      'trash',
                            '[Gmail]/All Mail':   'archive',
                           }.get(folder, folder)
folderfilter = lambda folder: folder not in ['[Gmail]/Trash',
                                             '[Gmail]/Important',
                                             '[Gmail]/Spam'
                                            ]

#+end_src

** Post-tangle actions

#+begin_src sh :noweb-ref symlinks
ln -sfv $(pwd)/tangled/offlineimap $HOME/.config/offlineimap
#+end_src

* ncmpcpp

Music player interface.

** Primary configuration

#+begin_src conf :tangle ./tangled/ncmpcpp/config
browser_sort_mode = name
browser_sort_format = {%A - }{%t}|{%f} {(%l)}
song_columns_list_format = (6f)[green]{NE} (30)[]{a} (30)[white]{t} (30)[cyan]{b} (7f)[magenta]{l}

playlist_show_remaining_time = yes
playlist_shorten_total_times = yes
playlist_separate_albums = yes

browser_display_mode = columns
search_engine_display_mode = columns
playlist_editor_display_mode = columns

autocenter_mode = yes
centered_cursor = yes

default_place_to_search_in = database
user_interface = alternative

media_library_primary_tag = album_artist
cyclic_scrolling = yes

allow_for_physical_item_deletion = no

startup_screen = "visualizer"
startup_slave_screen = "playlist"

locked_screen_width_part = 20
ask_for_locked_screen_width_part = no

clock_display_seconds = yes
display_volume_level = yes
display_bitrate = yes
display_remaining_time = yes

ignore_leading_the = yes
media_library_sort_by_mtime = no

enable_window_title = yes

external_editor = vim
use_console_editor = yes
execute_on_song_change = "~/.config/ncmpcpp/art.sh"
#+end_src

** Art

This only sort of works and pretty much sucks. I wish there was a better way.


#+begin_src sh :tangle ./tangled/ncmpcpp/art.sh
#!/usr/bin/env sh

#-------------------------------#
# Generate current song cover   #
# ffmpeg version                #
#-------------------------------#

# Path to music directory
MUSIC_DIR="$HOME/Audio/Music"
# Path to output cover
COVER="/tmp/cover.png"
# Size of cover
COVER_SIZE=297
# Size in pixel of borders to crop out
CROP_BORDER=20
# Radius or rounded borders
BORDER_RADIUS=10

ffmpeg_cover() {
    ffmpeg -loglevel 0 -y -i "$1" -vf "crop=min(in_w-$CROP_BORDER\,in_h-$CROP_BORDER):out_w,scale=-2:$COVER_SIZE" "$COVER"
}

rounded_cover() {
    convert -quiet "$COVER" \
     \( +clone  -alpha extract \
        -draw "fill black polygon 0,0 0,$BORDER_RADIUS $BORDER_RADIUS,0 fill white circle $BORDER_RADIUS,$BORDER_RADIUS $BORDER_RADIUS,0" \
        \( +clone -flip \) -compose Multiply -composite \
        \( +clone -flop \) -compose Multiply -composite \
     \) -alpha off -compose CopyOpacity -composite "$COVER"
}

fallback_find_cover() {
    album=$(dirname "$file")
    album_cover="$(find "$album" -type d -exec find {} -maxdepth 1 -type f -iregex ".*\(covers?\|folders?\|artworks?\|fronts?\|scans?\).*[.]\(jpe?g\|png\|gif\|bmp\)" \;)"
    [ -z "$album_cover" ] && album_cover="$(find "$album" -type d -exec find {} -maxdepth 1 -type f -iregex ".*[.]\(jpe?g\|png\|gif\|bmp\)" \;)"
    [ -z "$album_cover" ] && album_cover="$(find "${album%/*}" -type d -exec find {} -maxdepth 1 -type f -iregex ".*\(covers?\|folders?\|artworks?\|fronts?\|scans?\|booklets?\).*[.]\(jpe?g\|png\|gif\|bmp\)" \;)"
    album_cover="$(echo -n "$album_cover" | grep -iv '\(back\|cd\)\.' | head -n1)"
}

main() {
    file="$MUSIC_DIR/$(mpc --format %file% current)"

    [ -n "$file" ] && ffmpeg_cover "$file" ||
        fallback_find_cover && ffmpeg_cover "$album_cover" && rounded_cover
}

main
printf "\e]20;/tmp/cover.png;20x20+0+10:op=keep-aspect\a"
#+end_src

* Vim

Vim configuration. Ol' trusty.

#+begin_src conf :tangle ./tangled/vimrc
" Plugin Management
" ------------------------------------------------------------------------------
" Check for a plugin manager, and if it doesn't exist, go get it.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'plasticboy/vim-markdown'
Plug 'pangloss/vim-javascript'
Plug 'cakebaker/scss-syntax.vim'
Plug 'evidens/vim-twig'
Plug 'morhetz/gruvbox', { 'as': 'gruvbox' }

" call these on-demand
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }

call plug#end()

" NerdTree plugin configuration
" ------------------------------------------------------------------------------
" Close vim if the only window left open is NERDTree.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Markdown plugin configurations
" ------------------------------------------------------------------------------
" Disable folding
let g:vim_markdown_folding_disabled = 1

" Lightline plugin configuration
" ------------------------------------------------------------------------------
" Set lightline colorscheme
let g:lightline = {
  \ 'colorscheme': 'seoul256',
  \ }

" Key Mappings
" ------------------------------------------------------------------------------
:let mapleader = ","
" Do escape with kj
inoremap kj <c-c>`^
" Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>
" Fast save a buffer
nmap <leader>ww :w!<cr>
" Fast save and quit buffer
nmap <leader>wq :wq!<cr>
" Fast quit
nmap <leader>q :q!<cr>
" New tab
map <leader>tn :tabnew<cr> " Tab only map <leader>to :tabonly<cr>
" Tab move
map <leader>tm :tabmove<cr>
" Tab next
nnoremap <leader>. :tabnext<CR>
" Tab previous
nnoremap <leader>' :tabprevious<CR>
" Toggle Paste mode (,p)
set pastetoggle=<leader>p
map <leader>p :set invpaste paste?<CR>
" Strip trailing whitespace (,ss)
nnoremap <leader>ss :call StripWhitespace()<CR>
" Toggle background transparency (C-T)
nnoremap <C-T> :call ToggleTransparent()<CR>
" Map <C-L> (redraw screen) to also turn off search highlighting until the next search.
nnoremap <C-L> :nohl<CR><C-L>

" General
" ------------------------------------------------------------------------------
set background=dark
"colorscheme gruvbox
"let g:colors_name='gruvbox'
set t_Co=256
syntax on
set autoindent " When opening a new line and no filetype-specific indenting is enabled, keep same indent.
set backspace=indent,eol,start " Allow backspacing over auto-indents, line breaks, and start of insert action
set colorcolumn=+1 " Highlight the column width border (+1 means highlight line 81 if textwidth is 80).
set confirm " Raise a dialog asking to save changed files.
set cursorline " Highlight the cursor line.
set encoding=utf-8 nobomb " Set encoding without BOM
set expandtab " Expand tabs into spaces.
set foldcolumn=4 " Indicate a fold with 4 columns.
set foldenable " Enable folds.
set foldlevel=2 " Fold / unfold this many.
set foldmethod=syntax " Set the fold method, see :help foldmethod.
set foldminlines=0 " Set a minimum value for closed folds.
set foldnestmax=3 " Set maximum nesting of folds for syntax method.
set history=1000 " Remember this many lines for the five history tables.
set hlsearch " Highlight searches (<C-L> to toggle).
set ignorecase " Use case insensitive search.
set incsearch " Highlight incrementally as search is typed.
set laststatus=2 " Always display the status line.
set magic " Enable extended regexes.
set mouse=a " Enable use of the mouse.
set noerrorbells " Don't make noises when doing bad things.
set nojoinspaces " Only insert single space after a '.', '?', and '!' with a join command.
set nostartofline " Don't reset cursor when moving around.
set notimeout ttimeout ttimeoutlen=200 " Quickly time out on keycodes, but never on mappings.
set nowrap " No visual wrapping.
set number " Display line numbers.
set scrolloff=3 " Keep this many lines above/below the cursor for context.
set shiftwidth=2 " Define columns to use for indenting (>> and <<).
set showcmd " Show partial commands in the last line of the screen.
set showmode " Show the current mode in the last line.
set showtabline=2 " Always display the tabline up top.
set smartcase " Use case sensitive search when using capitals.
set smartindent " Indent new lines intelligently.
set softtabstop=2 " Move the cursor two characters when typing Tab in insert mode.
set suffixes=.bak,.swp,.swo,.info,.aux,.log,.pdf,.bin,.dmg,.exe,.out,.inc,.pyd,.pyc,.dll " Ignore these extensions when completing filenames and encountering multiple matches.
set tabstop=2 " Define how many columns a Tab counts for.
set title " Set the window title to the filename.
set ttyfast " Improve redrawing.
set textwidth=80 " Set the max columns for text before breaking to a new line.
set undofile " Persistent undo.
set wildmenu " Better command-line completion.
set wrapscan " Searches wrap around end of file.

" Highlight redundant whitespace.
highlight RedundantSpaces ctermbg=red guibg=black
match RedundantSpaces /\s\+$\| \+\ze\t\|\t/

" Change the colorcolumn color.
highlight ColorColumn ctermbg=236

" Local directories
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
set undodir=~/.vim/undo

" Syntax
" ------------------------------------------------------------------------------
" HTML
let g:html_indent_tags = 'li\|p' " <li> and <p> tags are block elements

" ZSH
au BufRead,BufNewFile .zsh_rc,.functions,.commonrc set ft=zsh

" Sass
au BufRead,BufNewFile *.scss set filetype=scss.css
autocmd FileType scss set iskeyword+=-

" Make
autocmd FileType make setlocal noexpandtab

" Markdown
au BufRead,BufNewFile *.m*down setlocal filetype=markdown
au BufRead,BufNewFile *.md setlocal textwidth=80
au BufRead,BufNewFile *.md setlocal spell

" Drupal
au BufRead,BufNewFile *.module set filetype=php
au BufRead,BufNewFile *.install set filetype=php
au BufRead,BufNewFile *.test set filetype=php
au BufRead,BufNewFile *.inc set filetype=php
au BufRead,BufNewFile *.profile set filetype=php
au BufRead,BufNewFile *.view set filetype=php
au BufRead,BufNewFile *.theme set filetype=php

" PHP
autocmd FileType php set omnifunc=phpcomplete#CompletePHP

" Functions
" ------------------------------------------------------------------------------
" Strip trailing whitespace
function! StripWhitespace ()
  let save_cursor = getpos('.')
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

" Toggle Transparency
let t:is_transparent = 1
function! ToggleTransparent()
  if t:is_transparent == 0
    hi Normal guibg=NONE ctermbg=NONE
    let t:is_transparent = 1
  else
    hi Normal guibg=#000000 ctermbg=16
    let t:is_transparent = 0
  endif
endfunction
#+end_src

** Post-tangle actions

Download the vim-plug plugin manager for vim and put it in vim's autoload directory.

#+begin_src sh :noweb-ref symlinks
curl -fLo $(pwd)/tangled/vim/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
#+end_src

Create vim directories.

#+begin_src  sh :noweb-ref symlinks
mkdir $(pwd)/tangled/vim/undo
mkdir $(pwd)/tangled/vim/backups
mkdir $(pwd)/tangled/vim/swaps
#+end_src

Create symlinks.

#+begin_src sh :noweb-ref symlinks
ln -sfv $(pwd)/tangled/vim $HOME/.vim
ln -sfv $(pwd)/tangled/vimrc $HOME/.vimrc
#+end_src
* Rofi

This is my dmenu replacement.

#+begin_src conf :tangle ./tangled/rofi/config.rasi
configuration {
	theme: "~/.config/rofi/themes/slate.rasi";
}
#+end_src

** Theme

#+begin_src css :tangle ./tangled/rofi/themes/slate.rasi
 * {
  background-color: #282C33;
  border-color: #2e343f;
  text-color: #8ca0aa;
  spacing: 0;
  width: 512px;
}

inputbar {
  border: 0 0 1px 0;
  children: [prompt,entry];
}

prompt {
  padding: 16px;
  border: 0 1px 0 0;
}

textbox {
  background-color: #2e343f;
  border: 0 0 1px 0;
  border-color: #282C33;
  padding: 8px 16px;
}

entry {
  padding: 16px;
}

listview {
  cycle: false;
  margin: 0 0 -1px 0;
  scrollbar: false;
}

element {
  border: 0 0 1px 0;
  padding: 16px;
}

element selected {
  background-color: #2e343f;
}
#+end_src

** Post-tangle actions

#+begin_src sh :noweb-ref symlinks
ln -sfv $(pwd)/tangled/rofi ~/.config/rofi
#+end_src

* mpd

Music player daemon configuration.

#+begin_src conf :tangle ./tangled/mpd/mpd.conf

# An example configuration file for MPD.
# Read the user manual for documentation: http://www.musicpd.org/doc/user/


# Files and directories #######################################################
#
# This setting controls the top directory which MPD will search to discover the
# available audio files and add them to the daemon's online database. This
# setting defaults to the XDG directory, otherwise the music directory will be
# be disabled and audio files will only be accepted over ipc socket (using
# file:// protocol) or streaming files over an accepted protocol.
#
music_directory  "~/Audio/Music"
#
# This setting sets the MPD internal playlist directory. The purpose of this
# directory is storage for playlists created by MPD. The server will use
# playlist files not created by the server but only if they are in the MPD
# format. This setting defaults to playlist saving being disabled.
#
playlist_directory  "~/.config/mpd/playlists"
#
# This setting sets the location of the MPD database. This file is used to
# load the database at server start up and store the database while the
# server is not up. This setting defaults to disabled which will allow
# MPD to accept files over ipc socket (using file:// protocol) or streaming
# files over an accepted protocol.
#
db_file   "~/.config/mpd/database"
#
# These settings are the locations for the daemon log files for the daemon.
# These logs are great for troubleshooting, depending on your log_level
# settings.
#
# The special value "syslog" makes MPD use the local syslog daemon. This
# setting defaults to logging to syslog.
#
log_file   "syslog"
#
# This setting sets the location of the file which stores the process ID
# for use of mpd --kill and some init scripts. This setting is disabled by
# default and the pid file will not be stored.
#
pid_file   "~/.config/mpd/pid"
#
# This setting sets the location of the file which contains information about
# most variables to get MPD back into the same general shape it was in before
# it was brought down. This setting is disabled by default and the server
# state will be reset on server start up.
#
state_file   "~/.config/mpd/state"
#
# The location of the sticker database.  This is a database which
# manages dynamic information attached to songs.
#
sticker_file   "~/.config/mpd/sticker.sql"
#
###############################################################################


# General music daemon options ################################################
#
# This setting specifies the user that MPD will run as. MPD should never run as
# root and you may use this setting to make MPD change its user ID after
# initialization. This setting is disabled by default and MPD is run as the
# current user.
#
#user    "nobody"
#
# This setting specifies the group that MPD will run as. If not specified
# primary group of user specified with "user" setting will be used (if set).
# This is useful if MPD needs to be a member of group such as "audio" to
# have permission to use sound card.
#
#group    "nogroup"
#
# This setting sets the address for the daemon to listen on. Careful attention
# should be paid if this is assigned to anything other then the default, any.
# This setting can deny access to control of the daemon. Not effective if
# systemd socket activiation is in use.
#
# For network
bind_to_address  "0.0.0.0"
#
# And for Unix Socket
#bind_to_address  "~/.mpd/socket"
#
# This setting is the TCP port that is desired for the daemon to get assigned
# to.
#
#port    "6600"
#
# Suppress all messages below the given threshold.  Use "verbose" for
# troubleshooting.
#
#log_level   "notice"
#
# Setting "restore_paused" to "yes" puts MPD into pause mode instead
# of starting playback after startup.
#
#restore_paused "no"
#
# This setting enables MPD to create playlists in a format usable by other
# music players.
#
#save_absolute_paths_in_playlists "no"
#
# This setting defines a list of tag types that will be extracted during the
# audio file discovery process. The complete list of possible values can be
# found in the user manual.
#metadata_to_use "artist,album,title,track,name,genre,date,composer,performer,disc"
#
# This example just enables the "comment" tag without disabling all
# the other supported tags:
#metadata_to_use "+comment"
#
# This setting enables automatic update of MPD's database when files in
# music_directory are changed.
#
auto_update "yes"
#
# Limit the depth of the directories being watched, 0 means only watch
# the music directory itself.  There is no limit by default.
#
auto_update_depth "3"
#
###############################################################################


# Symbolic link behavior ######################################################
#
# If this setting is set to "yes", MPD will discover audio files by following
# symbolic links outside of the configured music_directory.
#
follow_outside_symlinks "yes"
#
# If this setting is set to "yes", MPD will discover audio files by following
# symbolic links inside of the configured music_directory.
#
follow_inside_symlinks  "yes"
#
###############################################################################


# Zeroconf / Avahi Service Discovery ##########################################
#
# If this setting is set to "yes", service information will be published with
# Zeroconf / Avahi.
#
#zeroconf_enabled  "yes"
#
# The argument to this setting will be the Zeroconf / Avahi unique name for
# this MPD server on the network. %h will be replaced with the hostname.
#
#zeroconf_name   "Music Player @ %h"
#
###############################################################################


# Permissions #################################################################
#
# If this setting is set, MPD will require password authorization. The password
# setting can be specified multiple times for different password profiles.
#
#password                        "password@read,add,control,admin"
#
# This setting specifies the permissions a user has who has not yet logged in.
#
#default_permissions             "read,add,control,admin"
#
###############################################################################


# Database #######################################################################
#

#database {
#       plugin "proxy"
#       host "other.mpd.host"
#       port "6600"
#}

# Input #######################################################################
#

input {
        plugin "curl"
#       proxy "proxy.isp.com:8080"
#       proxy_user "user"
#       proxy_password "password"
}

#
###############################################################################

# Audio Output ################################################################
#
# MPD supports various audio output types, as well as playing through multiple
# audio outputs at the same time, through multiple audio_output settings
# blocks. Setting this block is optional, though the server will only attempt
# autodetection for one sound card.
#
# An example of an ALSA output:
#
#audio_output {
# type  "alsa"
# name  "My ALSA Device"
## device  "hw:0,0" # optional
## mixer_type      "hardware" # optional
## mixer_device "default" # optional
## mixer_control "PCM"  # optional
## mixer_index "0"  # optional
#}
#
# An example of an OSS output:
#
#audio_output {
# type  "oss"
# name  "My OSS Device"
## device  "/dev/dsp" # optional
## mixer_type      "hardware" # optional
## mixer_device "/dev/mixer" # optional
## mixer_control "PCM"  # optional
#}
#
# An example of a shout output (for streaming to Icecast):
#
#audio_output {
# type  "shout"
# encoder  "vorbis"  # optional
# name  "My Shout Stream"
# host  "localhost"
# port  "8000"
# mount  "/mpd.ogg"
# password "hackme"
# quality  "5.0"
# bitrate  "128"
# format  "44100:16:1"
## protocol "icecast2"  # optional
## user  "source"  # optional
## description "My Stream Description" # optional
## url  "http://example.com" # optional
## genre  "jazz"   # optional
## public  "no"   # optional
## timeout  "2"   # optional
## mixer_type      "software"  # optional
#}
#
# An example of a recorder output:
#
#audio_output {
# type  "recorder"
# name  "My recorder"
# encoder  "vorbis"  # optional, vorbis or lame
# path  "/var/lib/mpd/recorder/mpd.ogg"
## quality  "5.0"   # do not define if bitrate is defined
# bitrate  "128"   # do not define if quality is defined
# format  "44100:16:1"
#}
#
# An example of a httpd output (built-in HTTP streaming server):
#
#audio_output {
# type  "httpd"
# name  "My HTTP Stream"
# encoder  "vorbis"  # optional, vorbis or lame
# port  "8000"
# bind_to_address "0.0.0.0"  # optional, IPv4 or IPv6
## quality  "5.0"   # do not define if bitrate is defined
# bitrate  "128"   # do not define if quality is defined
# format  "44100:16:1"
# max_clients "0"   # optional 0=no limit
#}
#
# An example of a pulseaudio output (streaming to a remote pulseaudio server)
#
#audio_output {
# type  "pulse"
# name  "My Pulse Output"
## server  "remote_server"  # optional
## sink  "remote_server_sink" # optional
## media_role "media_role"  #optional
#}
#
# An example of a winmm output (Windows multimedia API).
#
#audio_output {
# type  "winmm"
# name  "My WinMM output"
## device  "Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
#  or
## device  "0"  # optional
## mixer_type "hardware" # optional
#}
#
# An example of a wasapi output (Windows multimedia API).
#
#audio_output {
# type  "wasapi"
# name  "My WASAPI output"
## device  "Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
#  or
## device  "0"  # optional
## Exclusive mode blocks all other audio source, and get best audio quality without resampling.
## exclusive "no"  # optional
## Enumerate all devices in log.
## enumerate "no"  # optional
#}
#
# An example of an openal output.
#
#audio_output {
# type  "openal"
# name  "My OpenAL output"
## device  "Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
#}
#
# An example of an sndio output.
#
#audio_output {
# type  "sndio"
# name  "sndio output"
# mixer_type "hardware"
#}
#
# An example of an OS X output:
#
#audio_output {
# type  "osx"
# name  "My OS X Device"
## device  "Built-in Output" # optional
## channel_map      "-1,-1,0,1" # optional
#}
#
## Example "pipe" output:
#
#audio_output {
# type  "pipe"
# name  "my pipe"
# command  "aplay -f cd 2>/dev/null"
## Or if you're want to use AudioCompress
# command  "AudioCompress -m | aplay -f cd 2>/dev/null"
## Or to send raw PCM stream through PCM:
# command  "nc example.org 8765"
# format  "44100:16:2"
#}
#
## An example of a null output (for no audio output):
#
#audio_output {
# type  "null"
# name  "My Null Output"
# mixer_type      "none"   # optional
#}
#
###############################################################################


# Normalization automatic volume adjustments ##################################
#
# This setting specifies the type of ReplayGain to use. This setting can have
# the argument "off", "album", "track" or "auto". "auto" is a special mode that
# chooses between "track" and "album" depending on the current state of
# random playback. If random playback is enabled then "track" mode is used.
# See <http://www.replaygain.org> for more details about ReplayGain.
# This setting is off by default.
#
#replaygain   "album"
#
# This setting sets the pre-amp used for files that have ReplayGain tags. By
# default this setting is disabled.
#
#replaygain_preamp  "0"
#
# This setting sets the pre-amp used for files that do NOT have ReplayGain tags.
# By default this setting is disabled.
#
#replaygain_missing_preamp "0"
#
# This setting enables or disables ReplayGain limiting.
# MPD calculates actual amplification based on the ReplayGain tags
# and replaygain_preamp / replaygain_missing_preamp setting.
# If replaygain_limit is enabled MPD will never amplify audio signal
# above its original level. If replaygain_limit is disabled such amplification
# might occur. By default this setting is enabled.
#
#replaygain_limit  "yes"
#
# This setting enables on-the-fly normalization volume adjustment. This will
# result in the volume of all playing audio to be adjusted so the output has
# equal "loudness". This setting is disabled by default.
#
#volume_normalization  "no"
#
###############################################################################

# Character Encoding ##########################################################
#
# If file or directory names do not display correctly for your locale then you
# may need to modify this setting.
#
#filesystem_charset  "UTF-8"
#
###############################################################################

# Visualization
# audio_output {
#   type  "fifo"
#   name  "Visualizer feed"
#   path "/tmp/mpd.fifo"
#   format "44100:16:2"
# }

#+end_src

** Post-tangle actions

Make a playlists directory.

#+begin_src sh :noweb-ref symlinks
mkdir $(pwd)/tangled/mpd/playlists
#+end_src

Symlink the mpd configuration directory.

#+begin_src sh :noweb-ref symlinks
ln -sfv $(pwd)/tangled/mpd ~/.config/mpd
#+end_src
