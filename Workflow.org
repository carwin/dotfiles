#+title: Workflow Configuration
#+author: Carwin Young
#+property: header-args:emacs-lisp :mkdirp yes :lexical t

#+begin_src emacs-lisp :noweb yes :tangle (expand-file-name "~workflow.el" ~eusr-custom-lisp-directory) :mkdirp yes
;;; ~workflow.el --- Workflow configuration for tasks, notes, agenda, etc... -*- lexical-binding: t; -*-
;; Copyright (C) 2020-2022 Carwin Young

;; Author: Carwin Young <emacs@carw.in>
;; Keywords: org
;; Package-Requires: ((org "9.5.3") straight use-package)
;; This file is not part of GNU Emacs.
;; This file is free softwareâ€¦

;;; Commentary:
;; This file is automatically generated via Org Mode's
;; `org-babel-tangle' feature. The original literate configuration can be
;; found in the source repository's Workflow.org file.

;;; Code:
(require 'org)
;; Workflow custom definitions
<<workflow-group-definitions>>
<<workflow-capture-template-definitions>>
<<workflow-custom-functions>>
;; General workflow keybinding
<<workflow-keybinding>>
;; Custom medication log feature
<<workflow-medication-log>>
;; org-mode capture templates
<<workflow-org-capture-templates>> ; Not to be confused with the org-roam capture templates
;; org-mode tasks (todos etc...)
<<workflow-tasks>>
;; org-mode-agenda setup
<<workflow-agenda>>
;; Org-roam package & workflow configuration
<<workflow-org-roam>>
;; Project navigation
<<workflow-projectile>>
;;; Workflow hooks
<<workflow-function-hooks>>
;; Provide the `~workflow' symbol for requiring elsewhere.
(provide '~workflow)
;;; ~workflow.el ends here
#+end_src

* Workflow Custom Definitions

This file's custom settings are defined using =defcustom= to enable users to leverage Emacs' ~customize~
feature to set their values.

#+begin_comment
This is an attempt at making this Emacs configuration more portable and available to others.
#+end_comment

Below are the group definitions which will be applied to this configuration's custom variables for
organization within Emacs.

The =~workflow= group will house general workflow settings and the =~workflow-roam= group will house
workflow settings related specifically to the =org-roam= package.

#+begin_src emacs-lisp :noweb-ref workflow-group-definitions
(defgroup ~workflow nil
  "Personal workflow customizations.")

(defgroup ~workflow-roam nil
  "Personal customizations for the org-roam package."
  :version "27.2")
#+end_src

With groups defined, the actual custom variable definitions are next. For information about each
setting, take a look at the corresponding inline documentation string.

#+begin_src emacs-lisp :noweb-ref workflow-capture-template-definitions
(defcustom ~workflow-state-file-map nil
  "A map of files into which tasks will be captured into based on their state."
  :tag "Workflow State Files"
  :group '~workflow)

(defcustom ~workflow-capture-template-task nil
  "Capture template for a Task."
  :tag "Task Capture Template"
  :group '~workflow)

(defcustom ~workflow-capture-template-mail-task nil
  "Capture template for a task based on an Email message"
  :tag "Mail Capture Template"
  :group '~workflow)

(defcustom ~workflow-capture-template-contact nil
  "Capture template for an org-contacts Contact"
  :tag "Contact Capture Template"
  :group '~workflow)

(defcustom ~workflow-capture-template-dossier-entry nil
  "Capture template for an entry into a contact's Dossier file."
  :tag "Dossier Entry Template"
  :group '~workflow)

(defcustom ~workflow-primary-contexts '(("@work" . ?w)
                                        ("@home" . ?h))
  "Primary contexts for the workflow"
  :tag "Primary Workflow Contexts"
  :group '~workflow)
#+end_src

* Org-Roam (Notes & Brain)

#+begin_src emacs-lisp :noweb yes :noweb-ref workflow-org-roam
<<workflow-roam-custom-variable-definitions>>
<<workflow-roam-custom-template-definitions>>

<<pkg-org-roam>>
;; <<workflow-roam-custom-variable-declarations>>
;; <<workflow-roam-core-variable-declarations>>

<<workflow-roam-core-template-declarations>>

<<workflow-roam-keybinding>>

<<workflow-roam-custom-functions>>
<<workflow-roam-search-customization>>
#+end_src

=org-roam= variable customizations are defined just like the general Workflow variables.

#+begin_src emacs-lisp :noweb-ref workflow-roam-custom-variable-definitions
(defcustom ~org-roam-note-type-categories nil
  "The note categories to use within org-roam"
  :tag "Note Types"
  :group '~workflow-roam)

(defcustom ~org-roam-daily-note-filename nil
  "The filename template pattern to be used for org-roam's daily note file.
The filename is relative to the `org-roam-directory' so including a nested path
will also be relative to that symbol's value on the filesystem."
  :tag "Dailies File Filename"
  :group '~workflow-roam)

(defcustom ~org-roam-daily-note-header nil
  "The capture template appropriate pattern to be used as the header for
org-roam's daily note file."
  :tag "Dailies File Header"
  :group '~workflow-roam)

(defcustom ~org-roam-project-note-directory nil
  "The path, relative to `org-roam-directory', where Project style notes should
  be stored."
  :tag "Project Notes Directory"
  :group '~workflow-roam)

(defcustom ~org-roam-project-note-header nil
  "The capture template appropriate pattern to be used as the header for
Project style notes managed through org-roam's functionality."
  :tag "Project Note Header"
  :group '~workflow-roam)
#+end_src

Each of the templates used for the various /custom/ =org-roam= capture features this module provides is
defined below, this keeps them cleanly separated from the rest of the module and makes editing
simpler.

#+begin_src emacs-lisp :noweb-ref workflow-roam-custom-template-definitions
(defconst ~org-roam-capture-template-project
  `("p" "project" plain
    "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
    :if-new (file+head "%(expand-file-name \"%<%Y%m%d%H%M%S>-${slug}.org\" ~org-roam-project-note-directory)"
                       ,~org-roam-project-note-header)
    :unnarrowed t)
  "A Project is a note meant for long term editing and scoped goal tracking.
It is often excluded from functions which encourage Zettelkasten-based filtering
and usage.")

(defconst ~org-roam-capture-template-project-task
  `("T" "project" entry
    "** TODO %?\n %U\n %a\n %i"
    :if-new (file+head "%(expand-file-name \"%<%Y%m%d%H%M%S>-${slug}.org\" ~org-roam-project-note-directory)"
                       ,~org-roam-project-note-header
                       ("Tasks"))
    :empty-lines 1
    :unnarrowed t)
  "A Project is a note meant for long term editing and scoped goal tracking.
It is often excluded from functions which encourage Zettelkasten-based filtering
and usage.")

(defconst ~org-roam-capture-template-year
  '("y" "year" plain "\n* Goals\n\n%?* Summary\n\n"
    :if-new (file+head "%(expand-file-name \"%<%Y>/%<%Y>.org\" ~org-roam--dailies-directory-full-path)"
                       "#+title: %<%Y>\n#+filetags: project\n")
    :unnarrowed nil)
  "Capture template for a Year note.
A Year note behaves more or less as a stub for organizing Daily notes.
Though unused throughout the rest of this module, the template contains headings
for Goals and Summaries to provide helpful options for extending this note
type's functionality.
Integrating archiving, refiling, or other workflow systems into the Year note is
possible, but outside the scope of the module that defines it.")

(defconst ~org-roam-capture-template-month
  '("m" "month" plain "\n* Goals\n\n%?* Summary\n\n"
    :if-new (file+head "%(expand-file-name \"%<%Y>/%<%B>/%<%Y-%B>.org\" ~org-roam--dailies-directory-full-path)"
                       "#+title: %<%Y-%B>\n#+filetags: :project:\n\n[[roam:%<%Y>]]\n\n")
    :unnarrowed t)
  "Capture template for a Month note.
A Month note behaves more or less as a stub for organizing Daily notes.
Though unused throughout the rest of this module, the template contains headings
for Goals and Summaries to provide helpful options for extending this note
type's functionality.
Integrating archiving, refiling, or other workflow systems into the Year note is
possible, but outside the scope of the module that defines it.")
#+end_src

Set core custom =org-roam= values after definition. It's much easier to find these settings within the
file if they're separated from the primary definition block.

#+begin_src emacs-lisp :noweb-ref workflow-roam-custom-variable-declarations
(setq ~org-roam-daily-note-filename             "%<%Y>/%<%B>/daily-%<%Y-%m-%d>.org"
      ~org-roam-daily-note-header               "#+title: %<%Y-%m-%d %a>\n#+filetags: :dailies:\n[[roam:%<%Y-%B>]]\n\n* Log\n\n* Journal\n\n* Meetings\n"
      ~org-roam-project-note-directory          (expand-file-name "Roam/Projects/" "~/Notes")
      ~org-roam-project-note-header             "#+title: ${title}\n#+category: ${title}\n#+filetags: project"
      ~org-roam--dailies-directory-full-path    (expand-file-name org-roam-dailies-directory org-roam-directory)
      ~org-roam-note-type-categories            '("project"
                                                  "quote"
                                                  "person"
                                                  "stub")
      ~workflow-primary-contexts                '(("@work" . ?w)
                                                  ("@home" . ?h)))
#+end_src

#+begin_src emacs-lisp :noweb-ref workflow-roam-core-variable-declarations
(setq org-roam-db-location              (expand-file-name ".org-roam.db" org-directory)
      org-roam-dailies-directory        "Journal/"
      org-roam-completion-everywhere    t
      org-roam-graph-executable         "dot"
      org-roam-db-gc-threshold          most-positive-fixnum
      org-id-link-to-org-use-id         'create-if-interactive
      org-roam-v2-ack                   t
      org-roam-node-display-template    (concat "${backlinkscount:16} ${functiontag:27} ${hierarchy} ${othertags}"))
#+end_src

** Org-Roam Configuration

#+begin_src emacs-lisp :noweb yes :noweb-ref pkg-org-roam
(setq org-roam-directory                "~/Notes/Roam")

(use-package org-roam
  :straight t
  :ensure t
  :after (org)
  :init
  (org-roam-db-autosync-mode +1)
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 0)
                 (window-width . 0.20)
                 (preserve-size . (t . nil))
                 (window-parameters . ((other-window . t)
                                       (no-delete-other-windows . t)))))
  :config
  <<workflow-roam-core-variable-declarations>>
  <<workflow-roam-custom-variable-declarations>>

  (add-hook 'org-roam-buffer-postrender-functions #'magit-section-show-level-2))
#+end_src

** Built-in Org-Roam Capture Templates

=org-roam= provides a handful of capture templates, the configurations for which are set below.

#+begin_src emacs-lisp :noweb-ref workflow-roam-core-template-declarations
;; Define only default daily template to ensure choice interface is skipped.
(setq org-roam-dailies-capture-templates
      `(("d" "default" item "%<%I:%M %p>: %?"
        :if-new (file+head+olp ,~org-roam-daily-note-filename
                               ,~org-roam-daily-note-header
                               ("Log"))
        :empty-lines 0)))

(setq capture-template-roam-default
      '("d" "default" plain "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t
        :empty-lines 1))

(setq capture-template-roam-journal
      `("j" "journal" entry
        "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
        :if-new (file+head+olp ,~org-roam-daily-note-filename
                               ,~org-roam-daily-note-header
                               ("Journal"))
        :empty-lines 1))

(setq capture-template-roam-dailies-task
      `("t" "task" entry
        "** TODO %?\n  %U\n  %a\n  %i"
        :if-new (file+head+olp ,~org-roam-daily-note-filename
                               ,~org-roam-daily-note-header
                               ("Tasks"))
        :empty-lines 0))

(setq capture-template-roam-meeting
      `("m" "meeting" entry
        "\n* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
        :if-new (file+head+olp ,~org-roam-daily-note-filename
                               ,~org-roam-daily-note-header
                               ("Meetings"))
        :empty-lines 1))

(setq org-roam-capture-templates `(,capture-template-roam-default
                                   ,capture-template-roam-journal
                                   ,~org-roam-capture-template-project
                                   ,capture-template-roam-dailies-task
                                   ,capture-template-roam-meeting))
#+end_src

** Keybindings

#+begin_src emacs-lisp :noweb-ref workflow-roam-keybinding
;;; Capture bindings
(~leader-bind
  "ct"  `(,(~workflow-capture-org "t") :which-key "task")
  "cM"  `(,(~workflow-capture-org "m") :which-key "mail")
  "cc"  `(,(~workflow-capture-org "c") :which-key "contact")
  "cd"  `(,(~workflow-capture-org "d") :which-key "drugs")
  "cD"  `(,(~workflow-capture-org "D") :which-key "dossier")
  "cp"  '(~org-roam-capture-project-task :which-key "project")
  "ci"  `(,(~workflow-capture-org-roam-daily-section "i") :which-key "idea")
  "cm"  `(,(~workflow-capture-org-roam-daily-section "m") :which-key "meeting")
  "cj"  `(,(~workflow-capture-org-roam-daily-section "j") :which-key "journal")
  "cP"  `(,(~workflow-capture-org-roam-daily-section "P") :which-key "Party"))

(~leader-bind
  "r"      '(:ignore t :which-key "roam")
  "rp"     '(~org-roam-jump-menu/body :which-key "project")
  "rc"     '(org-roam-dailies-capture-today :which-key "capture")
  "ri"     '(~org-roam-node-insert-immediate :which-key "insert")
  "rf"     '(org-roam-node-find :which-key "find")
  "rb"     '(org-roam-buffer-toggle :which-key "backlinks window")
  "rt"     '(org-roam-tag-add :which-key "add tag")
  "ra"     '(org-roam-alias-add :which-key "add alias")
  "rr"     '(org-roam-ref-add :which-key "add reference")
  "rd"     '(:ignore t :which-key "dailies")
  "rdy"    '(org-roam-dailies-goto-yesterday :which-key "yesterday")
  "rdt"    `(org-roam-dailies-goto-today :which-key "today")
  "rdT"    '(org-roam-dailies-goto-tomorrow :which-key "tomorrow")
  "rdc"    '(:ignore t :which-key "capture")
  "rdct"   '(org-roam-dailies-capture-today :which-key "today")
  "rdcT"   '(org-roam-dailies-capture-tomorrow :which-key "tomorrow")
  "rg"     '(org-roam-graph :which-key "show graph"))

;; Custom Hydra jump menu for Org-Roam
(defhydra ~org-roam-jump-menu (global-map "<f3>")
  "
  ^Dailies^        ^Capture^       ^Jump^
  ^^^^^^^^-------------------------------------------------
  _t_: today       _T_: today       _m_: current month
  _r_: tomorrow    _R_: tomorrow    _e_: current year
  _y_: yesterday   _Y_: yesterday   ^ ^
  _d_: date        ^ ^              ^ ^
  "
  ("t" org-roam-dailies-goto-today)
  ("r" org-roam-dailies-goto-tomorrow)
  ("y" org-roam-dailies-goto-yesterday)
  ("d" org-roam-dailies-goto-date)
  ("T" org-roam-dailies-capture-today)
  ("R" org-roam-dailies-capture-tomorrow)
  ("Y" org-roam-dailies-capture-yesterday)
  ("m" ~org-roam-goto-month)
  ("e" ~org-roam-goto-year)
  ("c" nil "cancel"))

;; Global
(global-set-key (kbd "C-c n p") #'~org-roam-find-project)
(global-set-key (kbd "C-c n t") #'~org-roam-capture-project-task)
#+end_src

** Custom Org-Roam functions

Note Recall stuff

#+begin_src emacs-lisp :noweb-ref workflow-roam-custom-functions
(defun ~org-roam-filter-by-tag (tag-name)
  "Narrow down the list of org-roam notes to those with a particular filter."
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun ~org-roam-list-notes-by-tag (tag-name)
  "List org-roam notes by tag."
  (mapcar #'org-roam-node-file
          (seq-filter
           (~org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun ~org-roam-find-project ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'~org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (~org-roam-filter-by-tag "project")
   :templates `(,~org-roam-capture-template-project)))

(defun ~org-roam-node-insert-immediate (arg &rest args)
  "Immediately insert the note node just like the old days."
  (interactive "P")
  (let ((args (push arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

(defun ~org-roam-capture-project-task ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'~org-roam-project-finalize-hook)
  ;; Capture the new task, creating the project file if necessary
  (org-roam-capture- :node (org-roam-node-read
                            nil
                            (~org-roam-filter-by-tag "project"))
                     :templates `(,~org-roam-capture-template-project)))

(defun ~org-roam-project-finalize-hook ()
  "Adds the captured project file to `org-agenda-files'.
This only functions if the capture was not aborted."
  ;; Remove the hook, since it was added temporarily.
  (remove-hook 'org-capture-after-finalize-hook #'~org-roam-project-finalize-hook)

  ;; Add project file to the agenda list if the capture was confirmed.
  (unless org-note-abort
    (with-current-buffer (org-capture-get :buffer)
      (add-to-list 'org-agenda-files (buffer-file-name)))))

(defun ~org-roam-goto-month ()
  "Call `org-roam-capture-' and go to the current month's note if it exists.
Otherwise, the note is created first using '~org-roam-capture-template-month'."
  (interactive)
  (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y-%B")) '(4))
                     :node (org-roam-node-create)
                     :templates `(,~org-roam-capture-template-month)))

(defun ~org-roam-goto-year ()
  "Call `org-roam-capture-' and go to the current year's note if it exists.
Otherwise, the note is created first using '~org-roam-capture-template-year'."
  (interactive)
  (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y")) '(4))
                     :node (org-roam-node-create)
                     :templates `(,~org-roam-capture-template-year)))
#+end_src

** Org-Roam minibuffer search customization

#+begin_src emacs-lisp :noweb-ref workflow-roam-search-customization
;; Check out the man page for `cl-defmethod', org-roam-node is a specializer for the argument 'node', so
;; the symbol needs to exist before the the macro is expanded. Effectively, these functions can only be
;; defined AFTER org-roam has finished loading.
(with-eval-after-load "org-roam"

  (cl-defmethod org-roam-node-functiontag ((node org-roam-node))
    "Return the function tag for a given `NODE'.
      These tags are intended to be unique and appear only once in each file.
      They represent the note's function."
    (let* ((specialtags ~org-roam-note-type-categories)
           (tags (seq-filter (lambda (tag)
                               (not (string= tag "ATTACH")))
                             (org-roam-node-tags node)))
           (functiontag (seq-intersection specialtags tags 'string=)))
      (concat
       (if functiontag
           (propertize "=has:functions=" 'display (all-the-icons-octicon "gear" :face 'all-the-icons-silver :v-adjust 0.02))
         (propertize "=not-functions=" 'display (all-the-icons-octicon "gear" :face 'org-roam-dim :v-adjust 0.02))) " " (string-join functiontag ", "))))


  (cl-defmethod org-roam-node-othertags ((node org-roam-node))
    "Return the non taxonomical of each `NODE'."
    (let* ((tags (seq-filter (lambda (tag) (not (string= tag "ATTACH"))) (org-roam-node-tags node)))
           (specialtags ~org-roam-note-type-categories)
           (othertags (seq-difference tags specialtags 'string=)))
      (concat (if othertags (propertize "=has:tags=" 'display (all-the-icons-faicon "tags" :face 'all-the-icons-dgreen)))
              " "
              (propertize (string-join othertags ", ") 'face 'all-the-icons-dgreen))))

  (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
    (let* ((count (caar (org-roam-db-query
                         [:select (funcall count source)
                                  :from links
                                  :where (= dest $s1)
                                  :and (= type "id")]
                         (org-roam-node-id node)))))
      (if (> count 0)
          (concat (propertize "=has:backlinks=" 'display (all-the-icons-material "link" :face 'all-the-icons-dblue)) (format "%d" count))
        (concat (propertize "=not-backlinks=" 'display (all-the-icons-material "link" :face 'org-roam-dim))  " "))))

  (cl-defmethod org-roam-node-hierarchy((node org-roam-node))
    "Return the TITLE of the `NODE', as well as its `HIERARCHY'."
    (let* ((title (org-roam-node-title node))
           (olp (mapcar (lambda (s) (if (> (length s) 10)
                                        (concat (substring s 0 10) "...") s))
                        (org-roam-node-olp node)))
           (level (org-roam-node-level node))
           (filetitle (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
           (shortentitle (if (> (length filetitle) 10)
                             (concat (substring filetitle 0 10) "...")
                           filetitle))
           (separator (concat " " (all-the-icons-material "chevron_right") " ")))
      (cond
       ((= level 1) (concat (propertize (format "=level:%d=" level) 'display (all-the-icons-material "list" :face 'all-the-icons-green)) " "
                            (propertize shortentitle 'face 'org-roam-dim) separator title))
       ((= level 2) (concat (propertize (format "=level:%d=" level) 'display (all-the-icons-material "list" :face 'all-the-icons-dpurple)) " "
                            (propertize (concat shortentitle separator (string-join olp separator)) 'face 'org-roam-dim) separator title))
       ((> level 2) (concat (propertize (format "=level:%d=" level) 'display (all-the-icons-material "list" :face 'all-the-icons-dsilver)) " "
                            (propertize (concat shortentitle separator (string-join olp separator)) 'face 'org-roam-dim) separator title))
       (t (concat (propertize
                   (format "=level:%d=" level)
                   'display
                   (all-the-icons-material "insert_drive_file" :face 'all-the-icons-yellow)) " " title))))))
#+end_src

* Custom Functions

#+begin_src emacs-lisp :noweb-ref workflow-custom-functions
(defun ~workflow-get-org-path (path)
  "Appends the given `path' to the value of the global `org-directory' variable."
  (expand-file-name path org-directory))

(defun ~workflow-copy-to-org-roam-daily-file ()
  "When a TODO item's state changes to 'DONE', move its entry into the day's org-roam daily file."
  (interactive)
  (let ((org-refile-keep nil) ;; Set this to nil to delete the original!
        (org-roam-dailies-capture-templates
         `(("t" "tasks" entry "%?"
            :if-new (file+head+olp "%<%Y>/%<%B>/daily-%<%Y-%m-%d>.org"
                                   ,~org-roam-daily-note-header
                                   ("Tasks"))
            ;; :empty-lines 1
            )))
        (org-after-refile-insert-hook #'save-buffer)
        today-file
        pos)
    (save-window-excursion
      (org-roam-dailies--capture (current-time) t)
      (setq today-file (buffer-file-name))
      (setq pos (point))) ; maybe just use point?

    (message "THE POSITION IS %s" pos)
    ;; Only refile if the target file is different than the current file
    (unless (equal (file-truename today-file)
                   (file-truename (buffer-file-name)))
      (org-refile nil nil (list "Tasks" today-file nil pos)))))

(defun ~workflow-open-loop-state-handler (state &optional assignee)
  "Manage state of todo items which aren't done."
  (interactive)

  (let ((org-refile-keep nil) ;; Set to nil once it all works, that will delete the original.
        (org-after-refile-insert-hook #'save-buffer)
        (state state)
        (assignee assignee)
        original-tags
        destination-file
        pos)
    (save-window-excursion
      ;; (org-capture nil "t"):
      (setq pos (point)))

    (setq destination-file
          (cdr
           (assoc
            org-state ~workflow-state-file-map)))

    (when (equal state "GAVE")
      (org-toggle-tag (gnus-strip-whitespace assignee) 'on)
      (org-set-property "CATEGORY" "Delegated"))

    (when (equal state "NEXT")
      (org-set-effort))

    ;; Only refile if different file
    (unless (equal (file-truename destination-file)
                   (file-truename (buffer-file-name)))
      (org-refile nil nil (list "Tasks" destination-file nil nil)))))

(defun ~workflow-get-primary-context-tag ()
  "Returns the chosen result of a call to a `completing-read' lookup of `~workflow-primary-contexts'."
  (let ((pcon (completing-read "Primary context:" ~workflow-primary-contexts)))
    pcon))

(defun ~workflow-get-primary-context-tag ()
  (completing-read "Primary context:" ~workflow-primary-contexts))

(defun ~workflow-get-work-peer-names-from-files ()
  (setq work-people-file-list (directory-files (~workflow-get-org-path (concat "Work/People/")) nil directory-files-no-dot-files-regexp))
  (setq work-list '())
  (dolist (element work-people-file-list)
    (let (name)
       (setq name-no-dash (replace-regexp-in-string "-" " " element))
       (setq name (replace-regexp-in-string ".org" "" name-no-dash))
       (add-to-list 'work-list name)))
   work-list)

(defun ~workflow-find-filepath-for-org-contact ()
  "Retrieve the file path for a person with completeing-read."
  (let (person-name)
    (setq choice (completing-read "choose: " (~workflow-get-work-peer-names-from-files) nil nil nil))
    ;; (print person-name)
    (~workflow-get-org-path (concat "/People/" (concat (replace-regexp-in-string " " "-" (capitalize choice)) ".org")))))



;;; Capture
(defun ~workflow-capture-org (key)
  "Capture template via KEY shortcuts from `org-capture'."
  (lambda () (interactive) (org-capture nil key)))

(defun ~workflow-capture-org-roam-daily-section (choice)
  "Capture template via CHOICE shortcuts from `org-roam-capture'."
  (let ((key choice))
    (lambda ()
      (interactive)
      (message "chose: %s" key)
      (let ((org-roam-directory (expand-file-name
                                 "Roam/Journal"
                                 "~/Notes/")))
        (org-roam-capture-
         :templates org-roam-capture-templates
         :keys choice
         :node (org-roam-node-create))))))

(defun ~workflow-org-contacts-template-tel (&optional return-value)
  return-value
  (concat "%^{Phone number (111-222-3333)}"))

(defun ~workflow-org-contacts-template-addr (&optional return-value)
  return-value
  (concat "%^{Address (18455 S Figueroa St, Gardena CA 90248)}"))
#+end_src

* Function Hooks

#+begin_src emacs-lisp :noweb-ref workflow-function-hooks
(add-to-list 'org-after-todo-state-change-hook
             (lambda ()
               (when (or (equal org-state "DONE")
                         (equal org-state "DEAD"))
                 (message "Moving completed or dead task to the daily file.")
                 (~workflow-copy-to-org-roam-daily-file))

               (when (or (equal org-state "BACK")
                         (equal org-state "NEXT")
                         ;; (equal org-state "GAVE")
                         (equal org-state "WAIT")
                         (equal org-state "TODO"))
                 ;; (if (equal org-state "TODO")
                 ;;     (org-set-effort))
                 (~workflow-open-loop-state-handler org-state "carwin"))

               (when (equal org-state "GAVE")
                 (let ((assignee (completing-read "Assigned to: " (~workflow-get-work-peer-names-from-files) nil nil nil)))
                   (~workflow-open-loop-state-handler org-state assignee)))))
#+end_src

* Workflow Org Capture Templates

#+begin_src emacs-lisp :noweb-ref workflow-org-capture-templates
(setq ~workflow-capture-template-task
     `("t" "Task" entry (file ,(expand-file-name "GTD/INBOX.org" org-directory))
     "* TODO %? :%(~workflow-get-primary-context-tag):\n %U\n %i"
     :empty-lines 1
     :unnarrowed t))

(setq ~workflow-capture-template-mail-task
    `("m" "Task [mail]" entry (file ,(expand-file-name "GTD/INBOX.org" org-directory))
         ,(concat "* TODO Read \"%a\" %? :email:\n"
                  "/Entered on/ %U")))

(setq ~workflow-capture-template-contact
    ;; `("c" "Contact" entry (file ,(expand-file-name "Contacts.org" org-directory))
    `("c" "Contact" entry (file ~workflow-find-filepath-for-org-contact)
         "#+title: %(org-contacts-template-name)\n#+filetags: :contact:
         :PROPERTIES:
         :EMAIL: %(org-contacts-template-email)
         :PHONE: %(~workflow-org-contacts-template-tel)
         :ADDRESS: %(~workflow-org-contacts-template-addr)
         :BIRTHDAY:
         :END:\n\n
         ,* Interactions"))

(setq ~workflow-capture-template-dossier-entry
      `("D" "Dossier" item (file+headline
                            ~workflow-find-filepath-for-org-contact
                            "Interactions")
        "- %U %?"
        :lines-before 0
        :lines-after 0
        :unnarrowed t
        :prepend t))



;; Apply them
(setq org-capture-templates  `(,~workflow-capture-template-task
                               ,~workflow-capture-template-mail-task
                               ,~workflow-capture-template-contact
                               ,~workflow-capture-template-dossier-entry
                               ,~workflow-capture-template-drug-log))
#+end_src

* Medication Logging

#+begin_src emacs-lisp :noweb-ref workflow-medication-log
;; (defcustom ~workflow-capture-template-drug-log nil
;;   "Capture template for a drug log entry"
;;   :tag "Drug Log Entry Template"
;;   :group '~workflow)

(defcustom ~workflow-capture-template-drug-log
      `("d" "Drug" entry (file ,(expand-file-name "Medicine.org" org-directory))
        ,(concat "* %U - %(~workflow-capture-drug-log-entry)\n"
                 ":PROPERTIES:\n"
                 ":AMOUNT: %(~workflow-capture-drug-log-entry-amount-mg)\n"
                 ":END:")
        :empty-lines 1
        :lines-before 0
        :lines-after 0
        :unnarrowed t
        :prepend t)
      "Capture template for a drug log entry"
      :tag "Drug Log Entry Template"
      :group '~workflow)

(defcustom ~workflow-drug-log-medications nil
  "A list of medications to provide as choices when logging drug usage."
  :tag "Medication List"
  :group '~workflow)

(defcustom ~workflow-drug-log-medication-amounts-mg nil
  "A list of common amounts to use for drug logging"
  :tag "Medication Amounts in Milligrams"
  :group '~workflow)

(setq ~workflow-drug-log-medications '("adderall"
                                       "melatonin"
                                       "multivitamin"
                                       "tylenol"
                                       "ibuprofin"
                                       "antibiotic"
                                       "test"))


(setq ~workflow-drug-log-medication-amounts-mg '("10mg"
                                                 "20mg"
                                                 "50mg"
                                                 "100mg"
                                                 "200mg"))

(defun ~workflow-capture-drug-log-entry (&optional return-value)
  "Start capturing drug ingestion."
  (interactive)
  (let ((medlist ~workflow-drug-log-medications))
    (setq choice (completing-read "choose: " ~workflow-drug-log-medications nil nil nil))
    (or (capitalize choice)
        return-value
        (concat "%U - " (capitalize choice)))))

(defun ~workflow-capture-drug-log-entry-amount-mg ()
  "Present the options to the user and output the value."
  (interactive)
  (let ((mglist ~workflow-drug-log-medication-amounts-mg))
    (setq choice (completing-read "amount: " mglist nil nil nil))
    (or choice
        return-value
        choice)))

#+end_src

* Agenda

#+begin_src emacs-lisp :noweb-ref workflow-agenda


;; Fix a problem with org that I don't understand
(defvar-local org-link--link-folding-spec '(org-link
                                            (:global t)
                                            (:ellipsis . nil)
                                            (:isearch-open . t)
                                            (:fragile . org-link--reveal-maybe))
  "Folding spec used to hide invisible parts of links.")

(defvar-local org-link--description-folding-spec '(org-link-description
                                                   (:global t)
                                                   (:ellipsis . nil)
                                                   (:visible . t)
                                                   (:isearch-open . nil)
                                                   (:fragile . org-link--reveal-maybe))
  "Folding spec used to reveal link description.")

;; Back to business


(setq org-tags-column 90)
(setq org-agenda-restore-windows-after-quit t)
(defun renewOrgBuffer ()
  (interactive)
  (dolist (buffer (buffer-list))
    (with-current-buffer buffer
      (when (derived-mode-p 'org-agenda-mode)
        (org-agenda-maybe-redo)))))
;; (run-with-idle-timer 3 1000 #'renewOrgBuffer)
(defun ~workflow-org-agenda-redo ()
  (interactive)
  (when (get-buffer "Org Agenda")
    (with-current-buffer "Org Agenda"
      (org-agenda-maybe-redo)
      (message "[org agenda] refreshed!"))))

(add-hook 'org-capture-after-finalize-hook #'renewOrgBuffer)
;; (add-hook 'org-after-refile-insert-hook #'~workflow-org-agenda-redo)
;; (add-hook 'org-after-refile-insert-hook #'renewOrgBuffer)

(setq org-agenda-window-setup 'current-window)
(setq org-agenda-span 'day)
(setq org-agenda-start-with-log-mode t)
(setq org-agenda-files (list "~/Notes/GTD/"
														 (concat "~/Notes/Roam/Journal/" (format-time-string "%Y") "/" (format-time-string "%B") "/") ; Only show items from this month.
														 "~/Notes/Calendar/Snyk.org"))

(setq org-agenda-custom-commands
			`(("d" "Dashboard"
				 ((agenda ""
									((org-deadline-warning-days 7)
									 (org-agenda-start-day nil)
									 (org-agenda-files org-agenda-files)))
					(tags-todo "+PRIORITY=\"A\""
										 ((org-agenda-overriding-header "High Priority")))
					(tags-todo "+followup|+TODO=\"GAVE\""
										 ((org-agenda-overriding-header "Needs follow up")
											(org-agenda-files org-agenda-files)))
					(tags-todo "-followup+TODO=\"NEXT\"-PRIORITY=\"A\""
										 ((org-agenda-overriding-header "Next actions")
											(org-agenda-files '(,(~workflow-get-org-path "GTD/NEXT.org")))))
					(todo "WAIT"
								((org-agenda-overriding-header "Waiting on someone else")))
					(tags-todo "+batch"
										 ((org-agenda-overriding-header "Batch tasks")))
					(todo "TODO"
								((org-agenda-overriding-header "Unprocessed Inbox tasks")
								 (org-agenda-files '(,(~workflow-get-org-path "GTD/INBOX.org")))
								 (org-tags-match-list-sublevels nil)
								 (org-agenda-prefix-format '((todo . " %1c ")))
								 (org-agenda-text-search-extra-files nil)))))

				("l"
				 tags-todo "+batch+TODO=\"NEXT\"+Effort<15+batch"
				 ((org-agenda-overriding-header "Low Effort Tasks")
					(org-agenda-max-todos 20)
					(~org-roam-refresh-agenda-list)
					(org-agenda-files org-agenda-files)))))

(defun ~workflow-call-agenda-dashboard ()
	"Calls the custom agenda dashboard provided by ~workflow."
	(interactive)
	`(lambda ()
		 (interactive)
		 ,(org-agenda nil "d")))

(~leader-bind
	"a" '(~workflow-call-agenda-dashboard :which-key "agenda-dashboard"))
#+end_src

* Workflow Tasks

#+begin_src emacs-lisp :noweb-ref workflow-tasks
(setq org-todo-keywords
      '((sequence "PROJ" "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "GAVE(g!)" "|" "WAIT(w)" "BACK(b)") ;; GAVE(g@/!)
        (sequence "|" "DEAD(D!)")))

;;
;;; State Tracking & Configuration
;;;;     PROJ - A long term thing that may or may not have active tasks, but should.
;;;;     NEXT - Processed and ready to go ASAP
;;;;     TODO - Unprocessed and not ready for action
;;;;     WAIT - Awaiting someone else or otherwise blocked
;;;;     BACK - Someday, Maybe...
;;;;     DEAD - Cancelled, dead in the water
;;;;     GAVE - Delegated to someone else, should be tagged with a name.

(setq org-log-done t)        ; Log when things get done
(setq org-log-into-drawer t) ; Log into a properties drawer

(setq ~workflow-state-file-map `(("PROJ" . ,(~workflow-get-org-path "GTD/PROJECTS.org"))
                                 ("TODO" . ,(~workflow-get-org-path "GTD/INBOX.org"))
                                 ("NEXT" . ,(~workflow-get-org-path "GTD/NEXT.org"))
                                 ("WAIT" . ,(~workflow-get-org-path "GTD/WAITING-FOR.org"))
                                 ("GAVE" . ,(~workflow-get-org-path "GTD/WAITING-FOR.org"))
                                 ("BACK" . ,(~workflow-get-org-path "GTD/SOMEDAY-MAYBE.org"))))

(setq org-todo-keyword-faces
      '(("PROJ" . (:foreground "RosyBrown3" :weight bold))         ; BRN (think about it occasionally)
        ("TODO" . (:foreground "DarkGoldenrod1" :weight bold))     ; YLW (get ready, ramp up)
        ("NEXT" . (:foreground "SpringGreen3" :weight bold))       ; GRN (goooooo go go)
        ("DONE" . (:foreground "DarkGray"))                        ; GRY (finished)
        ("WAIT" . (:foreground "red3" :weight bold))               ; RED (stopped or stuck)
        ("BACK" . (:foreground "HotPink1" :weight bold))           ; PNK (happy thoughts, not soon)
        ("GAVE" . (:foreground "light sea green" :weight bold))    ; BLU (relax, not my problem)
        ("DEAD" . (:foreground "Black" :weight bold))))            ; BLK (cancelled)

(setq org-tag-alist '((:startgroup "Primary contexts")
                      ("@work" . ?w)
                      ("@home" . ?h)
                      (:endgroup)
                      (:startgroup "Actions")
                      ("batch" . ?b)
                      ("followup" . ?f)
                      (:endgroup)
                      (:startgroup "Places")
                      ("@gym" . ?G)
                      ("@doc" . ?d)
                      ("@garage" . ?g)
                      ("@office" . ?o)
                      (:endgroup)))



;;;; Effort / Time Tracking
(setq org-global-properties
      '(("Effort_ALL" . "0:02 0:15 0:30 1:00 2:00 3:00 4:00")))
#+end_src

* Projects

#+begin_src emacs-lisp :noweb-ref workflow-projectile
(use-package projectile
  :config
  (setq projectile-cache-file (expand-file-name "projectile.cache" ~eusr-cache-directory)))
#+end_src
