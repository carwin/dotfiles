#+title: Org Mode Workflow
#+author: Carwin Young
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/elisp/cy-workflow.el :mkdirp yes

This file contains the description and configuration of the productivity workflow I plan on using with Org.

Lots of credit goes to @daviwil on github for his helpful Emacs From Scratch videos and his own dotfiles.

* Principles

1. Don't look at Org files to find the next task, use the agenda.
2. Ensure sufficient metadata on tasks for effective filtering.
3. Keep a daily log of work being done.

* File Paths

The location where my Notes folder lives. There's a function here in case I need to adjust my Notes directory based on machine.


#+begin_src emacs-lisp
(setq org-directory "~/OneDrive/Notes")

(setq org-agenda-files `(,org-directory))

(defun cy/org-path (path)
  (expand-file-name path org-directory))

(setq org-default-notes-file (cy/org-path "Inbox.org"))
#+end_src

* Workflow States

I try to keep my set of workflow states simple so that I can filter on them easily.

- =TODO= - A task that should be done at some point.
- =NEXT= - This task should be done next (in the Getting Things Done sense).
- =BACK= - A task in the backlog to be done some day but not now.
- =WAIT= - Waiting for someone else to be actionable again
- =DONE= - It's done!

  I also make sure to set them up in the order I want `org-sort-entries' to sort them in when I use the o option invoking that command.

  #+begin_src emacs-lisp
  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "|" "WAIT(w)" "BACK(b)")))

  ;; @todo: org-todo-keyword-faces
  (setq org-todo-keyword-faces
  '(("NEXT" . (:foreground "orange red" :weight bold))
    ("WAIT" . (:foreground "HotPink2" :weight bold))
    ("BACK" . (:foreground "MediumPurple3" :weight bold))))
  (setq org-global-properties
      '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))
  #+end_src

* Tags

Tags are used to filter all tasks to find anything actionable in a particular context. I use the @home and @work tags for explicit contexts and then the rest are used for filtering tasks for agenda views.

- =followup= - Someone is waiting on me to follow up on this task, it should be prioritized above others.
- =batch= - The task can be batched with others (low effort)

#+begin_src emacs-lisp
;; Configure common tags
(setq org-tag-alist
  '((:startgroup)
   ; Put mutually exclusive tags here
   ("@home" . ?H)
   ("@work" . ?W)
   (:endgroup)
   ("batch" . ?b)
   ("recurring" . ?r)
   ("followup" . ?f)))
#+end_src

* Agendas

#+begin_src emacs-lisp
(setq org-agenda-window-setup 'current-window)
(setq org-agenda-span 'day)
(setq org-agenda-start-with-log-mode t)

(setq org-agenda-custom-commands
      `(("d" "Dashboard"
         ((agenda "" ((org-deadline-warning-days 7)))
          (tags-todo "+PRIORITY=\"A\""
                      ((org-agenda-overriding-header "High Priority")))
          (tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
          (todo "NEXT"
                 ((org-agenda-overriding-header "Next Actions")))
          (todo "TODO"
                 ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                  (org-agenda-files '(,(cy/org-path "Inbox.org")))
                  (org-agenda-text-search-extra-files nil)))))
       ("n" "Next Tasks"
        ((agenda "" ((org-deadline-warning-days 7)))
         (todo "NEXT"
               ((org-agenda-overriding-header "Next Tasks")))))

        ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
        ((org-agenda-overriding-header "Low Effort Tasks")
         (org-agenda-max-todos 20)
         (org-agenda-files org-agenda-files)))))


#+end_src

* Capture Templates

#+begin_src emacs-lisp
(defun cy/on-org-capture ()
  ;; Don't show the confirmation header text
  (setq header-line-format nil)

  ;; Control how some buffers are handled
  (let ((template (org-capture-get :key t)))
    (pcase template
      ("jj" (delete-other-windows)))))

(add-hook 'org-capture-mode-hook 'cy/on-org-capture)

(setq org-capture-templates
  `(("t" "Tasks")
    ("tt" "Task" entry (file ,(cy/org-path "Inbox.org"))
         "* TODO %?\n %U\n %i" :empty-lines 1)
    ("ts" "Clocked Entry Subtask" entry (clock)
         "* TODO %?\n %U\n %i" :empty-lines 1)
    ("j" "Journal Entries")
    ("je" "General Entry" entry
         (file+olp+datetree ,(cy/org-path "Journal.org"))
         "\n* %<%I:%M %p> - %^{Title} \n\n%?\n\n"
         :tree-type week
         :clock-in :clock-resume
         :empty-lines 1)
    ("jt" "Task Entry" entry
         (file+olp+datetree ,(cy/org-path "Journal.org"))
         "\n* %<%I:%M %p> - Task Notes: \n%?\n\n"
         :tree-type week
         :clock-in :clock-resume
         :empty-lines 1)
    ("jj" "Task Entry" entry
         (file+olp+datetree ,(cy/org-path "Journal.org"))
         "\n* %<%I:%M %p> - Journal: :journal:\n\n%?\n\n"
         :tree-type week
         :clock-in :clock-resume
         :empty-lines 1)))

#+end_src

* Capture Templates

#+begin_src emacs-lisp :tangle no
;;(setq org-capture-templates
;;  `(("t" "Tasks / Projects")
;;    ("tt" "Task" entry (file+olp ,(cy/org-path "Inbox.org") "Projects" "Inbox")
;;         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
;;    ("ts" "Clocked Entry Subtask" entry (clock)
;;         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
;;    ("tp" "New Project" entry (file+olp ,(cy/org-path "Projects.org") "Projects" "Inbox")
;;         "* PLAN %?\n  %U\n  %a\n  %i" :empty-lines 1)
;;    ("j" "Journal Entries")
;;    ("jj" "Journal" entry
;;         (file+olp+datetree ,(cy/get-todays-journal-file-name))
;;         ;"\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
;;         ,(cy/read-file-as-string "~/Notes/Templates/Daily.org")
;;         :clock-in :clock-resume
;;         :empty-lines 1)
;;    ("jm" "Meeting" entry
;;         (file+olp+datetree ,(cy/get-todays-journal-file-name))
;;         "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
;;         :clock-in :clock-resume
;;         :empty-lines 1)
;;    ("jt" "Thinking" entry
;;         (file+olp+datetree ,(cy/get-todays-journal-file-name))
;;         "\n* %<%I:%M %p> - %^{Topic} :thoughts:\n\n%?\n\n"
;;         :clock-in :clock-resume
;;         :empty-lines 1)
;;    ("jc" "Clocked Entry Notes" entry
;;         (file+olp+datetree ,(cy/get-todays-journal-file-name))
;;         "* %<%I:%M %p> - %K :notes:\n\n%?"
;;         :empty-lines 1)
;;    ("jg" "Clocked General Task" entry
;;         (file+olp+datetree ,(cy/get-todays-journal-file-name))
;;         "* %<%I:%M %p> - %^{Task description} %^g\n\n%?"
;;         :clock-in :clock-resume
;;         :empty-lines 1)
;;
;;    ("w" "Workflows")
;;    ("we" "Checking Email" entry (file+olp+datetree ,(cy/get-todays-journal-file-name))
;;         "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)
;;
;;    ("m" "Metrics Capture")
;;    ("mw" "Weight" table-line (file+headline "~/Notes/Metrics.org" "Weight")
;;     "| %U | %^{Weight} | %^{Notes} |" :kill-buffer)
;;    ("mp" "Blood Pressure" table-line (file+headline "~/Notes/Metrics.org" "Blood Pressure")
;;     "| %U | %^{Systolic} | %^{Diastolic} | %^{Notes}" :kill-buffer)))
#+end_src

* Module Setup

This Org file produces a file called =cy-workflow.el= which gets loaded up in =init.el Export it as a feature so that it can be loaded with =require=.

#+begin_src emacs-lisp
(provide 'cy-workflow)
#+end_src
