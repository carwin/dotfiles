#+title: Org-Mode Workflow
#+author: Carwin Young
#+property: header-args:emacs-lisp :tangle (concat user-emacs-directory "cy-workflow.el") :mkdirp yes

This file contains the description and configuration of the
productivity workflow I plan on using with Org.

* Principles

1. Don't look at Org files to find the next task, use the agenda.
2. Ensure sufficient metadata on tasks for effective filtering.
3. Keep a daily log of work being done.

* File Paths

The location where my Notes folder lives. There's a function here in case I need to adjust my Notes directory based on machine.

#+begin_src emacs-lisp
(setq org-directory "~/Notes")

(setq org-agenda-files `(,org-directory))

(defun cy/org-path (path)
  (expand-file-name path org-directory))

(setq org-default-notes-file (cy/org-path "Inbox.org"))
#+end_src

* Workflow States

I try to keep my set of workflow states simple so that I can filter on them easily.

- =TODO= - A task that should be done at some point.
- =NEXT= - This task should be done next (in the Getting Things Done sense).
- =BACK= - A task in the backlog to be done some day but not now.
- =WAIT= - Waiting for someone else to be actionable again
- =DONE= - It's done!

  I also make sure to set them up in the order I want `org-sort-entries' to sort them in when I use the o option invoking that command.

#+begin_src emacs-lisp
(setq org-todo-keywords
  '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
    (sequence "|" "WAIT(w)" "BACK(b)")))

;; @todo: org-todo-keyword-faces
(setq org-todo-keyword-faces
'(("NEXT" . (:foreground "orange red" :weight bold))
  ("WAIT" . (:foreground "HotPink2" :weight bold))
  ("BACK" . (:foreground "MediumPurple3" :weight bold))))
(setq org-global-properties
    '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))
#+end_src

* Tags

Tags are used to filter all tasks to find anything actionable in a particular context. I use the @home and @work tags for explicit contexts and then the rest are used for filtering tasks for agenda views.

- =followup= - Someone is waiting on me to follow up on this task, it should be prioritized above others.
- =batch= - The task can be batched with others (low effort)

#+begin_src emacs-lisp
;; Configure common tags
(setq org-tag-alist
  '((:startgroup)
   ; Put mutually exclusive tags here
   ("@home" . ?h)
   ("@work" . ?w)
   (:endgroup)
   ("batch" . ?b)
   ("recurring" . ?r)
   ("followup" . ?f)))
#+end_src

* GTasks Integration

#+begin_src emacs-lisp
(use-package org-gtasks
  :after org
  :load-path "~/.emacs.d/org-gtasks"
  :config
  (org-gtasks-register-account :name "Carwin Young"
                               :directory "~/Notes/"
                               :client-id (password-store-get "org-gtasks/gtasks-client-id")
                               :client-secret (password-store-get "org-gtasks/gtasks-client-secret")))
#+end_src

* Agendas

#+begin_src emacs-lisp
(setq org-agenda-window-setup 'current-window)
(setq org-agenda-span 'day)
(setq org-agenda-start-with-log-mode t)
;; (setq org-agenda-tag-filter-preset '("-HABIT"))
(setq org-agenda-files (list (cy/org-path "Inbox.org")
                             (cy/org-path "Habits.org")
                             ;; (cy/org-path "Roam-v2/Journal/")
                             (cy/org-path "Calendar/")))

(setq org-agenda-custom-commands
      `(("d" "Dashboard"
         ((agenda ""
                ((org-deadline-warning-days 7)
                 (org-agenda-files org-agenda-files)))
          (tags-todo "+PRIORITY=\"A\""
                      ((org-agenda-overriding-header "High Priority")))
          (tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
          (todo "NEXT"
                 ((org-agenda-overriding-header "Next Actions")))
          (todo "TODO"
                 ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                  ;; (org-agenda-files (remove '(,(cy/org-path "Habits.org")) org-agenda-files))
                  ;; (setq org-agenda-files `(,org-directory))
                  ;; (org-agenda-files '(,(cy/org-path "Inbox.org") ,(cy/org-path "Roam-v2/Journal/")))
                  (org-agenda-files '(,(cy/org-path "Inbox.org")))
                  ;; (remove '(,(cy/org-path "Habits.org")) org-agenda-files)
                  (org-agenda-text-search-extra-files nil)))))
       ("h" "Habits"
        ((agenda ""))
        ((org-agenda-show-log t)
         (org-agenda-span 'week)
         (org-agenda-ndays 7)
         (org-agenda-log-mode-items '(state))
         (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":HABIT:"))))

       ("t" "Custom Timeline"
        ((todo "TODO"
               ((org-agenda-overriding-header "=== TODO tasks without a scheduled date=== ")
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                (org-agenda-prefix-format '((todo . " %1c "))))
         (agenda ""
                 ((org-agenda-overriding-header "=== Scheduled tasks ===")
                  (org-agenda-span 22)
                    (org-agenda-files org-agenda-files)
                  (org-agenda-prefix-format '((agenda . " %1c %?-12t% s"))))))))

       ("n" "Next Tasks"
        ((agenda "" ((org-deadline-warning-days 7)))
         (todo "NEXT"
               ((org-agenda-overriding-header "Next Tasks")))))

        ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
        ((org-agenda-overriding-header "Low Effort Tasks")
         (org-agenda-max-todos 20)
         (org-agenda-files org-agenda-files)))))
#+end_src

* Recent Files

=dashboard= is the first thing the user sees upon starting Emacs, it is currently configured to show the upcoming agenda as well as the most recent files the user has visited using =recentf-mode=. Because the dashboard needs to keep the agenda files open, that list of recent files gets filled with agenda files at all times, which isn't very useful.

This block tells =recentf-mode= to ignore the agenda files.

/Users/carwin/Notes/Calendar/Personal.org

/Users/carwin/Notes/Calendar/Work.org

#+begin_src emacs-lisp
(setq recentf-exclude `("/tmp/"
                        "/ssh:"
                        "/sudo:"
                        "recentf$"
                        ,(expand-file-name (concat (cy/system-settings-get 'user/notes) "Inbox.org"))
                        ,(expand-file-name (concat (cy/system-settings-get 'user/notes) "Calendar/.*org$"))
                        ,(expand-file-name (concat (cy/system-settings-get 'user/notes) "Habits.org"))))
#+end_src

* Habits

#+begin_src emacs-lisp
(setq org-habit-show-habits-only-for-today nil
      ;; org-habit-graph-column
      org-habit-preceding-days 4
      org-habit-following-days 4)
#+end_src

* Contacts

#+begin_src emacs-lisp
(use-package org-contacts
  :ensure nil
  :after org
  :custom (org-contacts-files '("~/Notes/Contacts.org")))
#+end_src

The =org-contacts= package doesn't ship with much in the way of templates, so I create a few below:

#+begin_src emacs-lisp
(defun cy/org-contacts-template-tel (&optional return-value)
  return-value
  (concat "%^{Phone number (111-222-3333)}"))
(defun cy/org-contacts-template-addr (&optional return-value)
  return-value
  (concat "%^{Address (18455 S Figueroa St, Gardena CA 90248)}"))
#+end_src

* Capture Templates

#+begin_src emacs-lisp
(defun cy/on-org-capture ()
  ;; Don't show the confirmation header text
  (setq header-line-format nil)

  ;; Control how some buffers are handled
  (let ((template (org-capture-get :key t)))
    (pcase template
      ("jj" (delete-other-windows)))))

(defun cy/get-work-peer-names-from-files ()
  (setq work-people-file-list (directory-files (cy/org-path (concat "Work/People/")) nil directory-files-no-dot-files-regexp))
  (setq work-list '())
  (dolist (element work-people-file-list)
    (let (name)
       (setq name-no-dash (replace-regexp-in-string "-" " " element))
       (setq name (replace-regexp-in-string ".org" "" name-no-dash))
       (add-to-list 'work-list name))
    )
   work-list
  )

(defun cy/org-work-person-log ()
  (let (person-name)
    (setq choice (completing-read "choose: " (cy/get-work-peer-names-from-files) nil nil nil))
    ;; (print person-name)
    (cy/org-path (concat "Work/People/" (concat (replace-regexp-in-string " " "-" (capitalize choice)) ".org")))))


(add-hook 'org-capture-mode-hook 'cy/on-org-capture)

(setq org-capture-templates
  `(
    ("t" "Task" entry (file ,(cy/org-path "Inbox.org"))
         "* TODO %?\n %U\n %i" :empty-lines 1)
    ("m" "Task [mail]" entry (file ,(cy/org-path "Inbox.org"))
         ,(concat "* TODO Process \"%a\" %?\n"
                  "/Entered on/ %U"))
    ("c" "Contacts" entry (file ,(cy/org-path "Contacts.org"))
         "* %(org-contacts-template-name)
         :PROPERTIES:
         :EMAIL: %(org-contacts-template-email)
         :PHONE: %(cy/org-contacts-template-tel)
         :ADDRESS: %(cy/org-contacts-template-addr)
         :BIRTHDAY:
         :END:")
    ("T" "Team Log" item (file+headline cy/org-work-person-log "Log")
         "- %U %?"
         :lines-before 0
         :lines-after 0
         :unnarrowed t
         :prepend t)))
#+end_src

* Module Setup

This Org file produces a file called =cy-workflow.el= which gets loaded up in =init.el= Export it as a feature so that it can be loaded with =require=.

#+begin_src emacs-lisp
(provide 'cy-workflow)
#+end_src
