#+title: System Specific Configuration

* Table of Contents
:PROPERTIES:
:TOC:       :include all :ignore this
:END:
:CONTENTS:
- [[#systems][Systems]]
  - [[#base-configuration][Base Configuration]]
  - [[#guts][guts]]
  - [[#buster][buster]]
  - [[#punchy][punchy]]
  - [[#cutman][cutman]]
- [[#updating][Updating]]
  - [[#update-script][Update script]]
  - [[#tangle-dotfiles][Tangle Dotfiles]]
- [[#functions-and-export][Functions and Export]]
:END:

* Systems


** Base Configuration

| =map= | Built-in |

This set of base configurations is inherited by all declared
systems. Each system overrides only the settings most relevant to it
by declaring them again in a separate map. The base configuration and
the declared overrides are mashed together on a per-system basis using
=map-merge=.

#+begin_src emacs-lisp :tangle (concat user-emacs-directory "cy-system-settings.el") :noweb yes
(require 'map) ;; needed for map-merge

<<system-functions>>

(setq cy/system-settings
      (map-merge
       'list
       `((desktop/dpi . 180)
         (dotfiles/dir . ,(shell-command-to-string "printf %s \"$DOTDIR\""))
         (dotfiles/out . ,(concat (shell-command-to-string "printf %s \"$DOTDIR\"") "/tangled"))
         (user/home . ,(concat "/home/" user-login-name))
         (config/dir . ,(shell-command-to-string "printf %s \"$XDG_CONFIG_HOME\""))
         (emacs/dashboard-agenda-face-size . 100)
         (emacs/default-face-size . 100)
         (emacs/variable-face-size . 2.45)
         (emacs/fixed-face-size . 1.5))
       <<system-settings>>))

<<export>>
#+end_src

Individual machines / systems are named with brevity and
distinguishability in mind. Some of them have been around nearly a
decade so I'm rather partial to them.

For systems that boot into multiple operating systems, the following
hostname pattern is used to denote which environment is being referred
to when referencing the system in configuration:

 - greatname :: =Linux= and =Android=
 - GREATNAME :: =Windows= and =WSL=
 - GreatName :: =OSX=

** guts

=guts= is a custom desktop machine with multiple hard drives which
boots into either =Windows 10= or =Arch Linux=. This system is used
primarily with a 49" Samsung CRG49 monitor with a 32:9 aspect
ratio. This monitor is typically the source of any need for per-system
tweaking on =guts=.

#+begin_src emacs-lisp :noweb-ref system-settings :noweb-sep
(when (equal system-name "guts")
  '((desktop/dpi . 109)
    (emacs/variable-face-size . 1.1)
    (emacs/fixed-face-size . 1.1)
    (emacs/default-face-size . 100)))

;; When booted into Windows
(when (equal system-name "GUTS")
  '((desktop/dpi . 109)
    (emacs/variable-face-size . 1.1)
    (emacs/fixed-face-size . 1.1)
    (emacs/default-face-size . 100)))

#+end_src

** buster

=buster= is a ThinkPad x201s that runs =Arch Linux=.

This is a side machine that more or less acts as a backup when other
machines are down for service or when I have a need to test out
equipment in the network closet via a cabled interface. It also acts
as the primary machine while travelling.

Most of the time it gets used for music and movie watching in the
background.

#+begin_src emacs-lisp :noweb-ref system-settings :noweb-sep
(when (equal system-name "buster")
  '((desktop/dpi . 90)
    (emacs/default-face-size . 110)
    (emacs/variable-face-size . 110)
    (emacs/fixed-face-size . 110)))
#+end_src

** punchy

=punchy= is a work-provided ThinkPad p43s that I use primarily for my
day job. It runs =Windows 10= and =Ubuntu 20.04= via =WSL2=. Emacs, on this
machine, is run via =WSL= and forwarded to an X session on Windows
provided by the X410 application.

The screen is wonderful, but there are some HiDPI quirks that make
using =i3= and =gtk= applications somewhat annoying.

#+begin_src emacs-lisp :noweb-ref system-settings :noweb-sep
(when (equal system-name "PUNCHY")
  '((desktop/dpi . 89)
    (emacs/variable-face-size . 1.1)
    (emacs/fixed-face-size . 1.1)
    (emacs/default-face-size . 100)))
#+end_src

** cutman

=cutman= is a Pixel 5. I've yet to get into figuring out how to use
Emacs with it, but I suspect Termux is a major part of it.

* Updating
** Update script

This shell script is used to update the dotfiles from outside of Emacs.

#+begin_src sh :tangle .bin/update-dotfiles :shebang #!/bin/sh :mkdirp yes
# Navigate to the directory of this script (generally ~/Projects/home/dotfiles/.bin)
cd $(dirname $(readlink -f $0))
cd ..

# The heavy lifting is done by an Emacs script
emacs -Q --script ~/.emacs.d/tangle-dotfiles.el

# Make sure any running Emacs instance gets updated settings
emacsclient -e '(load-file "~/.emacs.d/cy-system-settings.el")' -a "echo 'Emacs is not currently running'"
#+end_src

** Tangle Dotfiles

This special tidbit is responsible for tangling everything in this repository in the proper order.

#+begin_src emacs-lisp :tangle ~/.emacs.d/tangle-dotfiles.el
(require 'org)
(load-file "~/.emacs.d/cy-system-settings.el")

;; Don't ask when evaluating code blocks
(setq org-confirm-babel-evaluate nil)

(let* ((dotfiles-path (expand-file-name "~/Projects/home/dotfiles"))
       (org-files (directory-files dotfiles-path nil "\\.org$")))

  (defun cy/tangle-org-file (org-file)
    (message "\n\033[1;32mUpdating %s\033[0m\n" org-file)
    (org-babel-tangle-file (expand-file-name org-file dotfiles-path)))

  ;; Tangle Systems.org first
  (cy/tangle-org-file "Systems.org")

  (dolist (org-file org-files)
    (unless (member org-file '("README.org" "Systems.org"))
      (cy/tangle-org-file org-file))))
#+end_src

* =Functions and Export=

Define =cy/system-settings-get= to allow access to the system
variables defined in this file.

#+begin_src emacs-lisp :noweb-ref system-functions
(defun cy/system-settings-get (setting)
 (alist-get setting cy/system-settings))
#+end_src


Provide ='cy-system= so it can be required by sibling files that require
it.

#+begin_src emacs-lisp :noweb-ref export
(provide 'cy-system)
#+end_src
