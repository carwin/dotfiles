#+title: System Specific Configuration

* Table of Contents
:PROPERTIES:
:TOC:       :include all :ignore this
:END:
:CONTENTS:
- [[#systems][Systems]]
  - [[#base-configuration][Base Configuration]]
  - [[#guts][guts]]
  - [[#buster][buster]]
  - [[#blank][blank]]
  - [[#cutman][cutman]]
  - [[#archived-machine-configurations][Archived Machine Configurations]]
    - [[#punchy][punchy]]
- [[#updating][Updating]]
  - [[#update-script][Update script]]
  - [[#tangle-dotfiles][Tangle Dotfiles]]
- [[#functions-and-export][Functions and Export]]
:END:

* Systems


** Base Configuration

| =map= | Built-in |

This set of base configurations is inherited by all declared
systems. Each system overrides only the settings most relevant to it
by declaring them again in a separate map. The base configuration and
the declared overrides are mashed together on a per-system basis using
=map-merge=.

#+begin_src emacs-lisp :tangle (concat user-emacs-directory "cy-system-settings.el") :noweb yes
(require 'map) ;; needed for map-merge
(require 'org)
<<system-functions>>

(setq cy/system-settings
      (map-merge
       'list
       `((desktop/dpi . 180)
         (user/home . ,(envpath "HOME" ""))
         (user/config . ,(envpath "HOME" ".config/"))
         (user/fonts . ,(envpath "HOME" ".local/fonts/"))
         (user/notes . ,(envpath "HOME" "Notes/"))
         (user/dots . ,(envpath "HOME" ".dotfiles/"))
         (user/dots/output . ,(envpath "HOME" ".dotfiles/tangled/"))

         (emacs/dashboard-agenda-face-size . 100)
         (emacs/default-face-size . 100)
         (emacs/variable-face-size . 2.45)
         (emacs/fixed-face-size . 1.5)

         (rofi/launcher-width . 40)) ; % of screen width
       <<system-settings>>))

<<export>>

(org-babel-lob-ingest (concat <<dotfiles-location>> "/Systems.org"))
#+end_src

Individual machines / systems are named with brevity and
distinguishability in mind. Some of them have been around nearly a
decade so I'm rather partial to them.

For systems that boot into multiple operating systems, the following
hostname pattern is used to denote which environment is being referred
to when referencing the system in configuration:

 - greatname :: =Linux= and =Android=
 - GREATNAME :: =Windows= and =WSL=
 - GreatName :: =OSX=

Many of the tangled shell scripts and configuration files look for and
use the location of dotfiles project directory. The location of the
dotfiles directory can vary between systems (see [[file:Systems.org][Systems.org]]), and is
usually something we can get via ~cy/system-settings-get()~. But to keep
a singular canonical source of truth for this location in this
literate configuration, we'll provide a named code block that uses the
get custom settings function to output the path. This named block can
be referenced using Emacs' noweb syntax.

To use this across files in this repository, ~org-babel-lob-ingest~ is used
to read this file to make the value available.

In addition to the dotfiles directory, this process is repeated for a
handful of other commonly referenced variables that may need to appear
in either Emacs Lisp or Shell scripts.

The goal, again, is to keep one singular reference to each path across
the entire project.

@todo: A stretch goal for improvement of this section would be to
create a function which automatically generates/outputs these blocks
for every variable in ~system-settings~. We don't need them all, but when
we do, it's annoying and rather ugly.

 - dotfiles-location :: The location of these Org files.
#+name: dotfiles-location
#+begin_src emacs-lisp :exports none
(cy/system-settings-get 'user/dots)
#+end_src

 - user-config-location :: The location of user configuration, typically ~/home/<user>/.config~.
#+name: user-config-location
#+begin_src emacs-lisp :exports none
(cy/system-settings-get 'user/config)
#+end_src

 - dotfiles-output-location :: Files which are tangled out from these org files.
#+name: dotfiles-output-location
#+begin_src emacs-lisp :exports none
(cy/system-settings-get 'user/dots/output)
#+end_src

 - rofi-launcher-width :: The width of the Rofi launcher
#+name: rofi-launcher-width
#+begin_src emacs-lisp
(format "%S" (cy/system-settings-get 'rofi/launcher-width))
#+end_src
** guts

=guts= is a custom desktop machine with multiple hard drives which
boots into either =Windows 10= or =Arch Linux=. This system is used
primarily with a 49" Samsung CRG49 monitor with a 32:9 aspect
ratio. This monitor is typically the source of any need for per-system
tweaking on =guts=.

#+begin_src emacs-lisp :noweb-ref system-settings :noweb-sep
(when (equal system-name "guts")
  `((desktop/dpi . 100)
    (user/dots . ,(concat (concat "/home/" user-login-name) "/.dotfiles/"))
    (emacs/variable-face-size . 1.1)
    (emacs/fixed-face-size . 1.1)
    (emacs/default-face-size . 100)
    (rofi/launcher-width . 10)))

;; When booted into Windows
(when (equal system-name "GUTS")
  '((desktop/dpi . 109)
    (emacs/variable-face-size . 1.1)
    (emacs/fixed-face-size . 1.1)
    (emacs/default-face-size . 100)
    (rofi/launcher-width . 10)))
#+end_src

** buster

=buster= is a ThinkPad x201s that runs =Arch Linux=.

This is a side machine that more or less acts as a backup when other
machines are down for service or when I have a need to test out
equipment in the network closet via a cabled interface. It also acts
as the primary machine while travelling.

Most of the time it gets used for music and movie watching in the
background.

#+begin_src emacs-lisp :noweb-ref system-settings :noweb-sep
(when (equal system-name "buster")
  `((desktop/dpi . 90)
    (user/dots . ,(concat (concat "/home/" user-login-name) "/Projects/home/dotfiles/"))
    (emacs/default-face-size . 110)
    (emacs/variable-face-size . 110)
    (emacs/fixed-face-size . 110)))
#+end_src

** blank

=blank= is a work-provided 13" MacBook Pro (2020). It has a 2.3 GHz
Quad-Core Intel Core i7, 16GB of RAM and an Intel Iris 2560x1600
display.

Because this is a macOS machine, there're a lot of things that need to
be tweaked and trying to use Emacs in the way I always have on this
thing has pointed out a number of flaws in my setup.

#+begin_src emacs-lisp :noweb-ref system-settings
(when (equal system-name "blank.local")
  `((desktop/dpi . 90)
    (user/config . "/Users/carwin/.config/")
    (user/fonts . "/Users/carwin/Library/Fonts/")
    (user/dots . "/Users/carwin/Projects/dotfiles/")
    (user/dots/output . "/Users/carwin/Projects/dotfiles/tangled/")

    ;; (config/dir . ,(shell-command-to-string "source ~/.profile && printf %s \"$XDG_CONFIG_HOME\""))
    (emacs/default-face-size . 110)))
#+end_src

There are some Quirks that need to be handled outside of Emacs for
things to work:

 1. When Emacs is installed via Homebrew, macOS needs to grant Ruby
    (~/usr/bin/ruby~ or whichever is the default) full filesystem
    access. This is due to the fact that the Homebrew installation of
    Emacs is actually launched via a Ruby script.
 2. =vterm= requires that =libvterm= be installed via Homebrew. Additionally, when
    prompted to compile ~vterm-module~ the first time the process failed with no
    errors. Calling ~M-x vterm~ directly gave another prompt which pointed out
    that =cmake= was not installed. After installing it via Homebrew it worked.

** cutman

=cutman= is a Pixel 5. I've yet to get into figuring out how to use
Emacs with it, but I suspect Termux is a major part of it.

** Archived Machine Configurations

*** punchy

=punchy= was a work-provided ThinkPad p43s. It runs =Windows 10= and
=Ubuntu 20.04= via =WSL2=. Emacs, on this machine, was run mostly via =WSL=
and forwarded to an X session on Windows provided by the X410
application.

The screen was wonderful, but in Linux especially there were some
HiDPI quirks that make using =i3= and =gtk= applications somewhat
annoying.

#+begin_src emacs-lisp
(when (equal system-name "PUNCHY")
  '((desktop/dpi . 89)
    (emacs/variable-face-size . 1.1)
    (emacs/fixed-face-size . 1.1)
    (emacs/default-face-size . 100)))
#+end_src


* Updating
** Update script

This shell script is used to update the dotfiles from outside of Emacs.

#+begin_src sh :tangle .bin/update-dotfiles :shebang #!/bin/sh :mkdirp yes :noweb yes
# Navigate to the directory of this script (generally ~/Projects/home/dotfiles/.bin)
if [[ $(uname -s) == 'Darwin' ]]; then
  cd $(dirname $(greadlink -f $0))
else
  cd $(dirname $(readlink -f $0))
fi
cd ..

# The heavy lifting is done by an Emacs script
emacs -Q --script ~/.emacs.d/tangle-dotfiles.el

# Make sure any running Emacs instance gets updated settings
emacsclient -e '(load-file "~/.emacs.d/cy-system-settings.el")' -a "echo 'Emacs is not currently running'"
#+end_src

** Tangle Dotfiles

This special tidbit is responsible for tangling everything in this
repository in the proper order.

#+begin_src emacs-lisp :tangle (concat user-emacs-directory "tangle-dotfiles.el") :noweb yes :results silent
(require 'org)
(load-file "~/.emacs.d/cy-system-settings.el")
(print (concat <<dotfiles-location>> "Systems.org"))
;; Don't ask when evaluating code blocks
(setq org-confirm-babel-evaluate nil)

(let* ((dotfiles-path
        <<dotfiles-location>>)
       (org-files (directory-files dotfiles-path nil "\\.org$")))

  (defun cy/tangle-org-file (org-file)
    (message "\n\033[1;32mUpdating %s\033[0m\n" org-file)
    (org-babel-tangle-file (expand-file-name org-file dotfiles-path)))

  ;; Tangle Systems.org first
  (cy/tangle-org-file "Systems.org")

  (dolist (org-file org-files)
    (unless (member org-file '("README.org" "Systems.org"))
      (cy/tangle-org-file org-file))))
#+end_src

* =Functions and Export=

Define =cy/system-settings-get= to allow access to the system
variables defined in this file.

#+begin_src emacs-lisp :noweb-ref system-functions
(defun cy/system-settings-get (setting)
 (alist-get setting cy/system-settings))
#+end_src

In addition to needing a canonical source of truth for things like
home and config directories, it is also somewhat bothersome to
continually write out all the conditional elisp for tangling certain
files based on ~system-type~ or ~system-name~.

Convenience functions are provided below and exposed using the Library
of Babel.

#+begin_src emacs-lisp :noweb-ref system-functions
(defun tangle-linux (path file)
  "Return the concatenated path and file if the system is 'gnu/linux."
  (if (eq system-type 'gnu/linux)
      (concat path file)
    "no"))
#+end_src

#+begin_src emacs-lisp :noweb-ref system-functions
(defun tangle-macos (path file)
  "Return the concatenated path and file if the system is macOS."
  (if (eq system-type 'darwin)
      (concat path file)
    "no"))
#+end_src

This function exists to avoid repeating calls to expand environment
vars like =$HOME= and append paths to them with ~concat~.

#+begin_src emacs-lisp :noweb-ref system-functions
(defun envpath (envar path)
  "Perform the getenv function on `envar` and return its output with `path` appended"
  (concat (concat (getenv envar) "/") path))
#+end_src

Provide ='cy-system= so it can be required by sibling files that require
it.

#+begin_src emacs-lisp :noweb-ref export
(provide 'cy-system)
#+end_src
