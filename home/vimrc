" Plugin Management
" ------------------------------------------------------------------------------
" Check for a plugin manager, and if it doesn't exist, go get it.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'plasticboy/vim-markdown'
Plug 'pangloss/vim-javascript'
Plug 'cakebaker/scss-syntax.vim'
Plug 'evidens/vim-twig'

" call these on-demand
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }

call plug#end()

" NerdTree plugin configuration
" ------------------------------------------------------------------------------
" Close vim if the only window left open is NERDTree.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Markdown plugin configurations
" ------------------------------------------------------------------------------
" Disable folding
let g:vim_markdown_folding_disabled = 1

" Lightline plugin configuration
" ------------------------------------------------------------------------------
" Set lightline colorscheme
let g:lightline = {
  \ 'colorscheme': 'seoul256',
  \ }

" Key Mappings
" ------------------------------------------------------------------------------
:let mapleader = ","
" Do escape with kj
inoremap kj <c-c>`^
" Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>
" Fast save a buffer
nmap <leader>ww :w!<cr>
" Fast save and quit buffer
nmap <leader>wq :wq!<cr>
" Fast quit
nmap <leader>q :q!<cr>
" New tab
map <leader>tn :tabnew<cr> " Tab only map <leader>to :tabonly<cr>
" Tab move
map <leader>tm :tabmove<cr>
" Tab next
nnoremap <leader>. :tabnext<CR>
nnoremap <leader>' :tabprevious<CR>
" Toggle Paste mode (,p)
set pastetoggle=<leader>p
map <leader>p :set invpaste paste?<CR>
" Strip trailing whitespace (,ss)
nnoremap <leader>ss :call StripWhitespace()<CR>
" Toggle background transparency (C-T)
nnoremap <C-T> :call ToggleTransparent()<CR>
" Map <C-L> (redraw screen) to also turn off search highlighting until the next search.
nnoremap <C-L> :nohl<CR><C-L>

" General
" ------------------------------------------------------------------------------
set background=dark
colorscheme gruvbox
let g:colors_name='gruvbox'
set t_Co=256
syntax on
set autoindent " When opening a new line and no filetype-specific indenting is enabled, keep same indent.
set backspace=indent,eol,start " Allow backspacing over auto-indents, line breaks, and start of insert action
set colorcolumn=+1 " Highlight the column width border (+1 means highlight line 81 if textwidth is 80).
set confirm " Raise a dialog asking to save changed files.
set cursorline " Highlight the cursor line.
set encoding=utf-8 nobomb " Set encoding without BOM
set expandtab " Expand tabs into spaces.
set foldcolumn=4 " Indicate a fold with 4 columns.
set foldenable " Enable folds.
set foldlevel=2 " Fold / unfold this many.
set foldmethod=syntax " Set the fold method, see :help foldmethod.
set foldminlines=0 " Set a minimum value for closed folds.
set foldnestmax=3 " Set maximum nesting of folds for syntax method.
set history=1000 " Remember this many lines for the five history tables.
set hlsearch " Highlight searches (<C-L> to toggle).
set ignorecase " Use case insensitive search.
set incsearch " Highlight incrementally as search is typed.
set laststatus=2 " Always display the status line.
set magic " Enable extended regexes.
set mouse=a " Enable use of the mouse.
set noerrorbells " Don't make noises when doing bad things.
set nojoinspaces " Only insert single space after a '.', '?', and '!' with a join command.
set nostartofline " Don't reset cursor when moving around.
set notimeout ttimeout ttimeoutlen=200 " Quickly time out on keycodes, but never on mappings.
set nowrap " No visual wrapping.
set number " Display line numbers.
set scrolloff=3 " Keep this many lines above/below the cursor for context.
set shiftwidth=2 " Define columns to use for indenting (>> and <<).
set showcmd " Show partial commands in the last line of the screen.
set showmode " Show the current mode in the last line.
set showtabline=2 " Always display the tabline up top.
set smartcase " Use case sensitive search when using capitals.
set smartindent " Indent new lines intelligently.
set softtabstop=2 " Move the cursor two characters when typing Tab in insert mode.
set suffixes=.bak,.swp,.swo,.info,.aux,.log,.pdf,.bin,.dmg,.exe,.out,.inc,.pyd,.pyc,.dll " Ignore these extensions when completing filenames and encountering multiple matches.
set tabstop=2 " Define how many columns a Tab counts for.
set title " Set the window title to the filename.
set ttyfast " Improve redrawing.
set textwidth=80 " Set the max columns for text before breaking to a new line.
set undofile " Persistent undo.
set wildmenu " Better command-line completion.
set wrapscan " Searches wrap around end of file.

" Highlight redundant whitespace.
highlight RedundantSpaces ctermbg=red guibg=black
match RedundantSpaces /\s\+$\| \+\ze\t\|\t/

" Change the colorcolumn color.
highlight ColorColumn ctermbg=236

" Local directories
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
set undodir=~/.vim/undo

" Syntax
" ------------------------------------------------------------------------------
" HTML
let g:html_indent_tags = 'li\|p' " <li> and <p> tags are block elements

" ZSH
au BufRead,BufNewFile .zsh_rc,.functions,.commonrc set ft=zsh

" Sass
au BufRead,BufNewFile *.scss set filetype=scss.css
autocmd FileType scss set iskeyword+=-

" Make
autocmd FileType make setlocal noexpandtab

" Markdown
au BufRead,BufNewFile *.m*down setlocal filetype=markdown
au BufRead,BufNewFile *.md setlocal textwidth=80
au BufRead,BufNewFile *.md setlocal spell

" Drupal
au BufRead,BufNewFile *.module set filetype=php
au BufRead,BufNewFile *.install set filetype=php
au BufRead,BufNewFile *.test set filetype=php
au BufRead,BufNewFile *.inc set filetype=php
au BufRead,BufNewFile *.profile set filetype=php
au BufRead,BufNewFile *.view set filetype=php
au BufRead,BufNewFile *.theme set filetype=php

" PHP
autocmd FileType php set omnifunc=phpcomplete#CompletePHP

" Functions
" ------------------------------------------------------------------------------
" Strip trailing whitespace
function! StripWhitespace ()
  let save_cursor = getpos('.')
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

" Toggle Transparency
let t:is_transparent = 1
function! ToggleTransparent()
  if t:is_transparent == 0
    hi Normal guibg=NONE ctermbg=NONE
    let t:is_transparent = 1
  else
    hi Normal guibg=#000000 ctermbg=16
    let t:is_transparent = 0
  endif
endfunction
