#+title: Desktop Configuration

This is the primary desktop application configuration.

@todo
This block pulls in all the =:noweb-ref= references to =symlinks= and outputs them all into a =symlinks.sh= file. This block will normally be empty, if only this file is tangled out. The =:noweb-ref= references are stored in different files.

* System Settings
Load system-specific settings from =.emacs.d/per-system-settings.el= and unpack relevant values into blocks so that they can be used in configuration file blocks. These settings are configured in Systems.org.

#+begin_src emacs-lisp
(load-file "~/.emacs.d/per-system-settings.el")
#+end_src

#+begin_src emacs-lisp
(cy/system-settings-get (intern name))
#+end_src

* System

Once =Arch Linux= is installed, a few things need to happen.

I typically set up my Arch system based on https://github.com/smfsh/arch-install.

** Packages

Core packages should be installed via =pacman=. It is assumed that most of the actual _core_ packages like =btrfs-progs= and =linux-headers= have already been installed at this point.

#+begin_src sh
sudo pacman -S \
  emacs \
  tmux \
  vim \
  awesome-terminal-fonts \
  i3-gaps \
  htop \
  wget \
  networkmanager \
  go \
  git \
  nvidia \
  nfs-utils \
  docker \
#+end_src

To make =AUR= package management easier, first install =yay=.

#+begin_src  sh
cd ~;
git clone https://aur.archlinux.org/yay.git
cd yay;
makepkg -si;
cd ../;
rm -rf yay;
#+end_src

Now install AUR packages:

#+begin_src sh
yay -S \
  ack \
  aaxtomp3 \
  adobe-source-han-sans-jp-fonts \
  dunst \
  efibootmgr \
  feh \
  flac \
  gnupg \
  iotop \
  polybar \
  lando \
  libreswan \
  mailcap \
  mdadm \
  mlocate \
  mpd \
  mpv \
  multimarkdown \
  mu \
  ncmpcpp \
  network-manager-applet \
  networkmanager-l2tp \
  networkmanager-libreswan \
  nodejs \
  noto-fonts \
  npm \
  ntfs-3g \
  nvm \
  openssh \
  org-protocol-emacsclient \
  p7zip \
  pass \
  pavucontrol \
  pulseaudio \
  qgis \
  qutebrowser \
  ranger \
  remmina \
  rofi \
  rustup \
  scrot \
  sshfs \
  spotify \
  ttf-mplus \
  tree \
  unrar \
  unzip \
  xorg-server \
  xorg-xdpyinfo \
  xorg-xev \
  xorg-xmodmap \
  xorg-xrdb \
  xrandr \
  zip
#+end_src

* Environment

** Profile

I use a =.profile= file because it's easy to source for my primary shell (=zsh=), works with =bash=, and login managers read it. This covers the absolute basics of my configuration in a lot of instances.

#+begin_src conf :tangle ~/.profile :mkdirp
DIFFPROG='vim'
LANG=en_US.UTF-8
LC_ALL=en_US.UTF-8
LC_COLLATE=C
RANGER_LOAD_DEFAULT_RC=false
EDITOR="emacsclient --alternate-editor=vim -nw"
VISUAL="emacsclient --alternate-editor=vim"
ALTERNATE_EDITOR="emacs -Q"


# 256 Colors if we're using xterm.
[[ "$TERM" == "xterm" ]] && export TERM=xterm-256-color

# Ensure /usr/local/bin is in path.
export PATH="/usr/local/bin:$PATH"

# Ensure /home/<user>/.local/bin is in path, Python likes to use this.
export PATH="$HOME/.local/bin:$PATH"

# Add Ruby gems into path.
if which ruby >/dev/null && which gem >/dev/null; then
  export PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi

# Source Ruby Version Manager (rvm)
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
[[ -s "$HOME/.cache/yay/rvm/src/rvm/scripts/rvm" ]] && source "$HOME/.cache/yay/rvm/src/rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# Add Rust crates into path.
if which rustup >/dev/null; then
  PATH="$HOME/.cargo/bin:$PATH"
fi

# Add composer globals into path.
export PATH="$PATH:$HOME/.config/composer/vendor/bin"

# Add cuda stuff into path
export PATH="$PATH:/opt/cuda/bin"

# Source node version manager
[[ -s $HOME/.nvm/nvm.sh ]] && . $HOME/.nvm/nvm.sh
[[ -s /usr/share/nvm/init-nvm.sh ]] && . /usr/share/nvm/init-nvm.sh
# source /usr/share/nvm/init-nvm.sh

# LS_COLORS='no=00;37:fi=00:di=00;33:ln=04;36:pi=40;33:so=01;35:bd=40;33;01:'
LS_COLORS='no=00;37:fi=00:di=00;33:ln=04;36:pi=40;33:so=01;35:bd=40;33;01:'

# Add personal binaries into PATH.
# PATH="$HOME/.local/bin:$PATH"

# Input method stuff
GTK_IM_MODULE=ibus
XMODIFIERS=@im=ibus
QT_IM_MODULE=ibus

# XDG Basedir specification, these for some reason don't go into user-dirs.dirs
XDG_CONFIG_HOME="$HOME/.config"
XDG_DATA_HOME="$HOME/.local/share"
XDG_CACHE_HOME="$HOME/.cache"
ZDOTDIR="$HOME/.zsh"
#+end_src

(when (equal system-name "PUNCHY"))

#+begin_src sh :noweb-ref environment-post-tangle
# source ~/.profile

#+end_src

** XDG User Directories

XDG user directories define the paths for "well-known" directories.

These values can be queried while scripting using ~xdg-user-dir <var name>~ like so: ~xdg-user-dir DOWNLOAD~. That would output ~/home/<user>/Downloads~ using my configuration.

- =XDG_DESKTOP_DIR=: Desktop files. I don't actually use this but it seems like it's a basic necessity for certain things like =wine= applications.
- =XDG_DOWNLOAD_DIR=: The basic download directory for browsers and other applications.
- =XDG_TEMPLATES_DIR=: Another mostly unused value. The purpose of this directory is to house file templates so you can right click and add a specific type of file somewhere using a GUI file browser like =Thunar=.
- =XDG_PUBLICSHARE_DIR=: Pretty obvious. This is for files that should be public on the network. I don't think I've ever put something here.
- =XDG_DOCUMENTS_DIR=: User document storage. I typically symlink my OneDrive documents folder here.
- =XDG_MUSIC_DIR=: Where tunez come from.
- =XDG_PICTURES_DIR=: Photo storage. This one is another typical symlink to OneDrive.
- =XDG_VIDEOS_DIR=: Video storage.

#+begin_src conf :tangle ~/.config/user-dirs.dirs :mkdirp
XDG_DESKTOP_DIR="$HOME/"
XDG_DOWNLOAD_DIR="$HOME/Downloads"
XDG_TEMPLATES_DIR="$HOME/Templates"
XDG_PUBLICSHARE_DIR="$HOME/Public"
XDG_DOCUMENTS_DIR="$HOME/Documents"
XDG_MUSIC_DIR="$HOME/Audio/Music"
XDG_PICTURES_DIR="$HOME/Pictures"
XDG_VIDEOS_DIR="$HOME/Videos"
#+end_src

After this file is changed, user-dirs need to be updated via: ~xdg-user-dirs-update~.

#+begin_src sh :noweb-ref environment-post-tangle
xdg-user-dirs-update
#+end_src

** Shell

This is where shells are configured. I primarily use =zsh= but I've also used specific configs for =bash= and =fish= before.

**** ZSH

There's not much to say here. The primarily interesting thing here is the sourcing of =~/.profile= at the top.

#+begin_src conf :tangle ~/.zshrc :mkdirp yes
source ~/.profile
source ${ZDOTDIR:-$HOME}/prompt

setopt AUTO_CD # Don't make me use `cd`. You know what I wanted.
setopt NO_CASE_GLOB # Case insensitive globbing.

# Save history
HISTFILE=${ZDOTDIR:-$HOME}/.zhistory
setopt EXTENDED_HISTORY # timestamp history lines
SAVEHIST=5000
HISTSIZE=2000
setopt SHARE_HISTORY # share history across sessions
setopt APPEND_HISTORY # just keep adding to history
setopt INC_APPEND_HISTORY # write all the time, don't wait for shell to close
setopt HIST_IGNORE_DUPS # do not store duplicates
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_EXPIRE_DUPS_FIRST # expire duplicates first
setopt HIST_SAVE_NO_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS # ignore duplicates when searching
setopt HIST_REDUCE_BLANKS # remove blank lines from history
setopt HIST_VERIFY # be really sure when using !!

# Correction
setopt CORRECT
setopt CORRECT_ALL # Correct when using AUTO_CD

# Autocompletion
autoload -Uz compinit && compinit

# Fragment completion.
# zstyle ':completion:*' list-suffixes zstyle ':completion:*' expand prefix suffix

# Tab completion
# setopt MENU_COMPLETE
# zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}' # Autocomplete, case insensitive
# zstyle ':completion:*' menu select  # Highlight on tab

# Color dirs
export LS_COLORS # I don't know why this is necessary here, but colors don't work without it.
# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}


zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'


alias ls='ls --color=auto'
alias 7zultra='7z a -t7z -m0=lzma2 -mx=0 -mfb=64 -md=32m -ms=on'
alias curlheaders='curl -I'
alias curlheadersproxy='curl --socks5 localhost:11080 -I'
alias scrot='scrot -s ~/foo.png && xclip -selection clipboard -t image/png ~/foo.png && rm ~/foo.png'
alias webcam='mplayer tv:// -tv driver=v412:width=1920:height=1080:device=/dev/video0 -fps 15 -vf screenshot'
alias dots='cd ~/Projects/home/dotfiles'
alias work='cd ~/Projects/work'
alias notes='cd ~/Notes'
alias docs='cd ~/Documents'
alias em='emacsclient'
alias emc='emacsclient -c &'
#alias startwin='sudo virsh -c qemu:///system start win10'
#alias stopwin='sudo virsh -c qemu:///system shutdown win10'


export GPG_TTY=$(tty)

# System dependent variables:
if [[ "$(< /proc/sys/kernel/osrelease)" == *microsoft* ]]; then
    export $(dbus-launch)
    export LIBGL_ALWAYS_INDIRECT=1
    export WSL_VERSION=$(wsl.exe -l -v | grep -a '[*]' | sed 's/[^0-9]*//g')
    export WSL_HOST=$(tail -1 /etc/resolv.conf | cut -d' ' -f2)
    export DISPLAY=$(ipconfig.exe | grep IPv4 | head -1 | rev | awk '{print $1}' | rev | tr -d '\r'):0.0

    # Handle pinentry for gpg password prompting in various scenarios.
    # In Ubuntu-20.04 WSL2, I've essentially given up on getting pinentry
    # in Emacs directly, opting instead for the pinentry-gtk2 package.
    kill -0 $SSH_AGENT_PID &> /dev/null
    if [[ $? -eq 1 ]]; then
        eval $( gpg-agent \
            --daemon \
            --allow-emacs-pinentry \
            --allow-loopback-pinentry \
            --enable-ssh-support);
    fi

    # Start Docker daemon when logging in if not runnint
    RUNNING=`ps aux | grep dockerd | grep -v grep`
    if [ -z "$RUNNING" ]; then
        sudo dockerd > /dev/null 2>&1 &
        disown
    fi
fi
#+end_src

My custom prompt for =zsh=.

#+begin_src conf :tangle ~/.zsh/prompt :mkdirp yes
# Left prompt
export PS1="%F{223}%n%F{224}@%F{211}%m %F{179}%~%b%F{255} › "

# Right prompt
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
zstyle ':vcs_info:git:*' formats '%F{223}%b|%F{211}%r%f'
zstyle ':vcs_info:*' enable git

#+end_src

** Xorg

Until =Wayland= stops being terrible with the =nvidia= drivers, I'll continue using =X=.

*** Xresources

This file handles a variety of things, from shell colors to terminal emulator settings.

#+begin_src conf :tangle ~/.Xresources :mkdirp yes
!emacs*Background: DarkSlateGray
!emacs*Foreground: Wheat
!emacs*pointerColor: Orchid
!emacs*cursorColor: Orchid
!emacs*bitmapIcon: on
!emacs*font: fixed
!emacs.geometry: 80x25
Xcursor.size: 18

! ------------------------------------------------------------------------------
! Colour Configuration
! ------------------------------------------------------------------------------

! special
,*.foreground:   #d8dee8
!*.background:   #2f343f
,*.background: #080808
,*.cursorColor:  #b48ead

! black
,*.color0  : #4b5262
,*.color8  : #434a5a

! red
,*.color  : #bf616a
,*.color9  : #b3555e

! green
,*.color2  : #a3be8c
,*.color10 : #93ae7c

! yellow
,*.color3  : #ebcb8b
,*.color11 : #dbbb7b

! blue
,*.color4  : #81a1c1
,*.color12 : #7191b1

! magenta
,*.color5  : #b48ead
,*.color13 : #a6809f

! cyan
,*.color6  : #89d0bA
,*.color14 : #7dbba8

! white
,*.color7  : #e5e9f0
,*.color15 : #d1d5dc

! ------------------------------------------------------------------------------
! Font configuration
! ------------------------------------------------------------------------------

URxvt*font:    xft:M+ 1mn:regular:size=10
URxvt*boldFont:   xft:M+ 1mn:bold:size=10
URxvt*italicFont:  xft:M+ 1mn:italic:size=10
URxvt*boldItalicFont: xft:M+ 1mn:bold italic:size=10

! ------------------------------------------------------------------------------
! Xft Font Configuration
! ------------------------------------------------------------------------------

Xft.autohint: 0
Xft.lcdfilter: lcddefault
Xft.hintstyle: hintslight
Xft.hinting: 1
Xft.antialias: 1
Xft.rgba: rgb
Xft.dpi: 109

! ------------------------------------------------------------------------------
! URxvt configs
! ------------------------------------------------------------------------------

! font spacing
URxvt*letterSpace:  0
URxvt.lineSpace:  0

! general settings
URxvt*saveline:   15000
URxvt*termName:   rxvt-256color
URxvt*iso14755:   false
URxvt*urgentOnBell:  true
URxvt.inmputMethod: ibus
URxvt.preeditType: OverTheSpot

! appearance
URxvt*depth:   32
URxvt*scrollBar:  false
URxvt*scrollBar_right: false
URxvt*internalBorder: 24
URxvt*externalBorder: 0
URxvt.geometry:   84x22
URxvt*transparent: true
URxvt*shading: 25

! perl extensions
URxvt.perl-ext-common: default,clipboard,url-select,keyboard-select,selection-clipboard,matcher

! macros for clipboard and selection
URxvt.copyCommand:  xclip -i -selection clipboard
URxvt.pasteCommand:  xclip -o -selection clipboard
URxvt.keysym.M-c:  perl:clipboard:copy
URxvt.keysym.M-v:  perl:clipboard:paste
URxvt.keysym.M-C-v:  perl:clipboard:paste_escaped
URxvt.keysym.M-Escape: perl:keyboard-select:activate
URxvt.keysym.M-s:  perl:keyboard-select:search
URxvt.keysym.M-u:  perl:url-select:select_next
URxvt.url-launcher:  firefox
URxvt.underlineURLs: true
URxvt*matcher.button: 1
URxvt.urlButton: 1
URxvt.underlineColor: #bf616a

! scroll one line
URxvt.keysym.Shift-Up:  command:\033]720;1\007
URxvt.keysym.Shift-Down: command:\033]721;1\007

! control arrow
URxvt.keysym.Control-Up: \033[1;5A
URxvt.keysym.Control-Down: \033[1;5B
URxvt.keysym.Control-Right: \033[1;5C
URxvt.keysym.Control-Left: \033[1;5D

! Copy/Pasta
URxvt.keysym.Shift-Control-V: eval:paste_clipboard
URxvt.keysym.Shift-Control-C: eval:selection_to_clipboard

! ------------------------------------------------------------------------------
! Rofi configs
! ------------------------------------------------------------------------------

rofi.color-enabled: true
rofi.color-window: #2e3440, #2e3440, #2e3440
rofi.color-normal: #2e3440, #d8dee9, #2e3440, #2e3440, #bf616a
rofi.color-active: #2e3440, #b48ead, #2e3440, #2e3440, #93e5cc
rofi.color-urgent: #2e3440, #ebcb8b, #2e3440, #2e3440, #ebcb8b
rofi.modi: run,drun,window,ssh

! ------------------------------------------------------------------------------
! Dmenu configs
! ------------------------------------------------------------------------------

dmenu.selforeground: #d8dee9
dmenu.background:    #2e3440
dmenu.selbackground: #bf616a
dmenu.foreground:    #d8dee9
#+end_src

After changing this file, it is necessary to reload it via: ~xrdb ~/.Xresources~

*** xsettingsd

=xsettingsd= acts as a minimal settings daemon for =Xorg= applications. It replaces similar daemons from desktop environments like =GNOME= and =XFCE= and enables the usage of a simple configuration file:

#+begin_src conf :tangle ~/.config/xsettingsd/xsettingsd.conf :mkdirp yes :noweb yes
Xft/Antialias 1
Xft/Hinting 1
Xft/HintStyle "hintslight"
Xft/RGBA "rgb"
#+end_src

** Git

Writes out my global =git= configuration.

#+begin_src shell :tangle ~/.gitconfig :mkdirp yes
[core]
  editor = vim
[user]
  name = Carwin Young
  email = cy@carw.in
  signingkey = D6FA5A05B721CCDE
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  frag = cyan bold
  meta = yellow bold
  new = green bold
  old = red bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  log = true
[rebase]
  stat = true
[log]
  decorate = full
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com"]
  insteadOf = "gist:"
[url "git@heroku.com:"]
  insteadOf = "heroku:"
[alias]
  br = branch
  st = status
  co = checkout
  df = diff
  g  = grep -I
  rc = rank-contributors
  pr = pull --rebase
  lgp = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
  lg = log --show-signature
  cm = commit -S -m
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch -f --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f"
#+end_src

** Window Manager

*** i3

**** Primary i3wm Configuration
#+begin_src conf :tangle ~/.config/i3/config :mkdirp yes
# i3 config file (v4)

## -- Modifier Keys ------------------------------------------------------------#
set $mod Mod1
set $sup Mod4

## -- Fonts (Global) -----------------------------------------------------------#
# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:monospace 8

##-- Gaps ----------------------------------------------------------------------#

# Title bar text alignment
title_align center

# Uncomment this to enable title bars
#for_window [class=".*"] border normal 4

# Uncomment this to disable title bars
for_window [class=".*"] border pixel 4

# Gaps (Outer gaps are added to the inner gaps)
gaps inner 15
gaps outer 0

# Only enable gaps on a workspace when there is at least one container
#smart_gaps on

# Activate smart borders (always)
smart_borders on

##-- Colors --------------------------------------------------------------------#
# class                 border  backgr. text    indicator child_border
client.focused          #DA6E89 #DA6E89 #FFFFFF #98C379   #DA6E89
client.focused_inactive #61AFEF #61AFEF #1E222A #98C379   #61AFEF
client.unfocused        #2C3038 #2C3038 #FFFFFF #98C379   #2C3038
client.urgent           #C678DD #C678DD #FFFFFF #98C379   #C678DD
client.placeholder      #1E222A #1E222A #FFFFFF #98C379   #1E222A

client.background       #1E222A

##-- Autostart -----------------------------------------------------------------#
exec_always --no-startup-id ~/.config/i3/bin/autostart.sh

#-- Common app binds ----------------------------------------------------------#
# -- Rofi --
bindsym $mod+F1 exec ~/.config/rofi/bin/launcher
bindsym $mod+d exec ~/.config/rofi/bin/launcher
bindsym $sup+n exec ~/.config/rofi/bin/network-menu
bindsym $sup+x exec ~/.config/rofi/bin/power-menu
bindsym $mod+Control+m exec ~/.config/rofi/bin/mpd
bindsym $mod+Control+n exec ~/.config/rofi/bin/network
bindsym $mod+Control+s exec ~/.config/rofi/bin/screenshot
bindsym Print exec ~/.config/rofi/bin/screenshot
bindsym $mod+Control+r exec ~/.config/rofi/bin/asroot
bindsym $mod+Control+w exec ~/.config/rofi/bin/windows

# -- Use pactl to adjust volume in PulseAudio. --
set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

# -- MPD --
bindsym XF86AudioPlay exec "mpc toggle"
bindsym XF86AudioStop exec "mpc stop"
bindsym XF86AudioNext exec "mpc next"

# -- Lockscreen --
bindsym $alt+Control+l exec ~/.config/i3/bin/i3lock.sh
bindsym XF86ScreenSaver exec ~/.config/i3/bin/i3lock.sh

exec xautolock -time 10 -locker "~/.config/i3/bin/i3lock.sh"

#-- i3wm ----------------------------------------------------------------------#

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec i3-sensible-terminal

# kill focused window
bindsym $mod+Shift+q kill

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+apostrophe split h

# split in vertical orientation
bindsym $mod+minus split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent
# focus the child container
#bindsym $mod+d focus child

# Define names for default workspaces for which we configure key bindings later on.
set $prim "1: I"
set $ws2 "2: II"
set $ws3 "3: III"
set $ws4 "4: IV"
set $ws5 "5: V"
set $ws6 "6: VI"
set $ws7 "7: VII"
set $ws8 "8: VIII"
set $ws9 "9: IX"
set $ws10 "10: X"
set $comm "comm."
set $net "internet"
set $game "game"
set $mail "mail"

# Switch to workspace
bindsym $mod+1 workspace $prim
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10
bindsym $mod+c workspace $comm
bindsym $mod+n workspace $net
bindsym $mod+g workspace $game
bindsym $mod+m workspace $mail
# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $prim
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10
bindsym $mod+Shift+c move container to workspace $comm
bindsym $mod+Shift+n move container to workspace $net
bindsym $mod+Shift+g move container to workspace $game
bindsym $mod+Shift+m move container to workspace $mail
# reload the configuration file
bindsym $mod+Shift+Control+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"
# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}
bindsym $mod+r mode "resize"

#-- window rules, you can find the window class using xprop --
for_window [class=".*"] border pixel 1
for_window [window_role="pop-up"] floating enable
for_window [window_role="task_dialog"] floating enable
for_window [class="Pavucontrol|Xfce4-power-manager-settings|Nm-connection-editor"] floating enable
for_window [class=Gnome-screenshot] floating enable
for_window [class="feh|Viewnior|Gpicview|Gimp"] floating enable
for_window [class=feh|Pavucontrol|Screenshot] floating enable
for_window [class=zoom title="^Participants"] floating enable
for_window [class=zoom title="^Zoom Meeting"] floating enable
for_window [class=zoom title="^Zoom - Licensed Account"] floating enable

#-- workspace rules --
for_window [class=firefox] move --no-auto-back-and-forth container to workspace $net
for_window [class=Google-chrome window_role=browser] move container to workspace $net
for_window [class=Google-chrome window_role=pop-up] move container to workspace $comm
for_window [class=Signal] move container to workspace $comm
for_window [class=Slack] move container to workspace $comm
for_window [class=Emacs] move container to workspace $prim
#+end_src

**** i3 Scripts

***** Autostart with i3
#+begin_src shell :tangle ~/.config/i3/bin/autostart.sh :mkdirp yes :tangle-mode (identity #o755)
#!/usr/bin/env bash

## Autostart Programs

# Kill already running process
#_ps=(compton dunst ksuperkey mpd polybar xfce-polkit xfce4-power-manager)
_ps=(compton dunst polybar xfce-polkit)
for _prs in "${_ps[@]}"; do
	if [[ `pidof ${_prs}` ]]; then
		killall -9 ${_prs}
	fi
done

# polkit agent
/usr/lib/xfce-polkit/xfce-polkit &

# iBus for multilingual input
ibus-daemon -drxR &

# Lauch notification daemon
~/.config/i3/bin/launch-dunst.sh

# Lauch polybar
~/.config/i3/bin/launch-polybar.sh

# Lauch compositor
~/.config/i3/bin/launch-compton.sh

# Set the initial desktop wallpaper
~/.fehbg &

# Make sure the CAPS_LOCK key is set to L_Ctrl for those systems that aren't able to handle it at the keyboard level.
xmodmap ~/.Xmodmap &

# Adjust backlight (AMD)
#blight -d amdgpu_bl0 set 15%
#+end_src

***** i3lock

=i3lock= is triggered manually by way of keystroke from =i3= or an automatic inactivity timer provided by the =xautolock= package.

#+begin_src shell :tangle ~/.config/i3/bin/i3lock.sh :mkdirp yes :tangle-mode (identity #o755)
#!/usr/bin/env bash

## Get colors -----------------
FG="#c8ccd4"
BG="#1e222a"

BLACK="#1e222a"
RED="#e06c75"
GREEN="#98c379"
YELLOW="#e5c07b"
BLUE="#61afef"
MAGENTA="#c678dd"
CYAN="#56b6c2"
WHITE="#abb2bf"

TOTD=`fortune -n 90 -s | head -n 1`

## Exec	-----------------
i3lock \
--color="${BG}D9"			\
\
--insidever-color=${GREEN}	\
--insidewrong-color=${RED}	\
--inside-color="${BG}00"	\
\
--ringver-color=${GREEN}	\
--ringwrong-color=${RED}	\
--ring-color=${BLUE}		\
\
--line-color=${BG}			\
--separator-color=${BG}		\
\
--keyhl-color=${YELLOW}		\
--bshl-color=${RED}			\
\
--verif-color=${BG}			\
--wrong-color=${FG}			\
--layout-color=${FG}		\
\
--time-color=${FG}			\
--date-color=${FG}			\
\
--pass-media-keys			\
--pass-screen-keys			\
--pass-power-keys			\
--pass-volume-keys			\
--{time,date,layout,verif,wrong,greeter}-font="JetBrains Mono Medium"			\
--{layout,verif,wrong,greeter}-size=18							\
--time-size=34													\
--date-size=18													\
--greeter-text="${TOTD}"			\
--greeter-color=${CYAN}				\
--verif-text="verifying..."			\
--wrong-text="wrong!"				\
--noinput-text="Empty"				\
--lock-text="Locking..."			\
--lockfailed-text="Failed to lock"	\
--radius 120				\
--ring-width 8.0			\
--screen 1					\
--clock						\
--indicator					\
--time-str="%I:%M %p"		\
--date-str="%b %d, %G"		\
#--blur 5					\
#+end_src

***** i3's =Dunst= Launcher
#+begin_src conf :tangle ~/.config/i3/bin/launch-dunst.sh :mkdirp yes :tangle-mode (identity #o755)
#!/usr/bin/env bash

# Launch dunst daemon

if [[ `pidof dunst` ]]; then
	pkill dunst
fi

dunst \
-geom "280x50-15+53" -frame_width "2" -font "JetBrains Mono Medium 10" \
-lb "#1e222a" -lf "#c8ccd4" -lfr "#61afef" \
-nb "#1e222a" -nf "#c8ccd4" -nfr "#61afef" \
-cb "#1e222a" -cf "#e06c75" -cfr "#e06c75" &
#+end_src

***** i3's =Polybar= Launcher

#+begin_src shell :tangle ~/.config/i3/bin/launch-polybar.sh :mkdirp yes :tangle-mode (identity #o755)
#!/usr/bin/env bash

# Terminate already running bar instances
killall -q polybar

# Wait until the processes have been shut down
while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done

# Launch polybar
polybar main -c ~/.config/polybar/config.ini &
#+end_src

***** i3's Compositor Launcher

Launches picom / compton.

#+begin_src shell :tangle ~/.config/i3/bin/launch-compton.sh :mkdirp yes :tangle-mode (identity #o755)
#!/usr/bin/env bash

# Terminate if compton is already running
killall -q compton

# Wait until the processes have been shut down
while pgrep -u $UID -x compton >/dev/null; do sleep 1; done

# Launch compton
compton --config ~/.config/picom/picom.conf &
#+end_src

*** Polybar

Configure polybar's colors.

#+begin_src conf :tangle ~/.config/polybar/colors.ini
[color]
BG = #1e222a
BGL = #2c3038
FG = #c8ccd4
FGA = #808080

BLACK = #000000
WHITE = #FFFFFF
RED = #e06c75
GREEN = #98c379
YELLOW = #e5c07b
BLUE = #61afef
PURPLE = #c678dd
CYAN = #56b6c2
;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
#+end_src

Set up all the general configurations for Polybar.

#+begin_src conf :tangle ~/.config/polybar/config.ini :mkdirp yes
;; Global WM Settings

[global/wm]
; Adjust the _NET_WM_STRUT_PARTIAL top value
; Used for top aligned bars
margin-bottom = 0

; Adjust the _NET_WM_STRUT_PARTIAL bottom value
; Used for bottom aligned bars
margin-top = 0

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; File Inclusion
; include an external file, like module file, etc.

include-file = ~/.config/polybar/colors.ini
include-file = ~/.config/polybar/modules.ini
include-file = ~/.config/polybar/decor.ini

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; Bar Settings

[bar/main]
; Use either of the following command to list available outputs:
; If unspecified, the application will pick the first one it finds.
; $ polybar -m | cut -d ':' -f 1
; $ xrandr -q | grep " connected" | cut -d ' ' -f1
monitor =

; Use the specified monitor as a fallback if the main one is not found.
monitor-fallback =

; Require the monitor to be in connected state
; XRandR sometimes reports my monitor as being disconnected (when in use)
monitor-strict = false

; Tell the Window Manager not to configure the window.
; Use this to detach the bar if your WM is locking its size/position.
override-redirect = false

; Put the bar at the bottom of the screen
bottom = false

; Prefer fixed center position for the `modules-center` block
; When false, the center position will be based on the size of the other blocks.
fixed-center = true

; Dimension defined as pixel value (e.g. 35) or percentage (e.g. 50%),
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in a width or height of 50% minus 10 pixels
width = 100%
height = 26

; Offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in an offset in the x or y direction
; of 50% minus 10 pixels
offset-x = 0%
offset-y = 0%

; Background ARGB color (e.g. #f00, #ff992a, #ddff1023)
background = ${color.BG}

; Foreground ARGB color (e.g. #f00, #ff992a, #ddff1023)
foreground = ${color.FG}

; Background gradient (vertical steps)
;   background-[0-9]+ = #aarrggbb
;;background-0 =

; Value used for drawing rounded corners
; Note: This shouldn't be used together with border-size because the border
; doesn't get rounded
; Individual top/bottom values can be defined using:
;   radius-{top,bottom}
radius-top = 0.0
radius-bottom = 0.0

; Under-/overline pixel size and argb color
; Individual values can be defined using:
;   {overline,underline}-size
;   {overline,underline}-color
line-size = 2
line-color = ${color.BLUE}

; Values applied to all borders
; Individual side values can be defined using:
;   border-{left,top,right,bottom}-size
;   border-{left,top,right,bottom}-color
; The top and bottom borders are added to the bar height, so the effective
; window height is:
;   height + border-top-size + border-bottom-size
; Meanwhile the effective window width is defined entirely by the width key and
; the border is placed withing this area. So you effectively only have the
; following horizontal space on the bar:
;   width - border-right-size - border-left-size
border-size = 6
border-color = ${color.BG}

; Number of spaces to add at the beginning/end of the bar
; Individual side values can be defined using:
;   padding-{left,right}
padding = 0

; Number of spaces to add before/after each module
; Individual side values can be defined using:
;   module-margin-{left,right}
module-margin-left = 0
module-margin-right = 0

; Fonts are defined using <font-name>;<vertical-offset>
; Font names are specified using a fontconfig pattern.
;   font-0 = "Iosevka Nerd Font:size=10;3"
;   font-1 = MaterialIcons:size=10
;   font-2 = Termsynu:size=8;-1
;   font-3 = FontAwesome:size=10
; See the Fonts wiki page for more details

font-0 = "JetBrains Mono:bold:size=10;3"
font-1 = "Iosevka Nerd Font:size=12;3"
font-2 = "Iosevka Nerd Font:size=15;4"
font-3 = "Iosevka Nerd Font:bold:size=12;4"

; Modules are added to one of the available blocks
;   modules-left = cpu ram
;   modules-center = xwindow xbacklight
;   modules-right = ipc clock

# Default
modules-left = LD i3 RD dot LD mpd RD sep song dot filesystem
modules-center =
modules-right = cpu sep temperature dot memory dot volume dot battery dot wired-network dot wireless-network dot LD date RD dot sysmenu

# Alternate
;modules-left = openbox 2LD cpu 3LD memory 4LD filesystem 5LD
;modules-center = mpd
;modules-right = 2RD volume 3RD backlight 4RD battery 5RD network 6RD date sep

; The separator will be inserted between the output of each module
separator =

; This value is used to add extra spacing between elements
; @deprecated: This parameter will be removed in an upcoming version
spacing = 0

; Opacity value between 0.0 and 1.0 used on fade in/out
dim-value = 1.0

; Value to be used to set the WM_NAME atom
; If the value is empty or undefined, the atom value
; will be created from the following template: polybar-[BAR]_[MONITOR]
; NOTE: The placeholders are not available for custom values
wm-name =

; Locale used to localize various module data (e.g. date)
; Expects a valid libc locale, for example: sv_SE.UTF-8
locale =

; Position of the system tray window
; If empty or undefined, tray support will be disabled
; NOTE: A center aligned tray will cover center aligned modules
;
; Available positions:
;   left
;   center
;   right
;   none
tray-position = right

; If true, the bar will not shift its
; contents when the tray changes
tray-detached = false

; Tray icon max size
tray-maxsize = 16

; DEPRECATED! Since 3.3.0 the tray always uses pseudo-transparency
; Enable pseudo transparency
; Will automatically be enabled if a fully transparent
; background color is defined using `tray-background`
; tray-transparent = false

; Background color for the tray container
; ARGB color (e.g. #f00, #ff992a, #ddff1023)
; By default the tray container will use the bar
; background color.
tray-background = ${color.BG}

; Tray offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
tray-offset-x = 0
tray-offset-y = 0

; Pad the sides of each tray icon
tray-padding = 0

; Scale factor for tray clients
tray-scale = 1.0

; Restack the bar window and put it above the
; selected window manager's root
;
; Fixes the issue where the bar is being drawn
; on top of fullscreen window's
;
; Currently supported WM's:
;   bspwm
;   i3 (requires: `override-redirect = true`)
; wm-restack =

; Set a DPI values used when rendering text
; This only affects scalable fonts
; dpi =

; Enable support for inter-process messaging
; See the Messaging wiki page for more details.
enable-ipc = true

; Fallback click handlers that will be called if
; there's no matching module handler found.
click-left =
click-middle =
click-right =
scroll-up =
scroll-down =
double-click-left =
double-click-middle =
double-click-right =

; Requires polybar to be built with xcursor support (xcb-util-cursor)
; Possible values are:
; - default   : The default pointer as before, can also be an empty string (default)
; - pointer   : Typically in the form of a hand
; - ns-resize : Up and down arrows, can be used to indicate scrolling
cursor-click =
cursor-scroll =

;; WM Workspace Specific

; bspwm
;;scroll-up = bspwm-desknext
;;scroll-down = bspwm-deskprev
;;scroll-up = bspc desktop -f prev.local
;;scroll-down = bspc desktop -f next.local

;i3
;;scroll-up = i3wm-wsnext
;;scroll-down = i3wm-wsprev
;;scroll-up = i3-msg workspace next_on_output
;;scroll-down = i3-msg workspace prev_on_output

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; Application Settings

[settings]
; The throttle settings lets the eventloop swallow up til X events
; if they happen within Y millisecond after first event was received.
; This is done to prevent flood of update event.
;
; For example if 5 modules emit an update event at the same time, we really
; just care about the last one. But if we wait too long for events to swallow
; the bar would appear sluggish so we continue if timeout
; expires or limit is reached.
throttle-output = 5
throttle-output-for = 10

; Time in milliseconds that the input handler will wait between processing events
;throttle-input-for = 30

; Reload upon receiving XCB_RANDR_SCREEN_CHANGE_NOTIFY events
screenchange-reload = false

; Compositing operators
; @see: https://www.cairographics.org/manual/cairo-cairo-t.html#cairo-operator-t
compositing-background = source
compositing-foreground = over
compositing-overline = over
compositing-underline = over
compositing-border = over

; Define fallback values used by all module formats
;format-foreground =
;format-background =
;format-underline =
;format-overline =
;format-spacing =
;format-padding =
;format-margin =
;format-offset =

; Enables pseudo-transparency for the bar
; If set to true the bar can be transparent without a compositor.
pseudo-transparency = false
#+end_src

Decorate Polybar a little bit

#+begin_src conf :tangle ~/.config/polybar/decor.ini
[module/sep]
type = custom/text
content = -

content-background = ${color.BG}
content-foreground = ${color.BG}

[module/dot]
type = custom/text
content = 

content-background = ${color.BG}
content-foreground = ${color.BGL}
content-padding = 2

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/LD]
type = custom/text
content = "%{T3}%{T-}"
content-background = ${color.BG}
content-foreground = ${color.BGL}

[module/RD]
type = custom/text
content = "%{T3}%{T-}"
content-background = ${color.BG}
content-foreground = ${color.BGL}
#+end_src

Set up the available modules for Polybar

#+begin_src conf :tangle ~/.config/polybar/modules.ini
[module/backlight]
type = internal/backlight
#type = internal/xbacklight

; Use the following command to list available cards:
; $ ls -1 /sys/class/backlight/
card = amdgpu_bl0
#card = intel_backlight

; Available tags:
;   <label> (default)
;   <ramp>
;   <bar>
format = <ramp> <label>

; Available tokens:
;   %percentage% (default)
label = %percentage%%

; Only applies if <ramp> is used

ramp-0 = 
ramp-1 = 
ramp-2 = 
ramp-3 = 
ramp-4 = 
ramp-5 = 
ramp-6 = 
ramp-7 = 
ramp-8 = 
ramp-9 = 
ramp-font = 2
ramp-foreground = ${color.CYAN}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/battery]
type = internal/battery

; This is useful in case the battery never reports 100% charge
full-at = 99

; Use the following command to list batteries and adapters:
; $ ls -1 /sys/class/power_supply/
battery = BAT1
adapter = ACAD

; If an inotify event haven't been reported in this many
; seconds, manually poll for new values.
;
; Needed as a fallback for systems that don't report events
; on sysfs/procfs.
;
; Disable polling by setting the interval to 0.
;
; Default: 5
poll-interval = 2

; see "man date" for details on how to format the time string
; NOTE: if you want to use syntax tags here you need to use %%{...}
; Default: %H:%M:%S
time-format = %H:%M

; Available tags:
;   <label-charging> (default)
;   <bar-capacity>
;   <ramp-capacity>
;   <animation-charging>
format-charging = <animation-charging> <label-charging>
format-charging-prefix = " "
format-charging-prefix-font = 1
format-charging-prefix-foreground = ${color.RED}

; Available tags:
;   <label-discharging> (default)
;   <bar-capacity>
;   <ramp-capacity>
;   <animation-discharging>
format-discharging = <ramp-capacity> <label-discharging>

; Available tags:
;   <label-full> (default)
;   <bar-capacity>
;   <ramp-capacity>
;format-full = <ramp-capacity> <label-full>

; Available tokens:
;   %percentage% (default)
;   %time%
;   %consumption% (shows current charge rate in watts)

label-charging = %percentage%%

; Available tokens:
;   %percentage% (default)
;   %time%
;   %consumption% (shows current discharge rate in watts)
label-discharging = %percentage%%

; Available tokens:
;   %percentage% (default)
format-full = <label-full>
format-full-prefix = " "
format-full-prefix-font = 2
format-full-prefix-foreground = ${color.RED}
label-full = %percentage%%

; Only applies if <ramp-capacity> is used
ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 
ramp-capacity-foreground = ${color.YELLOW}
ramp-capacity-font = 2

; Only applies if <animation-charging> is used
animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-foreground = ${color.GREEN}
animation-charging-font = 2
animation-charging-framerate = 700

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/i3]
type = internal/i3

; Only show workspaces defined on the same output as the bar
;
; Useful if you want to show monitor specific workspaces
; on different bars
;
; Default: false
pin-workspaces = true

; This will split the workspace name on ':'
; Default: false
strip-wsnumbers = true

; Sort the workspaces by index instead of the default
; sorting that groups the workspaces by output
; Default: false
index-sort = true

; Create click handler used to focus workspace
; Default: true
enable-click = true

; Create scroll handlers used to cycle workspaces
; Default: true
enable-scroll = true

; Wrap around when reaching the first/last workspace
; Default: true
wrapping-scroll = false

; Set the scroll cycle direction
; Default: true
reverse-scroll = false

; Use fuzzy (partial) matching on labels when assigning
; icons to workspaces
; Example: code;♚ will apply the icon to all workspaces
; containing 'code' in the label
; Default: false
fuzzy-match = true

; ws-icon-[0-9]+ = label;icon
; NOTE: The label needs to match the name of the i3 workspace
ws-icon-0 = 1;
ws-icon-1 = 2;
ws-icon-2 = 3;
ws-icon-3 = 4;
ws-icon-4 = 5;
ws-icon-5 = 6;漣
ws-icon-6 = 7;
ws-icon-7 = 8;
ws-icon-8 = 9;
ws-icon-9 = 10;ﳴ
ws-icon-default = 
; NOTE: You cannot skip icons, e.g. to get a ws-icon-6
; you must also define a ws-icon-5.

; Available tags:
;   <label-state> (default) - gets replaced with <label-(focused|unfocused|visible|urgent)>
;   <label-mode> (default)
format = <label-state><label-mode>
format-background = ${color.BGL}

; Available tokens:
;   %mode%
; Default: %mode%
label-mode = %mode%
label-mode-padding = 1
label-mode-background = ${color.YELLOW}
label-mode-foreground = ${color.BGL}

; Available tokens:
;   %name%
;   %icon%
;   %index%
;   %output%
; Default: %icon%  %name%
label-focused = %icon%
label-focused-foreground = ${color.BGL}
label-focused-background = ${color.BLUE}

; Available tokens:
;   %name%
;   %icon%
;   %index%
;   %output%
; Default: %icon%  %name%
label-unfocused = %icon%
label-unfocused-foreground = ${color.FG}
label-unfocused-background = ${color.BGL}

; Available tokens:
;   %name%
;   %icon%
;   %index%
;   %output%
; Default: %icon%  %name%
label-visible = %icon%
label-visible-foreground = ${color.BGL}
label-visible-background = ${color.GREEN}

; Available tokens:
;   %name%
;   %icon%
;   %index%
;   %output%
; Default: %icon%  %name%
label-urgent = %icon%
label-urgent-foreground = ${color.BGL}
label-urgent-background = ${color.RED}

; Paddings
label-focused-padding = 1
label-unfocused-padding = 1
label-visible-padding = 1
label-urgent-padding = 1

; Separator in between workspaces
label-separator = |
label-separator-padding = 0
label-separator-foreground = ${color.BGL}
label-separator-background = ${color.BGL}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/cpu]
type = internal/cpu

; Seconds to sleep between updates
; Default: 1
interval = 0.5

; Available tags:
;   <label> (default)
;   <bar-load>
;   <ramp-load>
;   <ramp-coreload>
;;format = <label> <ramp-coreload>
format = <label>
format-prefix = 
format-prefix-font = 2
format-prefix-foreground = ${color.YELLOW}

; Available tokens:
;   %percentage% (default) - total cpu load averaged over all cores
;   %percentage-sum% - Cumulative load on all cores
;   %percentage-cores% - load percentage for each core
;   %percentage-core[1-9]% - load percentage for specific core
label = " %percentage%%"

; Spacing between individual per-core ramps
;;ramp-coreload-spacing = 1
;;ramp-coreload-0 = 
;;ramp-coreload-1 = 
;;ramp-coreload-2 = 
;;ramp-coreload-3 = 
;;ramp-coreload-4 = 

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/date]
type = internal/date

; Seconds to sleep between updates
interval = 1.0

; See "http://en.cppreference.com/w/cpp/io/manip/put_time" for details on how to format the date string
; NOTE: if you want to use syntax tags here you need to use %%{...}
;;date = %Y-%m-%d%

; Optional time format
time = %I:%M %p

; if `date-alt` or `time-alt` is defined, clicking
; the module will toggle between formats
;;date-alt = %A, %d %B %Y
#time-alt = %d/%m/%Y%
time-alt = %b %d, %G

; Available tags:
;   <label> (default)

format = <label>
format-prefix = " "
format-prefix-font = 2
format-prefix-foreground = ${color.CYAN}
format-background = ${color.BGL}

; Available tokens:
;   %date%
;   %time%
; Default: %date%
label = %time%
label-font = 4
label-foreground = ${color.CYAN}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/filesystem]
type = internal/fs

; Mountpoints to display
mount-0 = /
;;mount-1 = /home
;;mount-2 = /var

; Seconds to sleep between updates
; Default: 30
interval = 10

; Display fixed precision values
; Default: false
fixed-values = true

; Spacing between entries
; Default: 2
;;spacing = 4

; Available tags:
;   <label-mounted> (default)
;   <bar-free>
;   <bar-used>
;   <ramp-capacity>
format-mounted = <label-mounted>

format-mounted-prefix = 
format-mounted-prefix-font = 2
format-mounted-prefix-foreground = ${color.PURPLE}

; Available tags:
;   <label-unmounted> (default)
format-unmounted = <label-unmounted>

format-unmounted-prefix = 
format-unmounted-prefix-font = 2
format-unmounted-prefix-foreground = ${color.PURPLE}

; Available tokens:
;   %mountpoint%
;   %type%
;   %fsname%
;   %percentage_free%
;   %percentage_used%
;   %total%
;   %free%
;   %used%
; Default: %mountpoint% %percentage_free%%
label-mounted = " %free%"

; Available tokens:
;   %mountpoint%
; Default: %mountpoint% is not mounted
label-unmounted = " %mountpoint%: NM"

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/memory]
type = internal/memory

; Seconds to sleep between updates
; Default: 1
interval = 3

; Available tags:
;   <label> (default)
;   <bar-used>
;   <bar-free>
;   <ramp-used>
;   <ramp-free>
;   <bar-swap-used>
;   <bar-swap-free>
;   <ramp-swap-used>
;   <ramp-swap-free>
format = <label>

format-prefix = 
format-prefix-font = 2
format-prefix-foreground = ${color.CYAN}

; Available tokens:
;   %percentage_used% (default)
;   %percentage_free%
;   %gb_used%
;   %gb_free%
;   %gb_total%
;   %mb_used%
;   %mb_free%
;   %mb_total%
;   %percentage_swap_used%
;   %percentage_swap_free%
;   %mb_swap_total%
;   %mb_swap_free%
;   %mb_swap_used%
;   %gb_swap_total%
;   %gb_swap_free%
;   %gb_swap_used%

label = " %mb_used%"

; Only applies if <ramp-used> is used
;;ramp-used-0 = 
;;ramp-used-1 = 
;;ramp-used-2 = 
;;ramp-used-3 = 
;;ramp-used-4 = 

; Only applies if <ramp-free> is used
;;ramp-free-0 = 
;;ramp-free-1 = 
;;ramp-free-2 = 
;;ramp-free-3 = 
;;ramp-free-4 = 

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/mpd]
type = internal/mpd

; Host where mpd is running (either ip or domain name)
; Can also be the full path to a unix socket where mpd is running.
;;host = 127.0.0.1
;;port = 6600
;;password = mysecretpassword

; Seconds to sleep between progressbar/song timer sync
; Default: 1
interval = 2

; Available tags:
;   <label-song> (default)
;   <label-time>
;   <bar-progress>
;   <toggle> - gets replaced with <icon-(pause|play)>
;   <toggle-stop> - gets replaced with <icon-(stop|play)>
;   <icon-random>
;   <icon-repeat>
;   <icon-repeatone> (deprecated)
;   <icon-single> - Toggle playing only a single song. Replaces <icon-repeatone>
;   <icon-consume>
;   <icon-prev>
;   <icon-stop>
;   <icon-play>
;   <icon-pause>
;   <icon-next>
;   <icon-seekb>
;   <icon-seekf>

format-online = <icon-prev> <toggle> <icon-next>
;;format-online-prefix = " "
;;format-online-prefix-font = 2
;;format-online-prefix-foreground = ${color.GREEN}
format-online-background = ${color.BGL}

format-playing = ${self.format-online}
format-paused = ${self.format-online}
format-stopped = ${self.format-online}

; Available tags:
;   <label-offline>
format-offline = <label-offline>
format-offline-prefix = " "
format-offline-background = ${color.BGL}

; Available tokens:
;   %artist%
;   %album-artist%
;   %album%
;   %date%
;   %title%
; Default: %artist% - %title%
label-song =  "%artist% - %title%"
label-song-maxlen = 25
label-song-ellipsis = true

; Available tokens:
;   %elapsed%
;   %total%
; Default: %elapsed% / %total%
;;abel-time = %elapsed% / %total%

; Available tokens:
;   None
label-offline = "Offline"

; Only applies if <icon-X> is used
icon-play = 
icon-play-font = 2
icon-play-foreground = ${color.GREEN}
icon-pause = 
icon-pause-font = 2
icon-pause-foreground = ${color.RED}
icon-stop = 
icon-stop-foreground = ${color.RED}
icon-prev = 玲
icon-prev-font = 1
icon-prev-foreground = ${color.CYAN}
icon-next = 怜
icon-next-font = 1
icon-next-foreground = ${color.CYAN}

; Used to display the state of random/repeat/repeatone/single
; Only applies if <icon-[random|repeat|repeatone|single]> is used
;;toggle-on-foreground = #ff
;;toggle-off-foreground = #55

;;-----------

[module/song]
type = internal/mpd

interval = 2

format-online = <label-song>

format-playing = ${self.format-online}
format-paused = ${self.format-online}
format-stopped = ${self.format-online}

label-song =  "%artist% - %title%"
label-song-maxlen = 25
label-song-ellipsis = true

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

; If you use both a wired and a wireless network, just add 2 module definitions. For example
[module/wired-network]
type = internal/network
interface = eno1

[module/wireless-network]
type = internal/network
interface = wlp6s0

; Normal Module
[module/network]
type = internal/network
interface = eth0

; Seconds to sleep between updates
; Default: 1
interval = 1.0

; Test connectivity every Nth update
; A value of 0 disables the feature
; NOTE: Experimental (needs more testing)
; Default: 0
;ping-interval = 3

; @deprecated: Define min width using token specifiers (%downspeed:min% and %upspeed:min%)
; Minimum output width of upload/download rate
; Default: 3
;;udspeed-minwidth = 5

; Accumulate values from all interfaces
; when querying for up/downspeed rate
; Default: false
accumulate-stats = true

; Consider an `UNKNOWN` interface state as up.
; Some devices have an unknown state, even when they're running
; Default: false
unknown-as-up = true

; Available tags:
;   <label-connected> (default)
;   <ramp-signal>
format-connected = <ramp-signal> <label-connected>

; Available tags:
;   <label-disconnected> (default)

format-disconnected = <label-disconnected>
format-disconnected-prefix = "睊 "
format-disconnected-prefix-font = 2
format-disconnected-foreground = ${color.FGA}

; Available tags:
;   <label-connected> (default)
;   <label-packetloss>
;   <animation-packetloss>
;;format-packetloss = <animation-packetloss> <label-connected>

; Available tokens:
;   %ifname%    [wireless+wired]
;   %local_ip%  [wireless+wired]
;   %local_ip6% [wireless+wired]
;   %essid%     [wireless]
;   %signal%    [wireless]
;   %upspeed%   [wireless+wired]
;   %downspeed% [wireless+wired]
;   %linkspeed% [wired]
; Default: %ifname% %local_ip%
;label-connected = "%essid%  %downspeed%"
label-connected = "%{A1:~/.config/rofi/bin/network_menu &:}%essid% | %downspeed%%{A}"

; Available tokens:
;   %ifname%    [wireless+wired]
; Default: (none)
label-disconnected = "%{A1:~/.config/rofi/bin/network_menu &:}Offline%{A}"

; Available tokens:
;   %ifname%    [wireless+wired]
;   %local_ip%  [wireless+wired]
;   %local_ip6% [wireless+wired]
;   %essid%     [wireless]
;   %signal%    [wireless]
;   %upspeed%   [wireless+wired]
;   %downspeed% [wireless+wired]
;   %linkspeed% [wired]
; Default: (none)
;label-packetloss = %essid%
;label-packetloss-foreground = #eefafafa

; Only applies if <ramp-signal> is used
ramp-signal-0 = 
ramp-signal-1 = 
ramp-signal-2 = 
ramp-signal-3 = 
ramp-signal-4 = 
ramp-signal-foreground = ${color.PURPLE}
ramp-signal-font = 2

; Only applies if <animation-packetloss> is used
;;animation-packetloss-0 = ⚠
;;animation-packetloss-0-foreground = #ffa64c
;;animation-packetloss-1 = ⚠
;;animation-packetloss-1-foreground = #000000
; Framerate in milliseconds
;;animation-packetloss-framerate = 500

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/volume]
type = internal/pulseaudio

; Sink to be used, if it exists (find using `pacmd list-sinks`, name field)
; If not, uses default sink
sink = alsa_output.pci-0000_12_00.3.analog-stereo

; Use PA_VOLUME_UI_MAX (~153%) if true, or PA_VOLUME_NORM (100%) if false
; Default: true
use-ui-max = false

; Interval for volume increase/decrease (in percent points)
; Default: 5
interval = 5

; Available tags:
;   <label-volume> (default)
;   <ramp-volume>
;   <bar-volume>
format-volume = <ramp-volume> <bar-volume>

; Available tags:
;   <label-muted> (default)
;   <ramp-volume>
;   <bar-volume>
format-muted = <label-muted>
format-muted-prefix = 
format-muted-prefix-font = 2

; Available tokens:
;   %percentage% (default)
;label-volume = %percentage%%

; Available tokens:
;   %percentage% (default)
label-muted = " Mute"
label-muted-foreground = ${color.FGA}

; Only applies if <bar-volume> is used
bar-volume-width = 10
bar-volume-gradient = false

bar-volume-indicator = 雷
bar-volume-indicator-font = 2
bar-volume-indicator-foreground = ${color.BLUE}

bar-volume-fill = 絛
bar-volume-fill-font = 3
bar-volume-foreground-0 = ${color.BLUE}
bar-volume-foreground-1 = ${color.BLUE}
bar-volume-foreground-2 = ${color.BLUE}
bar-volume-foreground-3 = ${color.BLUE}
bar-volume-foreground-4 = ${color.BLUE}

bar-volume-empty = 絛
bar-volume-empty-font = 3
bar-volume-empty-foreground = ${color.BGL}

; Only applies if <ramp-volume> is used
ramp-volume-0 = 
ramp-volume-1 = 
ramp-volume-2 = 
ramp-volume-3 = 
ramp-volume-4 = 
ramp-volume-5 = 
ramp-volume-6 = 
ramp-volume-7 = 
ramp-volume-8 = 
ramp-volume-9 = 
ramp-volume-font = 2
ramp-volume-foreground = ${color.BLUE}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/temperature]
type = internal/temperature

; Seconds to sleep between updates
; Default: 1
interval = 0.5

; Thermal zone to use
; To list all the zone types, run
; $ for i in /sys/class/thermal/thermal_zone*; do echo "$i: $(<$i/type)"; done
; Default: 0
thermal-zone = 0

; Full path of temperature sysfs path
; Use `sensors` to find preferred temperature source, then run
; $ for i in /sys/class/hwmon/hwmon*/temp*_input; do echo "$(<$(dirname $i)/name): $(cat ${i%_*}_label 2>/dev/null || echo $(basename ${i%_*})) $(readlink -f $i)"; done
; to find path to desired file
; Default reverts to thermal zone setting
;;hwmon-path = /sys/devices/platform/coretemp.0/hwmon/hwmon2/temp1_input

; Threshold temperature to display warning label (in degrees celsius)
; Default: 80
warn-temperature = 60

; Whether or not to show units next to the temperature tokens (°C, °F)
; Default: true
onits = true

; Available tags:
;   <label> (default)
;   <ramp>
format = <ramp> <label>

; Available tags:
;   <label-warn> (default)
;   <ramp>
format-warn = <ramp> <label-warn>

; Available tokens:
;   %temperature% (deprecated)
;   %temperature-c%   (default, temperature in °C)
;   %temperature-f%   (temperature in °F)
label = %temperature-c%

; Available tokens:
;   %temperature% (deprecated)
;   %temperature-c%   (default, temperature in °C)
;   %temperature-f%   (temperature in °F)
label-warn = "%temperature-c%"
label-warn-foreground = ${color.RED}

; Requires the <ramp> tag
; The icon selection will range from 0 to `warn-temperature`
; with the current temperature as index.
ramp-0 = 
ramp-1 = 
ramp-2 = 
ramp-3 = 
ramp-4 = 
ramp-5 = 
ramp-6 = 
ramp-7 = 
ramp-8 = 
ramp-9 = 
ramp-font = 2
ramp-foreground = ${color.YELLOW}
;;ramp-foreground = #55

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/menu]
type = custom/text

content = " "
content-font = 3
content-foreground = ${color.GREEN}
content-padding = 0

click-left = ~/.config/rofi/bin/launcher
;;click-middle = path_to_script
;;click-right = path_to_script

;;scroll-up = path_to_script
;;scroll-down = path_to_script

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/sysmenu]
type = custom/text

content = " "
content-font = 3
content-foreground = ${color.RED}
content-padding = 0

click-left = ~/.config/rofi/bin/power-menu
#+end_src

#+begin_src sh :noweb yes :mkdirp yes :tangle ~/Projects/home/dotfiles/tangled/environment-post-tangle.sh :shebang "#!/bin/bash" :tangle-mode (identity #o755)
<<xorg-post-tangle>>
<<i3-post-tangle>>
#+end_src

* Applications


| Arch package | Description                                               |
|--------------+-----------------------------------------------------------|
| xfce-polkit  | Polkit agent                                              |
| i3lock-color | A fork of i3lock with more color options                  |
| fortune-mod  | Provides fun sayings for lockscreens and such             |
| picom-git    | The latest version of Compton, which was renamed to Picom |
| lxdm         | Display manager, occasionally swapped with the ~ly~ package |

** Dunst

=Dunst= serves as the notification system. It's configuration is minimal
and is mostly concerned with color, placement, and format.

#+begin_src conf :tangle ~/.config/dunst/dunstrc :mkdirp yes
[global]
monitor = 0
follow = mouse
geometry = "250x50-24+24"
indicate_hidden = yes
shrink = no
separator_height = 0
padding = 16
horizontal_padding = 24
frame_width = 2
sort = no
idle_threshold = 120
font = M+ 1p 8
line_height = 4
markup = full
format = "<b>%s</b>\n%b"
alignment = left
show_age_threshold = 60
word_wrap = yes
ignore_newline = no
stack_duplicates = false
hide_duplicate_count = yes
show_indicators = no
icon_position = off
sticky_history = yes
history_length = 20
browser = /usr/bin/firefox -new-tab
always_run_script = true
title = Dunst
class = Dunst

[shortcuts]
close = ctrl+space
close_all = ctrl+shift+space
history = ctrl+grave
context = ctrl+shift+period

[urgency_low]
background = "#2f343f"
foreground = "#d8dee8"
timeout = 2

[urgency_normal]
background = "#2f343f"
foreground = "#d8dee8"
timeout = 4

[urgency_critical]
background = "#2f343f"
foreground = "#d8dee8"
frame_color = "#bf616a"
timeout = 0
#+end_src

** Rofi

=Rofi= is the primary launcher application used on these systems. It is
similar to =dmenu= in Linux or =Alfred= on OSX systems.

*** Bins

The scripts in this section all provide some measure of functionality
to different customized implementations of a =Rofi= call. Each of the
following bin scripts have a corresponding ~.rasi~ theme file.

**** Asroot

This Asroot script is used to launch applications as the root user.
@TODO: Confirm the binding, I don't often use this.

#+begin_src shell :tangle ~/.config/rofi/bin/asroot :mkdirp yes :tangle-mode (identity #o755)
#!/bin/bash

DIR="$HOME/.config/rofi/bin"

rofi_command="rofi -theme $DIR/../themes/asroot.rasi"

# Apps
terminal=" urxvt"
files=" Thunar"
editor=" Geany"
clifm=" Ranger"
lpad=" Leafpad"
vim=" Vim"

# Variable passed to rofi
options="$terminal\n$files\n$editor\n$clifm\n$lpad\n$vim"

# Functions

chosen="$(echo -e "$options" | $rofi_command -p "Run as root(#)" -dmenu -selected-row 0)"
case $chosen in
    $terminal)
        ${DIR}/bin/apps_as_root.sh 'urxvt'
        ;;
    $files)
        ${DIR}/bin/apps_as_root.sh 'dbus-run-session thunar'
        ;;
    $editor)
        ${DIR}/bin/apps_as_root.sh geany
        ;;
    $clifm)
        ${DIR}/bin/apps_as_root.sh 'urxvt -e ranger'
        ;;
    $lpad)
        ${DIR}/bin/apps_as_root.sh leafpad
        ;;
    $vim)
        ${DIR}/bin/apps_as_root.sh 'urxvt -e vim'
        ;;
esac
#+end_src


**** Confirm

A simple confirmation dialog for =Rofi= scripts.

#+begin_src shell :tangle ~/.config/rofi/bin/confirm :mkdirp yes :tangle-mode (identity #o755)
#!/usr/bin/env bash
rofi -dmenu\
     -i\
     -no-fixed-num-lines\
     -p "Are You Sure? : "\
     -theme ~/.config/rofi/themes/confirm.rasi
#+end_src

**** Launcher

This =Rofi= script is the primary launcher for applications. It uses
=i3wm='s default launcher binding of ~<Mod>~-~d~.

#+begin_src shell :tangle ~/.config/rofi/bin/launcher :mkdirp yes :tangle-mode (identity #o755)
#!/bin/sh

DIR="$HOME/.config/"

rofi -no-lazy-grab -show drun -theme $DIR/rofi/themes/launcher.rasi
#+end_src

**** MPD Control via Rofi

This =Rofi= script launches a window that allows management of =MPD=. The
script is bound in the =i3wm= configuration to ~<Ctrl>~-~<Mod>~-~m~.

#+begin_src shell :tangle ~/.config/rofi/bin/mpd :mkdirp yes :tangle-mode (identity #o755)
#!/bin/bash

DIR="$HOME/.config/rofi"

rofi_command="rofi -theme $DIR/themes/mpd.rasi"

# Gets the current status of mpd (for us to parse it later on)
status="$(mpc status)"
# Defines the Play / Pause option content
if [[ $status == *"[playing]"* ]]; then
    play_pause=""
else
    play_pause=""
fi
active=""
urgent=""

# Display if repeat mode is on / off
tog_repeat=""
if [[ $status == *"repeat: on"* ]]; then
    active="-a 4"
elif [[ $status == *"repeat: off"* ]]; then
    urgent="-u 4"
else
    tog_repeat=" Parsing error"
fi

# Display if random mode is on / off
tog_random=""
if [[ $status == *"random: on"* ]]; then
    [ -n "$active" ] && active+=",5" || active="-a 5"
elif [[ $status == *"random: off"* ]]; then
    [ -n "$urgent" ] && urgent+=",5" || urgent="-u 5"
else
    tog_random=" Parsing error"
fi
stop=""
next=""
previous=""
music=""

# Variable passed to rofi
options="$previous\n$play_pause\n$stop\n$next\n$tog_repeat\n$tog_random"

# Get the current playing song
current=$(mpc current)
# If mpd isn't running it will return an empty string, we don't want to display that
if [[ -z "$current" ]]; then
    current="-"
fi

# Spawn the mpd menu with the "Play / Pause" entry selected by default
chosen="$(echo -e "$options" | $rofi_command -p "$current" -dmenu $active $urgent -selected-row 1)"
case $chosen in
    $previous)
        mpc -q prev && kunst --size 60x60 --silent
        ;;
    $play_pause)
        mpc -q toggle && kunst --size 60x60 --silent
        ;;
    $stop)
        mpc -q stop
        ;;
    $next)
        mpc -q next && kunst --size 60x60 --silent
        ;;
    $tog_repeat)
        mpc -q repeat
        ;;
    $tog_random)
        mpc -q random
        ;;
esac
#+end_src


**** Network

This =Rofi= Network menu provides a simple overview of the current
network connection(s) and the ability to turn wifi off. It is bound to
~<Ctrl>~-~<Mod>~-~n~.

#+begin_src shell :tangle ~/.config/rofi/bin/network :mkdirp yes :tangle-mode (identity #o755)
#!/bin/bash

DIR="$HOME/.config/rofi"

rofi_command="rofi -theme $DIR/themes/network.rasi"

## Get info
IFACE="$(nmcli | grep -i interface | awk '/interface/ {print $2}')"
#SSID="$(iwgetid -r)"
#LIP="$(nmcli | grep -i server | awk '/server/ {print $2}')"
#PIP="$(dig +short myip.opendns.com @resolver1.opendns.com )"
STATUS="$(nmcli radio wifi)"

active=""
urgent=""

if (ping -c 1 archlinux.org || ping -c 1 google.com || ping -c 1 bitbucket.org || ping -c 1 github.com || ping -c 1 sourceforge.net) &>/dev/null; then
	if [[ $STATUS == *"enable"* ]]; then
        if [[ $IFACE == e* ]]; then
            connected=""
        else
            connected=""
        fi
	active="-a 0"
	SSID="$(iwgetid -r)"
	PIP="$(wget --timeout=30 http://ipinfo.io/ip -qO -)"
	fi
else
    urgent="-u 0"
    SSID="Disconnected"
    PIP="NA"
    connected=""
fi

## Icons
bmon=""
launch_cli=""
launch=""

options="$connected\n$bmon\n$launch_cli\n$launch"

## Main
chosen="$(echo -e "$options" | $rofi_command -p "$SSID : $PIP" -dmenu $active $urgent -selected-row 1)"
case $chosen in
    $connected)
		if [[ $STATUS == *"enable"* ]]; then
			nmcli radio wifi off
		else
			nmcli radio wifi on
		fi
        ;;
    $bmon)
        urxvt -e bmon
        ;;
    $launch_cli)
        urxvt -e nmtui
        ;;
    $launch)
        nm-connection-editor
        ;;
esac
#+end_src

**** Network Menu

#+begin_src shell :tangle ~/.config/rofi/bin/network-menu :mkdirp yes :tangle-mode (identity #o755)
#!/usr/bin/env python3
# encoding:utf8
"""NetworkManager command line dmenu script.
To add new connections or enable/disable networking requires policykit
permissions setup per:
https://wiki.archlinux.org/index.php/NetworkManager#Set_up_PolicyKit_permissions
OR running the script as root
Add dmenu formatting options and default terminal if desired to
$HOME/.config/i3/rofi/themes/networkmenu_config.ini
"""
import pathlib
import struct
import configparser
import itertools
import locale
import os
from os.path import expanduser
import shlex
import sys
import uuid
from subprocess import Popen, PIPE

import gi
gi.require_version('NM', '1.0')
from gi.repository import GLib, NM  # pylint: disable=wrong-import-position

ENV = os.environ.copy()
ENV['LC_ALL'] = 'C'
ENC = locale.getpreferredencoding()

CLIENT = NM.Client.new(None)
LOOP = GLib.MainLoop()
CONNS = CLIENT.get_connections()

CONF = configparser.ConfigParser()
CONF.read(expanduser("~/.config/rofi/themes/networkmenu_config.ini"))

def dmenu_cmd(num_lines, prompt="Networks", active_lines=None):  # pylint: disable=too-many-branches
    """Parse nmd.ini if it exists and add options to the dmenu command
    Args: args - num_lines: number of lines to display
                 prompt: prompt to show
    Returns: command invocation (as a list of strings) for
                dmenu -l <num_lines> -p <prompt> -i ...
    """
    dmenu_command = "dmenu"
    if not CONF.sections():
        res = [dmenu_command, "-i", "-l", str(num_lines), "-p", str(prompt)]
        res.extend(sys.argv[1:])
        return res
    if CONF.has_section('dmenu'):
        args = CONF.items('dmenu')
        args_dict = dict(args)
        dmenu_args = []
        if "dmenu_command" in args_dict:
            command = shlex.split(args_dict["dmenu_command"])
            dmenu_command = command[0]
            dmenu_args = command[1:]
            del args_dict["dmenu_command"]
        if "p" in args_dict and prompt == "Networks":
            prompt = args_dict["p"]
            del args_dict["p"]
        elif "p" in args_dict:
            del args_dict["p"]
        if "rofi" in dmenu_command:
            lines = "-i -dmenu -lines"
            # rofi doesn't support 0 length line, it requires at least -lines=1
            # see https://github.com/DaveDavenport/rofi/issues/252
            num_lines = num_lines or 1
        else:
            lines = "-i -l"
        if "l" in args_dict:
            # rofi doesn't support 0 length line, it requires at least -lines=1
            # see https://github.com/DaveDavenport/rofi/issues/252
            if "rofi" in dmenu_command:
                args_dict['l'] = min(num_lines, int(args_dict['l'])) or 1
            lines = "{} {}".format(lines, args_dict['l'])
            del args_dict['l']
        else:
            lines = "{} {}".format(lines, num_lines)
        if "pinentry" in args_dict:
            del args_dict["pinentry"]
        if "compact" in args_dict:
            del args_dict["compact"]
        if "wifi_chars" in args_dict:
            del args_dict["wifi_chars"]
        rofi_highlight = CONF.getboolean('dmenu', 'rofi_highlight', fallback=False)
        if CONF.has_option('dmenu', 'rofi_highlight'):
            del args_dict["rofi_highlight"]
        if rofi_highlight is True and "rofi" in dmenu_command:
            if active_lines:
                dmenu_args.extend(["-a", ",".join([str(num)
                                                   for num in active_lines])])
    if prompt == "Passphrase":
        if CONF.has_section('dmenu_passphrase'):
            args = CONF.items('dmenu_passphrase')
            args_dict.update(args)
        rofi_obscure = CONF.getboolean('dmenu_passphrase', 'rofi_obscure', fallback=True)
        if CONF.has_option('dmenu_passphrase', 'rofi_obscure'):
            del args_dict["rofi_obscure"]
        if rofi_obscure is True and "rofi" in dmenu_command:
            dmenu_args.extend(["-password"])
        dmenu_password = CONF.getboolean('dmenu_passphrase', 'dmenu_password', fallback=False)
        if CONF.has_option('dmenu_passphrase', 'dmenu_password'):
            del args_dict["dmenu_password"]
        if dmenu_password is True:
            dmenu_args.extend(["-P"])
    extras = (["-" + str(k), str(v)] for (k, v) in args_dict.items())
    res = [dmenu_command, "-p", str(prompt)]
    res.extend(dmenu_args)
    res += list(itertools.chain.from_iterable(extras))
    res[1:1] = lines.split()
    res = list(filter(None, res))  # Remove empty list elements
    res.extend(sys.argv[1:])
    return res


def choose_adapter(client):
    """If there is more than one wifi adapter installed, ask which one to use
    """
    devices = client.get_devices()
    devices = [i for i in devices if i.get_device_type() == NM.DeviceType.WIFI]
    if not devices:  # pylint: disable=no-else-return
        return None
    elif len(devices) == 1:
        return devices[0]
    device_names = "\n".join([d.get_iface() for d in devices]).encode(ENC)
    sel = Popen(dmenu_cmd(len(devices), "CHOOSE ADAPTER:"),
                stdin=PIPE,
                stdout=PIPE,
                env=ENV).communicate(input=device_names)[0].decode(ENC)
    if not sel.strip():
        sys.exit()
    devices = [i for i in devices if i.get_iface() == sel.strip()]
    assert len(devices) == 1
    return devices[0]


def is_modemmanager_installed():
    """Check if ModemManager is installed"""
    with open(os.devnull) as devnull:
        try:
            Popen(["ModemManager"], stdout=devnull, stderr=devnull).communicate()
        except OSError:
            return False
        return True


def bluetooth_get_enabled():
    """Check if bluetooth is enabled via rfkill.
    Returns None if no bluetooth device was found.
    """
    # See https://www.kernel.org/doc/Documentation/ABI/stable/sysfs-class-rfkill
    for path in pathlib.Path('/sys/class/rfkill/').glob('rfkill*'):
        if (path / 'type').read_text().strip() == 'bluetooth':
            return (path / 'soft').read_text().strip() == '0'
    return None


def create_other_actions(client):
    """Return list of other actions that can be taken
    """
    networking_enabled = client.networking_get_enabled()
    networking_action = "Disable" if networking_enabled else "Enable"

    wifi_enabled = client.wireless_get_enabled()
    wifi_action = "Disable" if wifi_enabled else "Enable"

    bluetooth_enabled = bluetooth_get_enabled()
    bluetooth_action = "Disable" if bluetooth_enabled else "Enable"

    actions = [Action("{} Wifi".format(wifi_action), toggle_wifi,
                      not wifi_enabled),
               Action("{} Networking".format(networking_action),
                      toggle_networking, not networking_enabled)]
    if bluetooth_enabled is not None:
        actions.append(Action("{} Bluetooth".format(bluetooth_action),
                              toggle_bluetooth, not bluetooth_enabled))
    actions += [Action("Launch Connection Manager", launch_connection_editor),
                Action("Delete a Connection", delete_connection)]
    if wifi_enabled:
        actions.append(Action("Rescan Wifi Networks", rescan_wifi))
    return actions


def rescan_wifi():
    """
    Rescan Wifi Access Points
    """
    for dev in CLIENT.get_devices():
        if gi.repository.NM.DeviceWifi == type(dev):
            try:
                dev.request_scan_async(None, rescan_cb, None)
                LOOP.run()
            except gi.repository.GLib.Error as err:
                # Too frequent rescan error
                notify("Wifi rescan failed", urgency="critical")
                if not err.code == 6:  # pylint: disable=no-member
                    raise err


def rescan_cb(dev, res, data):
    """Callback for rescan_wifi. Just for notifications
    """
    if dev.request_scan_finish(res) is True:
        notify("Wifi scan complete")
    else:
        notify("Wifi scan failed", urgency="critical")
    LOOP.quit()


def ssid_to_utf8(nm_ap):
    """ Convert binary ssid to utf-8 """
    ssid = nm_ap.get_ssid()
    if not ssid:
        return ""
    ret = NM.utils_ssid_to_utf8(ssid.get_data())
    return ret


def prompt_saved(saved_cons):
    """Prompt for a saved connection."""
    actions = create_saved_actions(saved_cons)
    sel = get_selection(actions)
    sel()


def ap_security(nm_ap):
    """Parse the security flags to return a string with 'WPA2', etc. """
    flags = nm_ap.get_flags()
    wpa_flags = nm_ap.get_wpa_flags()
    rsn_flags = nm_ap.get_rsn_flags()
    sec_str = ""
    if ((flags & getattr(NM, '80211ApFlags').PRIVACY) and
            (wpa_flags == 0) and (rsn_flags == 0)):
        sec_str += " WEP"
    if wpa_flags != 0:
        sec_str += " WPA1"
    if rsn_flags != 0:
        sec_str += " WPA2"
    if ((wpa_flags & getattr(NM, '80211ApSecurityFlags').KEY_MGMT_802_1X) or
            (rsn_flags & getattr(NM, '80211ApSecurityFlags').KEY_MGMT_802_1X)):
        sec_str += " 802.1X"

    # If there is no security use "--"
    if sec_str == "":
        sec_str = "--"
    return sec_str.lstrip()


class Action():  # pylint: disable=too-few-public-methods
    """Helper class to execute functions from a string variable"""
    def __init__(self,
                 name,
                 func,
                 args=None,
                 active=False):
        self.name = name
        self.func = func
        self.is_active = active
        if args is None:
            self.args = None
        elif isinstance(args, list):
            self.args = args
        else:
            self.args = [args]

    def __str__(self):
        return self.name

    def __call__(self):
        if self.args is None:
            self.func()
        else:
            self.func(*self.args)


def conn_matches_adapter(conn, adapter):
    """Return True if the connection is applicable for the given adapter.
    There seem to be two ways for a connection specify what interface it belongs
    to:
    - By setting 'mac-address' in [wifi] to the adapter's MAC
    - By setting 'interface-name` in [connection] to the adapter's name.
    Depending on how the connection was added, it seems like either
    'mac-address', 'interface-name' or neither of both is set.
    """
    # [wifi] mac-address
    setting_wireless = conn.get_setting_wireless()
    mac = setting_wireless.get_mac_address()
    if mac is not None:
        return mac == adapter.get_permanent_hw_address()

    # [connection] interface-name
    setting_connection = conn.get_setting_connection()
    interface = setting_connection.get_interface_name()
    if interface is not None:
        return interface == adapter.get_iface()

    # Neither is set, let's assume this connection is for multiple/all adapters.
    return True


def process_ap(nm_ap, is_active, adapter):
    """Activate/Deactivate a connection and get password if required"""
    if is_active:
        CLIENT.deactivate_connection_async(nm_ap, None, deactivate_cb, nm_ap)
    else:
        conns_cur = [i for i in CONNS if
                     i.get_setting_wireless() is not None and
                     conn_matches_adapter(i, adapter)]
        con = nm_ap.filter_connections(conns_cur)
        if len(con) > 1:
            raise ValueError("There are multiple connections possible")

        if len(con) == 1:
            CLIENT.activate_connection_async(con[0], adapter, nm_ap.get_path(),
                                             None, activate_cb, nm_ap)
        else:
            if ap_security(nm_ap) != "--":
                password = get_passphrase()
            else:
                password = ""
            set_new_connection(nm_ap, password, adapter)
    LOOP.run()


def activate_cb(dev, res, data):
    """Notification if activate connection completed successfully
    """
    try:
        conn = dev.activate_connection_finish(res)
    except GLib.Error:
        conn = None
    if conn is not None:
        notify("Activated {}".format(conn.get_id()))
    else:
        notify("Problem activating {}".format(data.get_id()),
               urgency="critical")
    LOOP.quit()


def deactivate_cb(dev, res, data):
    """Notification if deactivate connection completed successfully
    """
    if dev.deactivate_connection_finish(res) is True:
        notify("Deactivated {}".format(data.get_id()))
    else:
        notify("Problem deactivating {}".format(data.get_id()),
               urgency="critical")
    LOOP.quit()


def process_vpngsm(con, activate):
    """Activate/deactive VPN or GSM connections"""
    if activate:
        CLIENT.activate_connection_async(con, None, None,
                                         None, activate_cb, con)
    else:
        CLIENT.deactivate_connection_async(con, None, deactivate_cb, con)
    LOOP.run()


def create_ap_actions(aps, active_ap, active_connection, adapter):  # pylint: disable=too-many-locals
    """For each AP in a list, create the string and its attached function
    (activate/deactivate)
    """
    active_ap_bssid = active_ap.get_bssid() if active_ap is not None else ""

    names = [ssid_to_utf8(ap) for ap in aps]
    max_len_name = max([len(name) for name in names]) if names else 0
    secs = [ap_security(ap) for ap in aps]
    max_len_sec = max([len(sec) for sec in secs]) if secs else 0

    ap_actions = []

    for nm_ap, name, sec in zip(aps, names, secs):
        bars = NM.utils_wifi_strength_bars(nm_ap.get_strength())
        wifi_chars = CONF.get("dmenu", "wifi_chars", fallback=False)
        if wifi_chars:
            bars = "".join([wifi_chars[i] for i, j in enumerate(bars) if j == '*'])
        is_active = nm_ap.get_bssid() == active_ap_bssid
        compact = CONF.getboolean("dmenu", "compact", fallback=False)
        if compact:
            action_name = u"{}  {}  {}".format(name, sec, bars)
        else:
            action_name = u"{:<{}s}  {:<{}s}  {}".format(name, max_len_name, sec,
                                                         max_len_sec, bars)
        if is_active:
            ap_actions.append(Action(action_name, process_ap,
                                     [active_connection, True, adapter],
                                     active=True))
        else:
            ap_actions.append(Action(action_name, process_ap,
                                     [nm_ap, False, adapter]))
    return ap_actions


def create_vpn_actions(vpns, active):
    """Create the list of strings to display with associated function
    (activate/deactivate) for VPN connections.
    """
    active_vpns = [i for i in active if i.get_vpn()]
    return _create_vpngsm_actions(vpns, active_vpns, "VPN")


def create_wireguard_actions(wgs, active):
    """Create the list of strings to display with associated function
    (activate/deactivate) for Wireguard connections.
    """
    active_wgs = [i for i in active if i.get_connection_type() == "wireguard"]
    return _create_vpngsm_actions(wgs, active_wgs, "Wireguard")


def create_eth_actions(eths, active):
    """Create the list of strings to display with associated function
    (activate/deactivate) for Ethernet connections.
    """
    active_eths = [i for i in active if 'ethernet' in i.get_connection_type()]
    return _create_vpngsm_actions(eths, active_eths, "Eth")


def create_gsm_actions(gsms, active):
    """Create the list of strings to display with associated function
    (activate/deactivate) GSM connections."""
    active_gsms = [i for i in active if
                   i.get_connection() is not None and
                   i.get_connection().is_type(NM.SETTING_GSM_SETTING_NAME)]
    return _create_vpngsm_actions(gsms, active_gsms, "GSM")


def create_blue_actions(blues, active):
    """Create the list of strings to display with associated function
    (activate/deactivate) Bluetooth connections."""
    active_blues = [i for i in active if
                    i.get_connection() is not None and
                    i.get_connection().is_type(NM.SETTING_BLUETOOTH_SETTING_NAME)]
    return _create_vpngsm_actions(blues, active_blues, "Bluetooth")


def create_saved_actions(saved):
    """Create the list of strings to display with associated function
    (activate/deactivate) for VPN connections.
    """
    return _create_vpngsm_actions(saved, [], "SAVED")


def _create_vpngsm_actions(cons, active_cons, label):
    active_con_ids = [a.get_id() for a in active_cons]
    actions = []
    for con in cons:
        is_active = con.get_id() in active_con_ids
        action_name = u"{}:{}".format(con.get_id(), label)
        if is_active:
            active_connection = [a for a in active_cons
                                 if a.get_id() == con.get_id()]
            if len(active_connection) != 1:
                raise ValueError(u"Multiple active connections match"
                                 " the connection: {}".format(con.get_id()))
            active_connection = active_connection[0]

            actions.append(Action(action_name, process_vpngsm,
                                  [active_connection, False], active=True))
        else:
            actions.append(Action(action_name, process_vpngsm,
                                  [con, True]))
    return actions


def create_wwan_actions(client):
    """Create WWWAN actions
    """
    wwan_enabled = client.wwan_get_enabled()
    wwan_action = "Disable" if wwan_enabled else "Enable"
    return [Action("{} WWAN".format(wwan_action), toggle_wwan, not wwan_enabled)]


def combine_actions(eths, aps, vpns, wgs, gsms, blues, wwan, others, saved):
    """Combine all given actions into a list of actions.
    Args: args - eths: list of Actions
                 aps: list of Actions
                 vpns: list of Actions
                 gsms: list of Actions
                 blues: list of Actions
                 wwan: list of Actions
                 others: list of Actions
    """
    compact = CONF.getboolean("dmenu", "compact", fallback=False)
    empty_action = [Action('', None)] if not compact else []
    all_actions = []
    all_actions += eths + empty_action if eths else []
    all_actions += aps + empty_action if aps else []
    all_actions += vpns + empty_action if vpns else []
    all_actions += wgs + empty_action if wgs else []
    all_actions += gsms + empty_action if (gsms and wwan) else []
    all_actions += blues + empty_action if blues else []
    all_actions += wwan + empty_action if wwan else []
    all_actions += others + empty_action if others else []
    all_actions += saved + empty_action if saved else []
    return all_actions


def get_selection(all_actions):
    """Spawn dmenu for selection and execute the associated action."""
    rofi_highlight = CONF.getboolean('dmenu', 'rofi_highlight', fallback=False)
    inp = []

    if rofi_highlight is True:
        inp = [str(action) for action in all_actions]
    else:
        inp = [('== ' if action.is_active else '   ') + str(action)
               for action in all_actions]
    active_lines = [index for index, action in enumerate(all_actions)
                    if action.is_active]

    inp_bytes = "\n".join(inp).encode(ENC)
    command = dmenu_cmd(len(inp), active_lines=active_lines)
    sel = Popen(command, stdin=PIPE, stdout=PIPE,
                env=ENV).communicate(input=inp_bytes)[0].decode(ENC)

    if not sel.rstrip():
        sys.exit()

    if rofi_highlight is False:
        action = [i for i in all_actions
                  if ((str(i).strip() == str(sel.strip())
                       and not i.is_active) or
                      ('== ' + str(i) == str(sel.rstrip('\n'))
                       and i.is_active))]
    else:
        action = [i for i in all_actions if str(i).strip() == sel.strip()]
    assert len(action) == 1, \
        u"Selection was ambiguous: '{}'".format(str(sel.strip()))
    return action[0]


def toggle_networking(enable):
    """Enable/disable networking
    Args: enable - boolean
    """
    toggle = GLib.Variant.new_tuple(GLib.Variant.new_boolean(enable))
    try:
        CLIENT.dbus_call(NM.DBUS_PATH, NM.DBUS_INTERFACE, "Enable", toggle,
                         None, -1, None, None, None)
    except AttributeError:
        # Workaround for older versions of python-gobject
        CLIENT.networking_set_enabled(enable)
    notify("Networking {}".format("enabled" if enable is True else "disabled"))


def toggle_wifi(enable):
    """Enable/disable Wifi
    Args: enable - boolean
    """
    toggle = GLib.Variant.new_boolean(enable)
    try:
        CLIENT.dbus_set_property(NM.DBUS_PATH, NM.DBUS_INTERFACE, "WirelessEnabled", toggle,
                                 -1, None, None, None)
    except AttributeError:
        # Workaround for older versions of python-gobject
        CLIENT.wireless_set_enabled(enable)
    notify("Wifi {}".format("enabled" if enable is True else "disabled"))


def toggle_wwan(enable):
    """Enable/disable WWAN
    Args: enable - boolean
    """
    toggle = GLib.Variant.new_boolean(enable)
    try:
        CLIENT.dbus_set_property(NM.DBUS_PATH, NM.DBUS_INTERFACE, "WwanEnabled", toggle,
                                 -1, None, None, None)
    except AttributeError:
        # Workaround for older versions of python-gobject
        CLIENT.wwan_set_enabled(enable)
    notify("Wwan {}".format("enabled" if enable is True else "disabled"))


def toggle_bluetooth(enable):
    """Enable/disable Bluetooth
    Args: enable - boolean
    References:
    https://github.com/blueman-project/blueman/blob/master/blueman/plugins/mechanism/RfKill.py
    https://www.kernel.org/doc/html/latest/driver-api/rfkill.html
    https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/uapi/linux/rfkill.h?h=v5.8.9
    """
    type_bluetooth = 2
    op_change_all = 3
    idx = 0
    soft_state = 0 if enable else 1
    hard_state = 0

    data = struct.pack("IBBBB", idx, type_bluetooth, op_change_all,
                       soft_state, hard_state)

    try:
        with open('/dev/rfkill', 'r+b', buffering=0) as rff:
            rff.write(data)
    except PermissionError:
        notify("Lacking permission to write to /dev/rfkill.",
               "Maybe you need to add your user to the 'rfkill' group?",
               urgency="critical")
    else:
        notify("Bluetooth {}".format("enabled" if enable else "disabled"))


def launch_connection_editor():
    """Launch nmtui or the gui nm-connection-editor
    """
    terminal = CONF.get("editor", "terminal", fallback="xterm")
    gui_if_available = CONF.getboolean("editor", "gui_if_available", fallback=True)
    if gui_if_available is True:
        try:
            Popen(["gnome-control-center", "network"]).communicate()
        except OSError:
            try:
                Popen(["nm-connection-editor"]).communicate()
            except OSError:
                Popen([terminal, "-e", "nmtui"]).communicate()
    else:
        Popen([terminal, "-e", "nmtui"]).communicate()


def get_passphrase():
    """Get a password
    Returns: string
    """
    pinentry = CONF.get("dmenu", "pinentry", fallback=None)
    if pinentry:
        pin = ""
        out = Popen(pinentry,
                    stdout=PIPE,
                    stdin=PIPE).communicate(input=b'setdesc Get network password\ngetpin\n')[0]
        if out:
            res = out.decode(ENC).split("\n")[2]
            if res.startswith("D "):
                pin = res.split("D ")[1]
        return pin
    return Popen(dmenu_cmd(0, "Passphrase"),
                 stdin=PIPE, stdout=PIPE).communicate()[0].decode(ENC)


def delete_connection():
    """Display list of NM connections and delete the selected one
    """
    conn_acts = [Action(i.get_id(), i.delete_async, args=[None, delete_cb, None]) for i in CONNS]
    conn_names = "\n".join([str(i) for i in conn_acts]).encode(ENC)
    sel = Popen(dmenu_cmd(len(conn_acts), "CHOOSE CONNECTION TO DELETE:"),
                stdin=PIPE,
                stdout=PIPE,
                env=ENV).communicate(input=conn_names)[0].decode(ENC)
    if not sel.strip():
        sys.exit()
    action = [i for i in conn_acts if str(i) == sel.rstrip("\n")]
    assert len(action) == 1, u"Selection was ambiguous: {}".format(str(sel))
    action[0]()
    LOOP.run()


def delete_cb(dev, res, data):
    """Notification if delete completed successfully
    """
    if dev.delete_finish(res) is True:
        notify("Deleted {}".format(dev.get_id()))
    else:
        notify("Problem deleting {}".format(dev.get_id()), urgency="critical")
    LOOP.quit()


def set_new_connection(nm_ap, nm_pw, adapter):
    """Setup a new NetworkManager connection
    Args: ap - NM.AccessPoint
          pw - string
    """
    nm_pw = str(nm_pw).strip()
    profile = create_wifi_profile(nm_ap, nm_pw, adapter)
    CLIENT.add_and_activate_connection_async(profile, adapter, nm_ap.get_path(),
                                             None, verify_conn, profile)
    LOOP.run()


def create_wifi_profile(nm_ap, password, adapter):
    # pylint: disable=C0301
    # From https://cgit.freedesktop.org/NetworkManager/NetworkManager/tree/examples/python/gi/add_connection.py
    # and https://cgit.freedesktop.org/NetworkManager/NetworkManager/tree/examples/python/dbus/add-wifi-psk-connection.py
    # pylint: enable=C0301
    """Create the NM profile given the AP and passphrase"""
    ap_sec = ap_security(nm_ap)
    profile = NM.SimpleConnection.new()

    s_con = NM.SettingConnection.new()
    s_con.set_property(NM.SETTING_CONNECTION_ID, ssid_to_utf8(nm_ap))
    s_con.set_property(NM.SETTING_CONNECTION_UUID, str(uuid.uuid4()))
    s_con.set_property(NM.SETTING_CONNECTION_TYPE, "802-11-wireless")
    profile.add_setting(s_con)

    s_wifi = NM.SettingWireless.new()
    s_wifi.set_property(NM.SETTING_WIRELESS_SSID, nm_ap.get_ssid())
    s_wifi.set_property(NM.SETTING_WIRELESS_MODE, 'infrastructure')
    s_wifi.set_property(NM.SETTING_WIRELESS_MAC_ADDRESS, adapter.get_permanent_hw_address())
    profile.add_setting(s_wifi)

    s_ip4 = NM.SettingIP4Config.new()
    s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, "auto")
    profile.add_setting(s_ip4)

    s_ip6 = NM.SettingIP6Config.new()
    s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, "auto")
    profile.add_setting(s_ip6)

    if ap_sec != "--":
        s_wifi_sec = NM.SettingWirelessSecurity.new()
        if "WPA" in ap_sec:
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_KEY_MGMT,
                                    "wpa-psk")
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_AUTH_ALG,
                                    "open")
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_PSK, password)
        elif "WEP" in ap_sec:
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_KEY_MGMT,
                                    "None")
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE,
                                    NM.WepKeyType.PASSPHRASE)
            s_wifi_sec.set_wep_key(0, password)
        profile.add_setting(s_wifi_sec)

    return profile


def verify_conn(client, result, data):
    """Callback function for add_and_activate_connection_async
    Check if connection completes successfully. Delete the connection if there
    is an error.
    """
    try:
        act_conn = client.add_and_activate_connection_finish(result)
        conn = act_conn.get_connection()
        if not all([conn.verify(),
                    conn.verify_secrets(),
                    data.verify(),
                    data.verify_secrets()]):
            raise GLib.Error
        notify("Added {}".format(conn.get_id()))
    except GLib.Error:  # pylint: disable=catching-non-exception
        try:
            notify("Connection to {} failed".format(conn.get_id()),
                   urgency="critical")
            conn.delete_async(None, None, None)
        except UnboundLocalError:
            pass
    finally:
        LOOP.quit()


def create_ap_list(adapter, active_connections):
    """Generate list of access points. Remove duplicate APs , keeping strongest
    ones and the active AP
    Args: adapter
          active_connections - list of all active connections
    Returns: aps - list of access points
             active_ap - active AP
             active_ap_con - active Connection
             adapter
    """
    aps = []
    ap_names = []
    active_ap = adapter.get_active_access_point()
    aps_all = sorted(adapter.get_access_points(),
                     key=lambda a: a.get_strength(), reverse=True)
    conns_cur = [i for i in CONNS if
                 i.get_setting_wireless() is not None and
                 conn_matches_adapter(i, adapter)]
    try:
        ap_conns = active_ap.filter_connections(conns_cur)
        active_ap_name = ssid_to_utf8(active_ap)
        active_ap_con = [active_conn for active_conn in active_connections
                         if active_conn.get_connection() in ap_conns]
    except AttributeError:
        active_ap_name = None
        active_ap_con = []
    if len(active_ap_con) > 1:
        raise ValueError("Multiple connection profiles match"
                         " the wireless AP")
    active_ap_con = active_ap_con[0] if active_ap_con else None
    for nm_ap in aps_all:
        ap_name = ssid_to_utf8(nm_ap)
        if nm_ap != active_ap and ap_name == active_ap_name:
            # Skip adding AP if it's not active but same name as active AP
            continue
        if ap_name not in ap_names:
            ap_names.append(ap_name)
            aps.append(nm_ap)
    return aps, active_ap, active_ap_con, adapter


def notify(message, details=None, urgency="low"):
    """Use notify-send if available for notifications
    """
    args = ["-u", urgency, message]
    if details is not None:
        args.append(details)

    try:
        Popen(["notify-send"] + args,
              stdout=PIPE, stderr=PIPE).communicate()
    except FileNotFoundError:
        pass


def run():
    """Main script entrypoint"""
    active = CLIENT.get_active_connections()
    adapter = choose_adapter(CLIENT)
    if adapter:
        ap_actions = create_ap_actions(*create_ap_list(adapter, active))
    else:
        ap_actions = []

    vpns = [i for i in CONNS if i.is_type(NM.SETTING_VPN_SETTING_NAME)]
    try:
        wgs = [i for i in CONNS if i.is_type(NM.SETTING_WIREGUARD_SETTING_NAME)]
    except AttributeError:
        # Workaround for older versions of python-gobject with no wireguard support
        wgs = []
    eths = [i for i in CONNS if i.is_type(NM.SETTING_WIRED_SETTING_NAME)]
    blues = [i for i in CONNS if i.is_type(NM.SETTING_BLUETOOTH_SETTING_NAME)]

    vpn_actions = create_vpn_actions(vpns, active)
    wg_actions = create_wireguard_actions(wgs, active)
    eth_actions = create_eth_actions(eths, active)
    blue_actions = create_blue_actions(blues, active)
    other_actions = create_other_actions(CLIENT)
    wwan_installed = is_modemmanager_installed()
    if wwan_installed:
        gsms = [i for i in CONNS if i.is_type(NM.SETTING_GSM_SETTING_NAME)]
        gsm_actions = create_gsm_actions(gsms, active)
        wwan_actions = create_wwan_actions(CLIENT)
    else:
        gsm_actions = []
        wwan_actions = []

    list_saved = CONF.getboolean('dmenu', 'list_saved', fallback=False)
    saved_cons = [i for i in CONNS if i not in vpns + wgs + eths + blues]
    if list_saved:
        saved_actions = create_saved_actions(saved_cons)
    else:
        saved_actions = [Action("Saved connections", prompt_saved, [saved_cons])]

    actions = combine_actions(eth_actions, ap_actions, vpn_actions, wg_actions,
                              gsm_actions, blue_actions, wwan_actions,
                              other_actions, saved_actions)
    sel = get_selection(actions)
    sel()


if __name__ == '__main__':
    run()

# vim: set et ts=4 sw=4 :
#+end_src

**** Power Menu
#+begin_src shell :tangle ~/.config/rofi/bin/power-menu :mkdirp yes :tangle-mode (identity #o755)
#!/bin/bash

DIR="$HOME/.config/rofi"

rofi_command="rofi -theme $DIR/themes/powermenu.rasi"

uptime=$(uptime -p | sed -e 's/up //g')

# Options
shutdown=""
reboot=""
lock=""
suspend=""
logout=""

# Variable passed to rofi
options="$shutdown\n$reboot\n$lock\n$suspend\n$logout"
_msg="Options  -  yes / y / no / n"

chosen="$(echo -e "$options" | $rofi_command -p "UP - $uptime" -dmenu -selected-row 2)"
case $chosen in
    $shutdown)
		ans=$($HOME/.config/rofi/bin/confirm &)
		if [[ $ans == "yes" ]] || [[ $ans == "YES" ]] || [[ $ans == "y" ]]; then
			systemctl poweroff
		elif [[ $ans == "no" ]] || [[ $ans == "NO" ]] || [[ $ans == "n" ]]; then
			exit
        else
			rofi -theme ~/.config/rofi/themes/askpass.rasi -e "$_msg"
        fi
        ;;
    $reboot)
		ans=$($HOME/.config/rofi/bin/confirm &)
		if [[ $ans == "yes" ]] || [[ $ans == "YES" ]] || [[ $ans == "y" ]]; then
			systemctl reboot
		elif [[ $ans == "no" ]] || [[ $ans == "NO" ]] || [[ $ans == "n" ]]; then
			exit
        else
			rofi -theme ~/.config/rofi/themes/askpass.rasi -e "$_msg"
        fi
        ;;
    $lock)
        ~/.config/i3/bin/i3lock.sh
        ;;
    $suspend)
		ans=$($HOME/.config/rofi/bin/confirm &)
		if [[ $ans == "yes" ]] || [[ $ans == "YES" ]] || [[ $ans == "y" ]]; then
			mpc -q pause
			amixer set Master mute
			betterlockscreen --suspend
		elif [[ $ans == "no" ]] || [[ $ans == "NO" ]] || [[ $ans == "n" ]]; then
			exit
        else
			rofi -theme ~/.config/rofi/themes/askpass.rasi -e "$_msg"
        fi
        ;;
    $logout)
		ans=$($HOME/.config/rofi/bin/confirm &)
		if [[ $ans == "yes" ]] || [[ $ans == "YES" ]] || [[ $ans == "y" ]]; then
			i3-msg exit
		elif [[ $ans == "no" ]] || [[ $ans == "NO" ]] || [[ $ans == "n" ]]; then
			exit
        else
			rofi -theme ~/.config/rofi/themes/askpass.rasi -e "$_msg"
        fi
        ;;
esac

#+end_src

**** Screenshot

Bound in my =i3wm= configuration, this Rofi script launches a menu
window to the right of the screen to allow a selection of different
types of screenshots. The default option, in the center, allows
capturing an area directly to the clipboard for pasting.

#+begin_src shell :tangle ~/.config/rofi/bin/screenshot :mkdirp yes :tangle-mode (identity #o755)
#!/bin/bash

DIR="$HOME/.config/rofi"

rofi_command="rofi -theme $DIR/themes/screenshot.rasi"

# Options
screen=""
area=""
window=""

# Variable passed to rofi
options="$screen\n$area\n$window"

chosen="$(echo -e "$options" | $rofi_command -p 'Screenshot' -dmenu -selected-row 1)"
case $chosen in
    $screen)
        sleep 1; scrot 'Screenshot_%Y-%m-%d-%S_$wx$h.png' -e 'mv $f $$(xdg-user-dir PICTURES) ; viewnior $$(xdg-user-dir PICTURES)/$f'
        ;;
    $area)
	sleep 1; scrot -s ~/foo.png && xclip -selection clipboard -t image/png ~/foo.png ; sleep 2 ; rm ~/foo.png
        ;;
    $window)
        sleep 1; scrot -u 'Screenshot_%Y-%m-%d-%S_$wx$h.png' -e 'mv $f $$(xdg-user-dir PICTURES) ; viewnior $$(xdg-user-dir PICTURES)/$f'
        ;;
esac
#+end_src

**** Windows

This script launches a Rofi window that allows the browsing of
currently opened windows. It is bound to ~<Ctrl>~-~<Mod>~-~w~ in =i3wm='s
config.

#+begin_src shell :tangle ~/.config/rofi/bin/windows :mkdirp yes :tangle-mode (identity #o755)
#!/bin/sh
DIR="$HOME/.config/rofi"

rofi -no-lazy-grab -show window -theme $DIR/themes/window.rasi
#+end_src

*** Theme(s)
**** Colors
#+begin_src css :tangle ~/.config/rofi/themes/colors.rasi :mkdirp yes
,* {
  background:			#1e222a;
  background-alt:		#262A32;
  foreground:			#c8ccd4;
  selected:			#61afef;
  urgent:				#e06c75;
  on:					#98c379;
  off:				#e06c75;
}
#+end_src
**** Confirm
#+begin_src css :tangle ~/.config/rofi/themes/confirm.rasi :mkdirp yes
@import "colors.rasi"

,* {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  font:            				"JetBrains Mono Medium 10";
}

#window {
  border:							2px;
  border-radius:                  12px;
  border-color:					@selected;
  width:      					220px;
  y-offset: 						-5%;
  padding:    					20px;
}

#entry {
  expand: 						true;
  width: 							150px;
  text-color:						@urgent;
}
#+end_src
**** Launcher

#+begin_src css :tangle ~/.config/rofi/themes/launcher.rasi :mkdirp yes
configuration {
  lines:							10;
  columns:						2;
  font: 							"JetBrains Mono Medium 10";
  bw: 							0;
  location: 						0;
  padding: 						0;
  fixed-num-lines: 				true;
  show-icons: 					false;
  sidebar-mode: 					true;
  separator-style: 				"none";
  hide-scrollbar: 				true;
  fullscreen: 					false;
  fake-transparency: 				false;
  scroll-method: 					1;
  window-format: 					"[{w}] ··· {c} ···   {t}";
  click-to-exit: 					true;
  show-match: 					false;
  combi-hide-mode-prefix: 		false;
  display-window: 				"";
  display-windowcd: 				"";
  display-run: 					"";
  display-ssh: 					"";
  display-drun: 					"";
  display-combi: 					"";
}

@import "colors.rasi"

,* {
  background-color:             	@background;
}

window {
  border: 						0px;
  border-color: 					@selected;
  border-radius: 					20px;
  padding: 						30;
  width: 							40%;
}

prompt {
  font: 							"Iosevka Nerd Font 12";
  spacing: 						0;
  border: 						0;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							" ";
  margin:							0px 4px 0px 0px;
  text-color: 					inherit;
}

entry {
  spacing:    					0;
  text-color: 					@foreground;
}

case-indicator {
  spacing:    					0;
  text-color: 					@foreground;
}

inputbar {
  spacing:    					0px;
  text-color: 					@foreground;
  padding:    					1px;
  children: 						[ prompt,textbox-prompt-colon,entry,case-indicator ];
}

mainbox {
  border: 						0px;
  border-color: 					@selected;
  padding: 						6;
}

listview {
  fixed-height: 					0;
  border: 						0px;
  border-color: 					@selected;
  spacing: 						4px;
  scrollbar: 						false;
  padding: 						5px 5px 0px 5px;
}

element {
  border: 						0px;
  border-radius: 					10px;
  padding: 						5px;
}
element normal.normal {
  background-color: 				@background;
  text-color:       				@foreground;
}
element normal.urgent {
  background-color: 				@background;
  text-color:       				@red;
}
element normal.active {
  background-color: 				@on;
  text-color:       				@background;
}
element selected.normal {
  background-color: 				@selected;
  text-color:       				@background;
}
element selected.urgent {
  background-color: 				@background;
  text-color:       				@off;
}
element selected.active {
  background-color: 				@selected;
  text-color:       				@background;
}
element alternate.normal {
  background-color: 				@background;
  text-color:       				@foreground;
}
element alternate.urgent {
  background-color: 				@background;
  text-color:       				@foreground;
}
element alternate.active {
  background-color: 				@background;
  text-color:       				@foreground;
}

sidebar {
  border:       					0px;
  border-color: 					@selected;
  border-radius: 					0px;
}

button {
  font: 							"Iosevka Nerd Font 12";
  background-color:             	@off;
  margin: 						5px;
  padding: 						5px;
  text-color: 					@background;
  border: 						0px;
  border-radius: 					10px;
  border-color: 					@foreground;
}

button selected {
  font: 							"Iosevka Nerd Font 12";
  background-color:             	@on;
  text-color: 					@background;
  border: 						0px;
  border-radius: 					10px;
  border-color: 					@foreground;
}

scrollbar {
  width:        					4px;
  border:       					0px;
  handle-color: 					@foreground;
  handle-width: 					8px;
  padding:      					0;
}

message {
  border: 						0px;
  border-color: 					@selected;
  padding: 						1px;
}

textbox {
  text-color: 					@foreground;
}
#+end_src

**** Window

#+begin_src css :tangle ~/.config/rofi/themes/window.rasi :mkdirp yes
configuration {
    font:                           "JetBrains Mono Medium 10";
    show-icons:                     false;
	icon-theme: 					"Papirus";
    display-drun: 					":";
    drun-display-format:            "{name}";
    threads:                        0;
    scroll-method:                  0;
    disable-history:                false;
    fullscreen:                     false;
	hide-scrollbar: 				true;
	sidebar-mode: 					false;
}

@import "colors.rasi"

window {
    transparency:                   "real";
    background-color:               @background;
    text-color:                     @foreground;
	border:							0px;
    border-radius:                  12px;
    border-color:					@selected;
    width:                          500px;
    location:                       center;
    anchor:                         center;
    x-offset:                       0;
    y-offset:                       0;
    padding:                        20;
}

prompt {
    enabled: 						true;
	padding: 						4px 4px 6px 6px;
	background-color: 				@background;
	text-color: 					@foreground;
}

textbox-prompt-colon {
	expand: 						false;
	str: 							"";
    background-color:               @background;
    text-color:                     @urgent;
    padding:                        5px 0px 0px 4px;
	font:							"feather 10";
}

inputbar {
	children: 						[ textbox-prompt-colon, prompt ];
    background-color:               @background;
    text-color:                     @foreground;
    expand:                         false;
    border:                  		0px 0px 0px 0px;
    border-radius:                  0px;
    border-color:                  	@selected;
    margin:                         0px 0px 0px 0px;
    padding:                        0px 0px 0px 0px;
    position:                       center;
}


entry {
    background-color:               @background;
    text-color:                     @foreground;
    placeholder-color:              @foreground;
    expand:                         true;
    horizontal-align:               0;
    placeholder:                    "Search";
    blink:                          true;
    padding:                        4px 0px 0px 0px;
}

case-indicator {
    background-color:               @background;
    text-color:                     @foreground;
    spacing:                        0;
}


listview {
    background-color:               @background;
    columns:                        1;
    lines:							8;
    spacing:                        5px;
    cycle:                          true;
    dynamic:                        true;
    layout:                         vertical;
}

mainbox {
    background-color:               @background;
    children:                       [ inputbar, listview ];
    spacing:                       	5px;
    padding:                        5px 5px 5px 5px;
}

element {
    background-color:               @background;
    text-color:                     @foreground;
    orientation:                    horizontal;
	border:							0px;
    border-radius:                  0px;
    border-color:					@selected;
    padding:                        5px 5px 5px 5px;
}

element-icon {
    size:                           24px;
    border:                         0px;
}

element-text {
    expand:                         true;
    horizontal-align:               0;
    vertical-align:                 0;
    margin:                         2px 0px 2px 2px;
}

element selected {
    background-color:               @selected;
    text-color:                     @background;
    border:                  		0px;
    border-radius:                  10px;
    border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
  border-radius: 10px;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src

**** Asroot

#+begin_src css :tangle ~/.config/rofi/themes/asroot.rasi

configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
}

@import "colors.rasi"

window {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          300px;
  location:                       center;
  anchor:                         center;
  x-offset:                       0;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 10";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							6;
  spacing:                        5px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         vertical;
}

mainbox {
  background-color:               @background;
  children:                       [ inputbar, listview ];
  spacing:                       	5px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background;
  text-color:                     @foreground;
  orientation:                    horizontal;
  border:							0px;
  border-radius:                  0px;
  border-color:					@selected;
  padding:                        5px 5px 5px 5px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
  margin:                         2px 0px 2px 2px;
}

element selected {
  background-color:               @selected;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  10px;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src

**** Network
#+begin_src css :tangle ~/.config/rofi/themes/network.rasi :mkdirp yes
configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
}

@import "colors.rasi"

window {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          435px;
  location:                       center;
  anchor:                         center;
  x-offset:                       0;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 12";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							6;
  spacing:                        15px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         horizontal;
}

mainbox {
  background-color:               @background;
  children:                       [ inputbar, listview ];
  spacing:                       	10px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background-alt;
  text-color:                     @foreground;
  orientation:                    horizontal;
  font:							"feather 12";
  border:							0px;
  border-radius:                  100%;
  border-color:					@selected;
  padding:                        30px 30px 36px 30px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  font:							"feather 18";
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
}

element selected {
  background-color:               @selected;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  100%;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src
**** Network Menu
#+begin_src css :tangle ~/.config/rofi/themes/networkmenu.rasi :mkdirp yes
configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
}

@import "colors.rasi"

window {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          500px;
  location:                       center;
  anchor:                         center;
  x-offset:                       0;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 10";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							8;
  spacing:                        5px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         vertical;
}

mainbox {
  background-color:               @background;
  children:                       [ inputbar, listview ];
  spacing:                       	5px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background;
  text-color:                     @foreground;
  orientation:                    horizontal;
  border:							0px;
  border-radius:                  0px;
  border-color:					@selected;
  padding:                        5px 5px 5px 5px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
  margin:                         2px 0px 2px 2px;
}

element selected {
  background-color:               @selected;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  10px;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src
**** Network Menu Config
#+begin_src shell :tangle ~/.config/rofi/themes/networkmenu_config.ini
[dmenu]
dmenu_command = rofi -dmenu -theme ~/.config/rofi/themes/networkmenu.rasi
# # Note that dmenu_command can contain arguments as well like `rofi -width 30`
# # Rofi and dmenu are set to case insensitive by default `-i`
# l = number of lines to display, defaults to number of total network options
# fn = font string
# nb = normal background (name, #RGB, or #RRGGBB)
# nf = normal foreground
# sb = selected background
# sf = selected foreground
# b =  (just set to empty value and menu will appear at the bottom
# m = number of monitor to display on
# p = Custom Prompt for the networks menu
# pinentry = Pinentry command
# rofi_highlight = <True or False> # (Default: False) use rofi highlighting instead of '**'

# # override normal foreground and background colors (dmenu) or use the
# # -password option (rofi) to obscure passphrase entry
# [dmenu_passphrase]
# nf = #222222
# nb = #222222
# rofi_obscure = True

[editor]
terminal = urxvt
gui_if_available = True
# terminal = <name of terminal program>
# gui_if_available = <True or False>
#+end_src

**** MPD
#+begin_src css :tangle ~/.config/rofi/themes/mpd.rasi :mkdirp yes
configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
}

@import "colors.rasi"

window {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          630px;
  location:                       center;
  anchor:                         center;
  x-offset:                       0;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 12";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							6;
  spacing:                        15px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         horizontal;
}

mainbox {
  background-color:               @background;
  children:                       [ inputbar, listview ];
  spacing:                       	10px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background-alt;
  text-color:                     @foreground;
  orientation:                    horizontal;
  font:							"feather 12";
  border:							0px;
  border-radius:                  100%;
  border-color:					@selected;
  padding:                        30px 30px 36px 30px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  font:							"feather 18";
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
}

element selected {
  background-color:               @selected;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  100%;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src

**** Power Menu
#+begin_src css :tangle ~/.config/rofi/themes/powermenu.rasi :mkdirp yes
configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
  location:                       4;
}

@import "colors.rasi"

window {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          160px;
  x-offset:                       -15;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 12";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							5;
  spacing:                        15px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         vertical;
}

mainbox {
  background-color:               @background;
  children:                       [ listview ];
  spacing:                       	10px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background-alt;
  text-color:                     @foreground;
  orientation:                    vertical;
  font:							"feather 12";
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  padding:                        38px 0px 48px 38px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  font:							"feather 24";
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
}

element selected {
  background-color:               @urgent;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  12px;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src
**** Screenshot
#+begin_src css :tangle ~/.config/rofi/themes/screenshot.rasi :mkdirp yes
configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
  location:                       4;
}

@import "colors.rasi"

window {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          160px;
  x-offset:                       -15;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 12";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							3;
  spacing:                        15px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         vertical;
}

mainbox {
  background-color:               @background;
  children:                       [ listview ];
  spacing:                       	10px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background-alt;
  text-color:                     @foreground;
  orientation:                    vertical;
  font:							"feather 12";
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  padding:                        38px 0px 48px 38px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  font:							"feather 24";
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
}

element selected {
  background-color:               @urgent;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  12px;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src
** Tmux

#+description: @todo I think tmux now supports using XDG_CONFIG_HOME so it can be stored in ~/.config/tmux/.

#+begin_src conf :tangle ~/.tmux.conf

# Key bindings
# ------------------------------------------------------------------------------
# Unbind the default Prefix
unbind C-b
# Bind <C-a> as the new Prefix
set -g prefix C-a
# Send the prefix when used with prefix+a for nested sessions
bind C-a send-prefix
# Split windows horizontally with |
bind | split-window -h
# Split windows vertically with -
bind - split-window -v
# Reload configuration with 'r'
unbind r
bind r source-file ~/.tmux.conf
# Move around panes with hjkl
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# Resize panes with HJKL
bind-key H resize-pane -L 5
bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key L resize-pane -R 5
# Vim keystrokes for select and copy (yank) to clipboard.
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"

# General Settings
# ------------------------------------------------------------------------------
# Be colorful
set -g default-terminal "screen-256color"

# Enable the mouse
set-option -g mouse on

# Set the base index to 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1

# Use Vi mode
set -g status-keys vi
setw -g mode-keys vi
set-window-option -g mode-keys vi

# No delay for escape key press.
set -sg escape-time 0
# Set delay for repeat key press.
set -sg repeat-time 600


# THEME
set -g status-bg colour236
set -g status-fg white
set -g status-justify centre
set-window-option -g window-status-current-style bg=colour167,fg=colour236,bold
set -g status-interval 60
set -g status-left-length 30
set -g status-left '#[fg=green](#S) #(whoami)'
set -g status-right '#[fg=yellow]#(curl "wttr.in/?format=3")#[default] #[fg=white]%H:%M#[default]'

#+end_src

** ranger

#+begin_src python :tangle ~/.config/ranger/commands.py :mkdirp yes
# This is a sample commands.py.  You can add your own commands here.
#
# Please refer to commands_full.py for all the default commands and a complete
# documentation.  Do NOT add them all here, or you may end up with defunct
# commands when upgrading ranger.

# A simple command for demonstration purposes follows.
# -----------------------------------------------------------------------------

from __future__ import (absolute_import, division, print_function)

# You can import any python module as needed.
import os

# You always need to import ranger.api.commands here to get the Command class:
from ranger.api.commands import Command


# Any class that is a subclass of "Command" will be integrated into ranger as a
# command.  Try typing ":my_edit<ENTER>" in ranger!
class my_edit(Command):
    # The so-called doc-string of the class will be visible in the built-in
    # help that is accessible by typing "?c" inside ranger.
    """:my_edit <filename>

    A sample command for demonstration purposes that opens a file in an editor.
    """

    # The execute method is called when you run this command in ranger.
    def execute(self):
        # self.arg(1) is the first (space-separated) argument to the function.
        # This way you can write ":my_edit somefilename<ENTER>".
        if self.arg(1):
            # self.rest(1) contains self.arg(1) and everything that follows
            target_filename = self.rest(1)
        else:
            # self.fm is a ranger.core.filemanager.FileManager object and gives
            # you access to internals of ranger.
            # self.fm.thisfile is a ranger.container.file.File object and is a
            # reference to the currently selected file.
            target_filename = self.fm.thisfile.path

            # This is a generic function to print text in ranger.
        self.fm.notify("Let's edit the file " + target_filename + "!")

        # Using bad=True in fm.notify allows you to print error messages:
        if not os.path.exists(target_filename):
            self.fm.notify("The given file does not exist!", bad=True)
            return

        # This executes a function from ranger.core.acitons, a module with a
        # variety of subroutines that can help you construct commands.
        # Check out the source, or run "pydoc ranger.core.actions" for a list.
        self.fm.edit_file(target_filename)

    # The tab method is called when you press tab, and should return a list of
    # suggestions that the user will tab through.
    # tabnum is 1 for <TAB> and -1 for <S-TAB> by default
    def tab(self, tabnum):
        # This is a generic tab-completion function that iterates through the
        # content of the current directory.
        return self._tab_directory_content()


class empty(Command):
    """:empty
    Empties the trash directory ~/.Trash
    """

    def execute(self):
        self.fm.run("rm -rf ~/.Trash/{*,.[^.]*}")

class moveit(Command):
    """:moveit
    Moves stuff somewhere else
    """
    def execute(self):
        # reference to the currently selected file.
        target_filename = self.fm.thisfile.path
        self.fm.run("mv " + target_filename + ' ' + self.arg(1))
#+end_src
** mpv

Media player configuration. =mpv= replaces =mplayer=.

#+begin_src conf :tangle ~/.config/mpv/mpv.conf :mkdirp yes
##################
# video settings #
##################
# Start in fullscreen mode by default.
fs=no
# force starting with centered window
geometry=50%:50%
# Do not close the window on exit.
keep-open=yes
# Do not wait with showing the video window until it has loaded. (This will
# resize the window once video is loaded. Also always shows a window with
# audio.)
force-window=immediate
# Disable the On Screen Controller (OSC).
osc=no
# Keep the player window on top of all other windows.
ontop=yes
# Specify high quality video rendering preset (for --vo=gpu only)
# Can cause performance problems with some drivers and GPUs.
profile=gpu-hq
# Enable hardware decoding if available. Often, this does not work with all
# video outputs, but should work well with default settings on most systems.
# If performance or energy usage is an issue, forcing the vdpau or vaapi VOs
# may or may not help.
hwdec=auto
##################
# audio settings #
##################
# Specify default audio device. You can list devices with: --audio-device=help
# The option takes the device string (the stuff between the '...').
audio-device=alsa/default
# Do not filter audio to keep pitch when changing playback speed.
audio-pitch-correction=no
# Output 5.1 audio natively, and upmix/downmix audio with a different format.
audio-channels=5.1
# Disable any automatic remix, _if_ the audio output accepts the audio format.
# of the currently played file. See caveats mentioned in the manpage.
# (The default is "auto-safe", see manpage.)
audio-channels=auto
##################
# other settings #
##################
# Pretend to be a web browser. Might fix playback with some streaming sites,
# but also will break with shoutcast streams.
user-agent="Mozilla/5.0"
#+end_src

** mpd

Music player daemon configuration.

#+begin_src conf :tangle ~/.config/mpd/mpd.conf :mkdirp yes
# Read the user manual for documentation: http://www.musicpd.org/doc/user/
# Files and directories #######################################################
music_directory  "~/Audio/Music"
playlist_directory  "~/.config/mpd/playlists"
db_file   "~/.config/mpd/database"
log_file   "syslog"
pid_file   "~/.config/mpd/pid"
state_file   "~/.config/mpd/state"
sticker_file   "~/.config/mpd/sticker.sql"
###############################################################################
# General music daemon options ################################################
#user    "nobody"
#group    "nogroup"
bind_to_address  "0.0.0.0"
#bind_to_address  "~/.mpd/socket"
#port    "6600"
#log_level   "notice"
#restore_paused "no"
#save_absolute_paths_in_playlists "no"
#metadata_to_use "artist,album,title,track,name,genre,date,composer,performer,disc"
#metadata_to_use "+comment"
auto_update "yes"
auto_update_depth "3"
###############################################################################
# Symbolic link behavior ######################################################
follow_outside_symlinks "yes"
follow_inside_symlinks  "yes"
###############################################################################
# Zeroconf / Avahi Service Discovery ##########################################
#zeroconf_enabled  "yes"
#zeroconf_name   "Music Player @ %h"
###############################################################################
# Permissions #################################################################
#password                        "password@read,add,control,admin"
#default_permissions             "read,add,control,admin"
###############################################################################
# Database #######################################################################
#database {
#       plugin "proxy"
#       host "other.mpd.host"
#       port "6600"
#}
# Input #######################################################################
input {
        plugin "curl"
#       proxy "proxy.isp.com:8080"
#       proxy_user "user"
#       proxy_password "password"
}
###############################################################################
# Audio Output ################################################################
#audio_output {
## type  "alsa"
## name  "My ALSA Device"
## device  "hw:0,0" # optional
## mixer_type      "hardware" # optional
## mixer_device "default" # optional
## mixer_control "PCM"  # optional
## mixer_index "0"  # optional
#}
###############################################################################
# Normalization automatic volume adjustments ##################################
#replaygain   "album"
#replaygain_preamp  "0"
#replaygain_missing_preamp "0"
#replaygain_limit  "yes"
#volume_normalization  "no"
###############################################################################
# Character Encoding ##########################################################
#filesystem_charset  "UTF-8"
###############################################################################
# Visualization
# audio_output {
#   type  "fifo"
#   name  "Visualizer feed"
#   path "/tmp/mpd.fifo"
#   format "44100:16:2"
# }
#+end_src

#+begin_src sh :noweb-ref mpd-post-tangle
mkdir -p ~/.config/mpd/playlists
#+end_src

** ncmpcpp

#+begin_src conf :tangle ~/.config/ncmpcpp/config :mkdirp yes
mpd_host = 127.0.0.1
mpd_port = 6600

browser_sort_mode = name
browser_sort_format = {%A - }{%t}|{%f} {(%l)}
song_columns_list_format = (6f)[green]{NE} (30)[]{a} (30)[white]{t} (30)[cyan]{b} (7f)[magenta]{l}

playlist_show_remaining_time = yes
playlist_shorten_total_times = yes
playlist_separate_albums = yes

browser_display_mode = columns
search_engine_display_mode = columns
playlist_editor_display_mode = columns

autocenter_mode = yes
centered_cursor = yes

default_place_to_search_in = database
user_interface = alternative

media_library_primary_tag = album_artist
cyclic_scrolling = yes

allow_for_physical_item_deletion = no

startup_screen = "playlist"
startup_slave_screen = "playlist"

locked_screen_width_part = 20
ask_for_locked_screen_width_part = no

clock_display_seconds = yes
display_volume_level = yes
display_bitrate = yes
display_remaining_time = yes

ignore_leading_the = yes
media_library_sort_by_mtime = no

enable_window_title = yes

external_editor = vim
use_console_editor = yes
# execute_on_song_change = "~/.config/ncmpcpp/art.sh"
#+end_src

** RSS
#+begin_src emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-feeds
    '(
      ;; programming
      ;; ("https://news.ycombinator.com/rss" hacker)
      ;; programming languages
      ;; ("https://www.reddit.com/r/golang.rss" golang)
      ;; cloud
      ;; ("https://www.reddit.com/r/aws.rss" aws)
  ))
  (setq-default elfeed-search-filter "@2-days-ago +unread")
  (setq-default elfeed-search-title-max-width 100)
  (setq-default elfeed-search-title-min-width 100))
#+end_src
** Mail
;; @TODO - move this to Mail.org

Mail on most systems is handled primarily via =mu4e= which is configured in my =Emacs.org= file.

*** Mbsync

=Mbsync= handles synchronization of IMAP inboxes.

#+begin_src conf :tangle ~/.mbsyncrc

# Global Channel configuration.
Create Both
Expunge Slave
Remove None
Sync All
SyncState *
CopyArrivalDate yes

#####################
# Work Email        #
#####################
IMAPAccount work
Host imap.gmail.com
User carwin@mobomo.com
PassCmd "gpg -q --for-your-eyes-only --no-tty -d ~/.password-store/mbsync/mobomomail.gpg"
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore work-remote
Account work

MaildirStore work-local
# Subfolders Verbatim
Path ~/Mail/Work/
Inbox ~/Mail/Work/inbox

Channel work-inbox
Master :work-remote:
Slave :work-local:inbox

Channel work-archive
Master :work-remote:"[Gmail]/All Mail"
Slave :work-local:archive

Channel work-sent
Master :work-remote:"[Gmail]/Sent Mail"
Slave :work-local:sent

Channel work-trash
Master :work-remote:"[Gmail]/Trash"
Slave :work-local:trash
Create Slave

# Get all the work channels together into a group.
Group work
Channel work-inbox
Channel work-archive
Channel work-sent
Channel work-trash

##########################
# Home Email             #
##########################
IMAPAccount home
Host mail.runbox.com
Port 993
User narwic@1000needles.net
PassCmd "gpg -q --for-your-eyes-only --no-tty -d ~/.password-store/mbsync/personalmail.gpg"
SSLType IMAPS
SSLVersions TLSv1.2
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore home-remote
Account home

MaildirStore home-local
Path ~/Mail/Home/
Inbox ~/Mail/Home/inbox/

Channel home-inbox
Master :home-remote:
Slave :home-local:inbox
Create Slave

Channel home-sent
Master :home-remote:"Sent"
Slave :home-local:sent
Create Slave

Channel home-archive
Master :home-remote:"Archives"
Slave :home-local:archive
Create Slave

Channel home-quarantine
Master :home-remote:"Quarantine"
Slave :home-local:quarantine
Create Slave

Channel home-trash
Master :home-remote:"Trash"
Slave :home-local:trash
Create Slave

Channel home-drafts
Master :home-remote:"Drafts"
Slave :home-local:drafts
Create Slave

Group home
Channel home-inbox
Channel home-archive
Channel home-sent
Channel home-trash
Channel home-quarantine
Channel home-drafts

#+end_src

*** msmtp config

=msmtp= is used by mu4e for sending mail instead of the basic smtp process. This is preferred because we have different contexts and emails from which we want to send mail and =msmtp= makes that much easier. See the sister configuration in Emacs.org.

#+begin_src sh :tangle ~/.msmtprc :tangle-mode (identity #o600)
defaults
tls on
tls_trust_file /etc/ssl/certs/ca-certificates.crt
logfile ~/.local/log/msmtp.log

# Home
account Home
auth on
host mail.runbox.com
port 587
from cy@carw.in
user narwic@1000needles.net
passwordeval "gpg2 -q --for-your-eyes-only --no-tty -d ~/.password-store/mbsync/personalmail.gpg"

# Work
account Work
auth on
host smtp.gmail.com
port 587
from carwin@mobomo.com
user carwin@mobomo.com
passwordeval "gpg2 -q --for-your-eyes-only --no-tty -d ~/.password-store/mbsync/mobomomail.gpg"

# account default : home
#+end_src

** vim

=Vim= configuration. Ol' trusty.

#+begin_src conf :tangle ~/.vimrc
" Plugin Management
" ------------------------------------------------------------------------------
" Check for a plugin manager, and if it doesn't exist, go get it.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'plasticboy/vim-markdown'
Plug 'pangloss/vim-javascript'
Plug 'cakebaker/scss-syntax.vim'
Plug 'evidens/vim-twig'
Plug 'morhetz/gruvbox', { 'as': 'gruvbox' }

" call these on-demand
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }

call plug#end()

" NerdTree plugin configuration
" ------------------------------------------------------------------------------
" Close vim if the only window left open is NERDTree.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Markdown plugin configurations
" ------------------------------------------------------------------------------
" Disable folding
let g:vim_markdown_folding_disabled = 1

" Lightline plugin configuration
" ------------------------------------------------------------------------------
" Set lightline colorscheme
let g:lightline = {
  \ 'colorscheme': 'seoul256',
  \ }

" Key Mappings
" ------------------------------------------------------------------------------
:let mapleader = ","
" Do escape with kj
inoremap kj <c-c>`^
" Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>
" Fast save a buffer
nmap <leader>ww :w!<cr>
" Fast save and quit buffer
nmap <leader>wq :wq!<cr>
" Fast quit
nmap <leader>q :q!<cr>
" New tab
map <leader>tn :tabnew<cr> " Tab only map <leader>to :tabonly<cr>
" Tab move
map <leader>tm :tabmove<cr>
" Tab next
nnoremap <leader>. :tabnext<CR>
" Tab previous
nnoremap <leader>' :tabprevious<CR>
" Toggle Paste mode (,p)
set pastetoggle=<leader>p
map <leader>p :set invpaste paste?<CR>
" Strip trailing whitespace (,ss)
nnoremap <leader>ss :call StripWhitespace()<CR>
" Toggle background transparency (C-T)
nnoremap <C-T> :call ToggleTransparent()<CR>
" Map <C-L> (redraw screen) to also turn off search highlighting until the next search.
nnoremap <C-L> :nohl<CR><C-L>

" General
" ------------------------------------------------------------------------------
set background=dark
"colorscheme gruvbox
"let g:colors_name='gruvbox'
set t_Co=256
syntax on
set autoindent " When opening a new line and no filetype-specific indenting is enabled, keep same indent.
set backspace=indent,eol,start " Allow backspacing over auto-indents, line breaks, and start of insert action
set colorcolumn=+1 " Highlight the column width border (+1 means highlight line 81 if textwidth is 80).
set confirm " Raise a dialog asking to save changed files.
set cursorline " Highlight the cursor line.
set encoding=utf-8 nobomb " Set encoding without BOM
set expandtab " Expand tabs into spaces.
set foldcolumn=4 " Indicate a fold with 4 columns.
set foldenable " Enable folds.
set foldlevel=2 " Fold / unfold this many.
set foldmethod=syntax " Set the fold method, see :help foldmethod.
set foldminlines=0 " Set a minimum value for closed folds.
set foldnestmax=3 " Set maximum nesting of folds for syntax method.
set history=1000 " Remember this many lines for the five history tables.
set hlsearch " Highlight searches (<C-L> to toggle).
set ignorecase " Use case insensitive search.
set incsearch " Highlight incrementally as search is typed.
set laststatus=2 " Always display the status line.
set magic " Enable extended regexes.
set mouse=a " Enable use of the mouse.
set noerrorbells " Don't make noises when doing bad things.
set nojoinspaces " Only insert single space after a '.', '?', and '!' with a join command.
set nostartofline " Don't reset cursor when moving around.
set notimeout ttimeout ttimeoutlen=200 " Quickly time out on keycodes, but never on mappings.
set nowrap " No visual wrapping.
set number " Display line numbers.
set scrolloff=3 " Keep this many lines above/below the cursor for context.
set shiftwidth=2 " Define columns to use for indenting (>> and <<).
set showcmd " Show partial commands in the last line of the screen.
set showmode " Show the current mode in the last line.
set showtabline=2 " Always display the tabline up top.
set smartcase " Use case sensitive search when using capitals.
set smartindent " Indent new lines intelligently.
set softtabstop=2 " Move the cursor two characters when typing Tab in insert mode.
set suffixes=.bak,.swp,.swo,.info,.aux,.log,.pdf,.bin,.dmg,.exe,.out,.inc,.pyd,.pyc,.dll " Ignore these extensions when completing filenames and encountering multiple matches.
set tabstop=2 " Define how many columns a Tab counts for.
set title " Set the window title to the filename.
set ttyfast " Improve redrawing.
set textwidth=80 " Set the max columns for text before breaking to a new line.
set undofile " Persistent undo.
set wildmenu " Better command-line completion.
set wrapscan " Searches wrap around end of file.

" Highlight redundant whitespace.
highlight RedundantSpaces ctermbg=red guibg=black
match RedundantSpaces /\s\+$\| \+\ze\t\|\t/

" Change the colorcolumn color.
highlight ColorColumn ctermbg=236

" Local directories
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
set undodir=~/.vim/undo

" Syntax
" ------------------------------------------------------------------------------
" HTML
let g:html_indent_tags = 'li\|p' " <li> and <p> tags are block elements

" ZSH
au BufRead,BufNewFile .zsh_rc,.functions,.commonrc set ft=zsh

" Sass
au BufRead,BufNewFile *.scss set filetype=scss.css
autocmd FileType scss set iskeyword+=-

" Make
autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0

" Markdown
au BufRead,BufNewFile *.m*down setlocal filetype=markdown
au BufRead,BufNewFile *.md setlocal textwidth=80
au BufRead,BufNewFile *.md setlocal spell

" Drupal
au BufRead,BufNewFile *.module set filetype=php
au BufRead,BufNewFile *.install set filetype=php
au BufRead,BufNewFile *.test set filetype=php
au BufRead,BufNewFile *.inc set filetype=php
au BufRead,BufNewFile *.profile set filetype=php
au BufRead,BufNewFile *.view set filetype=php
au BufRead,BufNewFile *.theme set filetype=php

" PHP
autocmd FileType php set omnifunc=phpcomplete#CompletePHP

" Functions
" ------------------------------------------------------------------------------
" Strip trailing whitespace
function! StripWhitespace ()
  let save_cursor = getpos('.')
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

" Toggle Transparency
let t:is_transparent = 1
function! ToggleTransparent()
  if t:is_transparent == 0
    hi Normal guibg=NONE ctermbg=NONE
    let t:is_transparent = 1
  else
    hi Normal guibg=#000000 ctermbg=16
    let t:is_transparent = 0
  endif
endfunction
#+end_src

Create =vim= directories.

#+begin_src  sh :noweb-ref vim-post-tangle
mkdir -p ~/.vim/undo
mkdir -p ~/.vim/backups
mkdir -p ~/.vim/swaps
#+end_src


Before this configuration file can be useful some directories and the =vim-plugin= manager needs to be put in the autoload directory.

#+begin_src sh :noweb-ref vim-post-tangle
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
#+end_src

** Firefox

Firefox and dark mode generally place well together, but when transitioning between pages, Firefox likes to flash a horrible full-white page that temporarily blinds anyone who gazes upon it. These tweaks solve that, but need to be generalized.

Before any of these tweaks will work, the setting =toolkit.legacyUserProfileCustomizations.stylesheets = true= must be set in =about:config=.

#+begin_src emacs-lisp
(defun cy/firefox-profile-dir ()
  (concat "~/.mozilla/firefox/" "8zl2ickg.default-release"))
#+end_src
*** userChrome.css

#+begin_src css :tangle ~/.mozilla/firefox/8zl2ickg.default-release/chrome/userChrome.css :mkdirp yes
@-moz-document url(chrome://browser/content/browser.xhtml)
{
  #main-window,
  browser[type="content-primary"],
  browser[type="content"],
  tabbrowser#content,
  #content,
  browser[type="content"] > html
  {
     background: #323234 !important;
  }

}
#+end_src

*** userContent.css

#+begin_src css :tangle ~/.mozilla/firefox/8zl2ickg.default-release/chrome/userContent.css :mkdirp yes
@charset "utf-8";
/* CSS Document */

@-moz-document url("about:newtab") {
body { background-color: #011326 !important;}
}

@-moz-document url(chrome://browser/content/browser.xhtml) {
browser[type="content-primary"] {background: #011326 !important}
}

#+end_src

** Application post-tangle actions.

#+begin_src sh :noweb yes :mkdirp yes :tangle ~/Projects/home/dotfiles/tangled/application-post-tangle.sh :shebang "#!/bin/bash" :tangle-mode (identity #o755)
<<mpd-post-tangle>>
<<qutebrowser-post-tangle>>
<<vim-post-tangle>>
#+end_src

* Systemd

This section is for storing all of my =Systemd= configurations and
timers. Org will tangle these out, but they won't be enabled or run
without intervention or some kind of post-save Emacs hook.

User level =Systemd= configurations live in =~/.config/systemd/user/=

** Random Wallpaper Timer

This systemd service sets a random desktop wallpaper fifteen minutes
after boot (when enabled) or whenever run.

#+begin_src shell :tangle ~/.config/systemd/user/wallpaper-changer.service
[Unit]
Description=Choose a random desktop wallpaper

[Service]
ExecStart=feh --bg-fill --randomize --recursive /home/narwic/Pictures/Wallpaper/big

[Install]
WantedBy=default.target
#+end_src

This systemd timer can be enabled to automatically change the random
wallpaper at a given interval.

#+begin_src shell :tangle ~/.config/systemd/user/wallpaper-changer.timer
#/etc/systemd/system/foo.timer
[Unit]
Description=Change the desktop wallpaper periodically

[Timer]
OnBootSec=15min
OnUnitActiveSec=15min

[Install]
WantedBy=timers.target

#+end_src

** Emacs

Emacs ships with a systemd unit (at least in Arch), so there's really
not much to tangle out. On a fresh system, one need simply enable the
service and start it.

#+begin_src sh :noweb-ref emacs-post-tangle
# systemctl --user enable --now emacs
# systemctl --user start emacs
#+end_src

** Post-tangle

#+begin_src sh :noweb yes :mkdirp yes :tangle ~/Projects/home/dotfiles/tangled/systemd-post-tangle.sh :shebang "#!/bin/bash" :tangle-mode (identity #o755)
<<emacs-post-tangle>>
#+end_src

* Other

I don't rightly remember what I added this for, but I think it has something to do with	Ethereum development.

#+begin_src conf :tangle ~/.soliumrc.json
{
  "extends": "solium:recommended"
  "plugins": ["security"],
  "rules": {
    "quotes": ["error", "double"],
    "indentation": ["error", 4],
    "linebreak-style": ["error", "unix"]
  }
}
#+end_src


* System Post-tangle
