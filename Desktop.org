#+title: Desktop Configuration

This is the primary desktop application configuration.

* System

Once =Arch Linux= is installed, a few things need to happen.

I typically set up my Arch system based on https://github.com/smfsh/arch-install.

** Packages

Core packages should be installed via =pacman=. It is assumed that most of the actual _core_ packages like =btrfs-progs= and =linux-headers= have already been installed at this point.

#+begin_src sh
sudo pacman -S \
  emacs \
  tmux \
  vim \
  i3-gaps \
  htop \
  wget \
  networkmanager \
  go \
  git \
  nvidia \
  docker \
#+end_src

To make =AUR= package management easier, first install =yay=.

#+begin_src  sh
cd ~;
git clone https://aur.archlinux.org/yay.git
cd yay;
makepkg -si;
cd ../;
rm -rf yay;
#+end_src

Now install AUR packages:

#+begin_src sh
yay -S \
  ack \
  aaxtomp3 \
  adobe-source-han-sans-jp-fonts \
  dunst \
  efibootmgr \
  feh \
  flac \
  gnupg \
  i3-gnome-pomodoro-git \
  iotop \
  polybar \
  lando \
  libreswan \
  mailcap \
  mdadm \
  mlocate \
  mpd \
  mpv \
  multimarkdown \
  mutt \
  ncmpcpp \
  network-manager-applet \
  networkmanager-l2tp \
  networkmanager-libreswan \
  nodejs \
  npm \
  ntfs-3g \
  nvm \
  openssh \
  org-protocol-emacsclient \
  p7zip \
  pass \
  pavucontrol \
  pulseaudio \
  qgis \
  qutebrowser \
  ranger \
  remmina \
  rofi \
  scrot \
  sshfs \
  spotify \
  ttf-mplus \
  tree \
  unrar \
  unzip \
  xorg-server \
  xorg-xdpyinfo \
  xorg-xev \
  xorg-xmodmap \
  xorg-xrdb \
  xrandr \
  zip
#+end_src

* Environment

** Profile

I use a =.profile= file because it's easy to source for my primary shell (=zsh=), works with =bash=, and login managers read it. This covers the absolute basics of my configuration in a lot of instances.

#+begin_src conf :tangle ~/.profile :mkdirp
EDITOR='vim'
VISUAL='vim'
DIFFPROG='vim'
LANG=en_US.UTF-8
LC_ALL=en_US.UTF-8
LC_COLLATE=C
RANGER_LOAD_DEFAULT_RC=false

# 256 Colors if we're using xterm.
[[ "$TERM" == "xterm" ]] && export TERM=xterm-256-color

# Add Ruby gems into path.
if which ruby >/dev/null && which gem >/dev/null; then
  PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi

# Source node version manager
[[ -s $HOME/.nvm/nvm.sh ]] && . $HOME/.nvm/nvm.sh
# source /usr/share/nvm/init-nvm.sh

# LS_COLORS='no=00;37:fi=00:di=00;33:ln=04;36:pi=40;33:so=01;35:bd=40;33;01:'
LS_COLORS='no=00;37:fi=00:di=00;33:ln=04;36:pi=40;33:so=01;35:bd=40;33;01:'

# Add personal binaries into PATH.
PATH="$HOME/.local/bin:$PATH"

# XDG Basedir specification, these for some reason don't go into user-dirs.dirs
XDG_CONFIG_HOME="$HOME/.config"
XDG_DATA_HOME="$HOME/.local/share"
XDG_CACHE_HOME="$HOME/.cache"
ZDOTDIR="$HOME/.zsh"
#+end_src

#+begin_src sh :noweb-ref environment-post-tangle
source ~/.profile
#+end_src

** XDG User Directories

XDG user directories define the paths for "well-known" directories.

These values can be queried while scripting using ~xdg-user-dir <var name>~ like so: ~xdg-user-dir DOWNLOAD~. That would output ~/home/<user>/Downloads~ using my configuration.

- =XDG_DESKTOP_DIR=: Desktop files. I don't actually use this but it seems like it's a basic necessity for certain things like =wine= applications.
- =XDG_DOWNLOAD_DIR=: The basic download directory for browsers and other applications.
- =XDG_TEMPLATES_DIR=: Another mostly unused value. The purpose of this directory is to house file templates so you can right click and add a specific type of file somewhere using a GUI file browser like =Thunar=.
- =XDG_PUBLICSHARE_DIR=: Pretty obvious. This is for files that should be public on the network. I don't think I've ever put something here.
- =XDG_DOCUMENTS_DIR=: User document storage. I typically symlink my OneDrive documents folder here.
- =XDG_MUSIC_DIR=: Where tunez come from.
- =XDG_PICTURES_DIR=: Photo storage. This one is another typical symlink to OneDrive.
- =XDG_VIDEOS_DIR=: Video storage.

#+begin_src conf :tangle ~/.config/user-dirs.dirs :mkdirp
XDG_DESKTOP_DIR="$HOME/"
XDG_DOWNLOAD_DIR="$HOME/Downloads"
XDG_TEMPLATES_DIR="$HOME/Templates"
XDG_PUBLICSHARE_DIR="$HOME/Public"
XDG_DOCUMENTS_DIR="$HOME/Documents"
XDG_MUSIC_DIR="$HOME/Audio/Music"
XDG_PICTURES_DIR="$HOME/Pictures"
XDG_VIDEOS_DIR="$HOME/Videos"
#+end_src

After this file is changed, user-dirs need to be updated via: ~xdg-user-dirs-update~.

#+begin_src sh :noweb-ref environment-post-tangle
xdg-user-dirs-update
#+end_src

** Shell

This is where shells are configured. I primarily use =zsh= but I've also used specific configs for =bash= and =fish= before.

**** ZSH

There's not much to say here. The primarily interesting thing here is the sourcing of =~/.profile= at the top.

#+begin_src conf :tangle ~/.zshrc :mkdirp yes
source ~/.profile
source ${ZDOTDIR:-$HOME}/prompt

setopt AUTO_CD # Don't make me use `cd`. You know what I wanted.
setopt NO_CASE_GLOB # Case insensitive globbing.

# Save history
HISTFILE=${ZDOTDIR:-$HOME}/.zhistory
setopt EXTENDED_HISTORY # timestamp history lines
SAVEHIST=5000
HISTSIZE=2000
setopt SHARE_HISTORY # share history across sessions
setopt APPEND_HISTORY # just keep adding to history
setopt INC_APPEND_HISTORY # write all the time, don't wait for shell to close
setopt HIST_EXPIRE_DUPS_FIRST # expire duplicates first
setopt HIST_IGNORE_DUPS # do not store duplicates
setopt HIST_FIND_NO_DUPS # ignore duplicates when searching
setopt HIST_REDUCE_BLANKS # remove blank lines from history
setopt HIST_VERIFY # be really sure when using !!

# Correction
setopt CORRECT
setopt CORRECT_ALL # Correct when using AUTO_CD

# Autocompletion
autoload -Uz compinit && compinit

# Fragment completion.
zstyle ':completion:*' list-suffixes zstyle ':completion:*' expand prefix suffix

# Tab completion
setopt MENU_COMPLETE
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}' # Autocomplete, case insensitive
zstyle ':completion:*' menu select  # Highlight on tab

# Color dirs
export LS_COLORS # I don't know why this is necessary here, but colors don't work without it.
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

alias ls='ls --color=auto'
alias 7zultra='7z a -t7z -m0=lzma2 -mx=0 -mfb=64 -md=32m -ms=on'
alias curlheaders='curl -I'
alias curlheadersproxy='curl --socks5 localhost:11080 -I'
alias scrot='scrot -s ~/foo.png && xclip -selection clipboard -t image/png ~/foo.png && rm ~/foo.png'
alias webcam='mplayer tv:// -tv driver=v412:width=1920:height=1080:device=/dev/video0 -fps 15 -vf screenshot'
alias dots='cd ~/Projects/Home/dotfiles'
alias work='cd ~/Projects/Work'
#+end_src

My custom prompt for =zsh=.

#+begin_src conf :tangle ~/.zsh/prompt :mkdirp yes

# Left prompt
export PS1="%F{223}%n%F{224}@%F{211}%m %F{179}%~%b%F{255} › "

# Right prompt
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
zstyle ':vcs_info:git:*' formats '%F{223}%b|%F{211}%r%f'
zstyle ':vcs_info:*' enable git

#+end_src

** Xorg

Until =Wayland= stops being terrible with the =nvidia= drivers, I'll continue using =X=.

*** Xresources

This file handles a variety of things, from shell colors to terminal emulator settings.

#+begin_src conf :tangle ~/.Xresources :mkdirp yes
!emacs*Background: DarkSlateGray
!emacs*Foreground: Wheat
!emacs*pointerColor: Orchid
!emacs*cursorColor: Orchid
!emacs*bitmapIcon: on
!emacs*font: fixed
!emacs.geometry: 80x25
Xcursor.size: 18

! ------------------------------------------------------------------------------
! Colour Configuration
! ------------------------------------------------------------------------------

! special
*.foreground:   #d8dee8
*.background:   #2f343f
*.cursorColor:  #b48ead

! black
*.color0  : #4b5262
*.color8  : #434a5a

! red
*.color  : #bf616a
*.color9  : #b3555e

! green
*.color2  : #a3be8c
*.color10 : #93ae7c

! yellow
*.color3  : #ebcb8b
*.color11 : #dbbb7b

! blue
*.color4  : #81a1c1
*.color12 : #7191b1

! magenta
*.color5  : #b48ead
*.color13 : #a6809f

! cyan
*.color6  : #89d0bA
*.color14 : #7dbba8

! white
*.color7  : #e5e9f0
*.color15 : #d1d5dc

! ------------------------------------------------------------------------------
! Font configuration
! ------------------------------------------------------------------------------

URxvt*font:    xft:M+ 1mn:regular:size=10
URxvt*boldFont:   xft:M+ 1mn:bold:size=10
URxvt*italicFont:  xft:M+ 1mn:italic:size=10
URxvt*boldItalicFont: xft:M+ 1mn:bold italic:size=10

! ------------------------------------------------------------------------------
! Xft Font Configuration
! ------------------------------------------------------------------------------

Xft.autohint: 0
Xft.lcdfilter: lcddefault
Xft.hintstyle: hintslight
Xft.hinting: 1
Xft.antialias: 1
Xft.rgba: rgb

! ------------------------------------------------------------------------------
! URxvt configs
! ------------------------------------------------------------------------------

! font spacing
URxvt*letterSpace:  0
URxvt.lineSpace:  0

! general settings
URxvt*saveline:   15000
URxvt*termName:   rxvt-256color
URxvt*iso14755:   false
URxvt*urgentOnBell:  true

! appearance
URxvt*depth:   24
URxvt*scrollBar:  false
URxvt*scrollBar_right: false
URxvt*internalBorder: 24
URxvt*externalBorder: 0
URxvt.geometry:   84x22

! perl extensions
URxvt.perl-ext-common: default,clipboard,url-select,keyboard-select,selection-clipboard,matcher

! macros for clipboard and selection
URxvt.copyCommand:  xclip -i -selection clipboard
URxvt.pasteCommand:  xclip -o -selection clipboard
URxvt.keysym.M-c:  perl:clipboard:copy
URxvt.keysym.M-v:  perl:clipboard:paste
URxvt.keysym.M-C-v:  perl:clipboard:paste_escaped
URxvt.keysym.M-Escape: perl:keyboard-select:activate
URxvt.keysym.M-s:  perl:keyboard-select:search
URxvt.keysym.M-u:  perl:url-select:select_next
URxvt.url-launcher:  firefox
URxvt.underlineURLs: true
URxvt*matcher.button: 1
URxvt.urlButton: 1
URxvt.underlineColor: #bf616a

! scroll one line
URxvt.keysym.Shift-Up:  command:\033]720;1\007
URxvt.keysym.Shift-Down: command:\033]721;1\007

! control arrow
URxvt.keysym.Control-Up: \033[1;5A
URxvt.keysym.Control-Down: \033[1;5B
URxvt.keysym.Control-Right: \033[1;5C
URxvt.keysym.Control-Left: \033[1;5D

! Copy/Pasta
URxvt.keysym.Shift-Control-V: eval:paste_clipboard
URxvt.keysym.Shift-Control-C: eval:selection_to_clipboard

! ------------------------------------------------------------------------------
! Rofi configs
! ------------------------------------------------------------------------------

rofi.color-enabled: true
rofi.color-window: #2e3440, #2e3440, #2e3440
rofi.color-normal: #2e3440, #d8dee9, #2e3440, #2e3440, #bf616a
rofi.color-active: #2e3440, #b48ead, #2e3440, #2e3440, #93e5cc
rofi.color-urgent: #2e3440, #ebcb8b, #2e3440, #2e3440, #ebcb8b
rofi.modi: run,drun,window,ssh

! ------------------------------------------------------------------------------
! Dmenu configs
! ------------------------------------------------------------------------------

dmenu.selforeground: #d8dee9
dmenu.background:    #2e3440
dmenu.selbackground: #bf616a
dmenu.foreground:    #d8dee9
#+end_src

After changing this file, it is necessary to reload it via: ~xrdb ~/.Xresources~

*** xsettingsd

=xsettingsd= acts as a minimal settings daemon for =Xorg= applications. It replaces similar daemons from desktop environments like =GNOME= and =XFCE= and enables the usage of a simple configuration file:

#+begin_src conf :tangle ~/.config/xsettingsd/xsettingsd.conf :mkdirp yes :noweb yes
Xft/Antialias 1
Xft/Hinting 1
Xft/HintStyle "hintslight"
Xft/RGBA "rgb"
#+end_src

** Git

Writes out my global =git= configuration.

#+begin_src shell :tangle ~/.gitconfig :mkdirp yes
[core]
  editor = vim
[user]
  name = Carwin Young
  email = carwin@mobomo.com # This gets changed to my personal account on a per repository basis.
  signingkey = D6FA5A05B721CCDE
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  frag = cyan bold
  meta = yellow bold
  new = green bold
  old = red bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  log = true
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com"]
  insteadOf = "gist:"
[url "git@heroku.com:"]
  insteadOf = "heroku:"
[alias]
  br = branch
  st = status
  co = checkout
  df = diff
  g  = grep -I
  rc = rank-contributors
  pr = pull --rebase
  lgp = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
  lg = log --show-signature
  cm = commit -S -m
	change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch -f --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f"
#+end_src

** Window Manager

*** i3

#+begin_src conf :tangle ~/.config/i3/config :mkdirp yes
# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!
set $mod Mod1
# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:monospace 8
exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork
exec --no-startup-id nm-applet
# Common app binds
bindsym Print exec scrot
# Use pactl to adjust volume in PulseAudio.
set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status
# Keybindings to control MPD
bindsym XF86AudioPlay exec "mpc toggle"
bindsym XF86AudioStop exec "mpc stop"
bindsym XF86AudioNext exec "mpc next"
# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod
# start a terminal
bindsym $mod+Return exec i3-sensible-terminal
# kill focused window
bindsym $mod+Shift+q kill
# start dmenu (a program launcher)
# bindsym $mod+d exec ~/Scripts/rofia.sh
bindsym $mod+d exec ~/.config/rofi/rofia.sh
# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right
# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right
# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right
# split in horizontal orientation
bindsym $mod+bar split h
# split in vertical orientation
bindsym $mod+minus split v
# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle
# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split
# toggle tiling / floating
bindsym $mod+Shift+space floating toggle
# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle
# focus the parent container
bindsym $mod+a focus parent
# focus the child container
#bindsym $mod+d focus child

# Define names for default workspaces for which we configure key bindings later on.
set $prim "primary"
set $comm "comm."
set $net "internet"
set $game "game"
set $mail "mail"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"
# Switch to workspace
bindsym $mod+1 workspace $prim
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10
bindsym $mod+c workspace $comm
bindsym $mod+n workspace $net
bindsym $mod+g workspace $game
bindsym $mod+m workspace $mail
# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $prim
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10
bindsym $mod+Shift+c move container to workspace $comm
bindsym $mod+Shift+n move container to workspace $net
bindsym $mod+Shift+g move container to workspace $game
bindsym $mod+Shift+m move container to workspace $mail
# reload the configuration file
bindsym $mod+Shift+Control+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"
# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}
bindsym $mod+r mode "resize"
# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
        colors {
        background #2f343f
        statusline #2f343f
        separator #4b5262
        # colour of border, background, and text
        focused_workspace       #2f343f #bf616a #d8dee8
        active_workspace        #2f343f #2f343f #d8dee8
        inactive_workspace      #2f343f #2f343f #d8dee8
        urgent_workspacei       #2f343f #ebcb8b #2f343f
    }
        status_command i3status
}
# window rules, you can find the window class using xprop
for_window [class=".*"] border pixel 1
for_window [class=feh|Pavucontrol] floating enable
for_window [class=zoom title="^Participants"] floating enable
for_window [class=zoom title="^Zoom Meeting"] floating enable
for_window [class=zoom title="^Zoom - Licensed Account"] floating enable
for_window [class=firefox] move --no-auto-back-and-forth container to workspace $net
for_window [class=Google-chrome window_role=browser] move container to workspace $net
for_window [class=Google-chrome window_role=pop-up] move container to workspace $comm
for_window [class=Signal] move container to workspace $comm
for_window [class=Emacs] move container to workspace $prim
# Autostart applications and other things
exec --no-startup-id ~/.fehbg &
exec --no-startup-id xsettingsd &
exec --no-startup-id ~/.screenlayout/home_triple.sh &
exec --no-startup-id dunst &
exec --no-startup-id picom -b
# colour of border, background, text, indicator, and child_border
client.focused              #bf616a #2f343f #d8dee8 #bf616a #ff91a4
client.focused_inactive     #2f343f #2f343f #d8dee8 #2f343f #2f343f
client.unfocused            #2f343f #2f343f #d8dee8 #2f343f #2f343f
client.urgent               #2f343f #2f343f #d8dee8 #2f343f #2f343f
client.placeholder          #2f343f #2f343f #d8dee8 #2f343f #2f343f
client.background           #2f343f
#+end_src

*** i3status

#+begin_src conf :tangle ~/.config/i3status/config :mkdirp yes
general {
        output_format = "i3bar"
        colors = false
        markup = pango
        interval = 5
        color_good = '#2f343f'
    color_degraded = '#ebcb8b'
    color_bad = '#ba5e57'
}

order += "load"
order += "cpu_temperature 0"
order += "disk /"
order += "disk /home"
order += "ethernet eno1"
# order += "wireless wlp5s0"
order += "volume master"
# order += "battery 1"
order += "tztime local"

load {
        format = "<span background='#f59335'>  %5min Load </span>"
}

cpu_temperature 0 {
        format = "<span background='#bf616a'>  %degrees °C </span>"
        path = "/sys/class/thermal/thermal_zone0/temp"
}

disk "/" {
        format = "<span background='#fec7cd'>  %free Free </span>"
}

disk "/home" {
        format = "<span background='#a1d569'>  %free Free </span>"
}

ethernet eno1 {
        format_up = "<span background='#88c0d0'>  %ip </span>"
        format_down = "<span background='#88c0d0'>  Disconnected </span>"
}

wireless wlp5s0 {
        format_up = "<span background='#b48ead'>  %essid </span>"
        format_down = "<span background='#b48ead'>  Disconnected </span>"
}

volume master {
        format = "<span background='#ebcb8b'>  %volume </span>"
        format_muted = "<span background='#ebcb8b'>  Muted </span>"
        device = "default"
        mixer = "Master"
        mixer_idx = 0
}

battery 1 {
  last_full_capacity = true
        format = "<span background='#a3be8c'>  %status %percentage </span>"
        format_down = "No Battery"
        status_chr = "Charging"
        status_bat = "Battery"
        status_unk = "Unknown"
        status_full = "Charged"
        path = "/sys/class/power_supply/BAT%d/uevent"
        low_threshold = 10
}

tztime local {
    format = "<span background='#81a1c1'> %time </span>"
    format_time = " %a %-d %b %H:%M"
}
general {
        output_format = "i3bar"
        colors = false
        markup = pango
        interval = 5
        color_good = '#2f343f'
    color_degraded = '#ebcb8b'
    color_bad = '#ba5e57'
}

#+end_src


** System Post-tangle
#+begin_src sh :noweb yes :mkdirp yes :tangle ~/Projects/Home/dotfiles/tangled/environment-post-tangle.sh :shebang "#!/bin/bash" :tangle-mode (identity #o755)
<<xorg-post-tangle>>
<<i3-post-tangle>>
#+end_src

* Applications

** Tmux

#+description: @todo I think tmux now supports using XDG_CONFIG_HOME so it can be stored in ~/.config/tmux/.

#+begin_src conf :tangle ~/.tmux.conf

# Key bindings
# ------------------------------------------------------------------------------
# Unbind the default Prefix
unbind C-b
# Bind <C-a> as the new Prefix
set -g prefix C-a
# Send the prefix when used with prefix+a for nested sessions
bind C-a send-prefix
# Split windows horizontally with |
bind | split-window -h
# Split windows vertically with -
bind - split-window -v
# Reload configuration with 'r'
unbind r
bind r source-file ~/.tmux.conf
# Move around panes with hjkl
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# Resize panes with HJKL
bind-key H resize-pane -L 5
bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key L resize-pane -R 5
# Vim keystrokes for select and copy (yank) to clipboard.
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"

# General Settings
# ------------------------------------------------------------------------------
# Be colorful
set -g default-terminal "screen-256color"

# Enable the mouse
set-option -g mouse on

# Set the base index to 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1

# Use Vi mode
set -g status-keys vi
setw -g mode-keys vi
set-window-option -g mode-keys vi

# No delay for escape key press.
set -sg escape-time 0
# Set delay for repeat key press.
set -sg repeat-time 600


# THEME
set -g status-bg colour236
set -g status-fg white
set -g status-justify centre
set-window-option -g window-status-current-style bg=colour167,fg=colour236,bold
set -g status-interval 60
set -g status-left-length 30
set -g status-left '#[fg=green](#S) #(whoami)'
set -g status-right '#[fg=yellow]#(curl "wttr.in/?format=3")#[default] #[fg=white]%H:%M#[default]'

#+end_src

** Dunst

Dunst is the notification system I use.

#+begin_src conf :tangle ~/.config/dunst/dunstrc :mkdirp yes
[global]
monitor = 0
follow = mouse
geometry = "250x50-24+24"
indicate_hidden = yes
shrink = no
separator_height = 0
padding = 16
horizontal_padding = 24
frame_width = 2
sort = no
idle_threshold = 120
font = M+ 1p 8
line_height = 4
markup = full
format = "<b>%s</b>\n%b"
alignment = left
show_age_threshold = 60
word_wrap = yes
ignore_newline = no
stack_duplicates = false
hide_duplicate_count = yes
show_indicators = no
icon_position = off
sticky_history = yes
history_length = 20
browser = /usr/bin/firefox -new-tab
always_run_script = true
title = Dunst
class = Dunst

[shortcuts]
close = ctrl+space
close_all = ctrl+shift+space
history = ctrl+grave
context = ctrl+shift+period

[urgency_low]
background = "#2f343f"
foreground = "#d8dee8"
timeout = 2

[urgency_normal]
background = "#2f343f"
foreground = "#d8dee8"
timeout = 4

[urgency_critical]
background = "#2f343f"
foreground = "#d8dee8"
frame_color = "#bf616a"
timeout = 0
#+end_src

** Rofi

#+begin_src conf :tangle ~/.config/rofi/config.rasi :mkdirp yes
configuration {
	theme: "~/.config/rofi/themes/slate.rasi";
}
#+end_src

*** Theme

#+begin_src css :tangle ~/.config/rofi/themes/slate.rasi :mkdirp yes
 * {
  background-color: #282C33;
  border-color: #2e343f;
  text-color: #8ca0aa;
  spacing: 0;
  width: 512px;
}

inputbar {
  border: 0 0 1px 0;
  children: [prompt,entry];
}

prompt {
  padding: 16px;
  border: 0 1px 0 0;
}

textbox {
  background-color: #2e343f;
  border: 0 0 1px 0;
  border-color: #282C33;
  padding: 8px 16px;
}

entry {
  padding: 16px;
}

listview {
  cycle: false;
  margin: 0 0 -1px 0;
  scrollbar: false;
}

element {
  border: 0 0 1px 0;
  padding: 16px;
}

element selected {
  background-color: #2e343f;
}

#+end_src

*** Launcher script

This is the script that =i3= uses to launch =Rofi= as a =dmenu= replacement.

#+begin_src sh :tangle ~/.config/rofi/rofia.sh :mkdirp yes
#!/bin/bash
# A messy & pathetic script to launch rofi with xrdb colours
getcolors () {
  FOREGROUND=$(xrdb -query | grep 'foreground:'| awk '{print $NF}')
  BACKGROUND=$(xrdb -query | grep 'background:'| awk '{print $NF}')
  BLACK=$(xrdb -query | grep 'color0:'| awk '{print $NF}')
  RED=$(xrdb -query | grep 'color1:'| awk '{print $NF}')
  GREEN=$(xrdb -query | grep 'color2:'| awk '{print $NF}')
  YELLOW=$(xrdb -query | grep 'color3:'| awk '{print $NF}')
  BLUE=$(xrdb -query | grep 'color4:'| awk '{print $NF}')
  MAGENTA=$(xrdb -query | grep 'color5:'| awk '{print $NF}')
  CYAN=$(xrdb -query | grep 'color6:'| awk '{print $NF}')
  WHITE=$(xrdb -query | grep 'color7:'| awk '{print $NF}')
}

# Only use the function above if the cache of paintee couldn't be found
if [ -e ~/.cache/paintee ]; then
  . ~/.cache/paintee
  else
  getcolors
fi

# Launch rofi with custom configuration
rofi -show drun -sidebar-mode \
-modi run,drun,window \
-hide-scrollbar true \
-bw 2 \
-lines 12 \
-padding 24 \
-width 280 \
-location 0 \
-columns 3 \
-font "Noto Sans 8" \
-color-enabled true \
-color-window "$BACKGROUND,$BLACK,$BACKGROUND" \
-color-normal "$BACKGROUND,$FOREGROUND,$BACKGROUND,$BACKGROUND,$BLUE" \
-color-active "$BACKGROUND,$MAGENTA,$BACKGROUND,$BACKGROUND,$BLUE" \
-color-urgent "$BACKGROUND,$YELLOW,$BACKGROUND,$BACKGROUND,$BLUE"
#+end_src

** mpv

Media player configuration. =mpv= replaces =mplayer=.

#+begin_src conf :tangle ~/.config/mpv/mpv.conf :mkdirp yes
##################
# video settings #
##################
# Start in fullscreen mode by default.
fs=no
# force starting with centered window
geometry=50%:50%
# Do not close the window on exit.
keep-open=yes
# Do not wait with showing the video window until it has loaded. (This will
# resize the window once video is loaded. Also always shows a window with
# audio.)
force-window=immediate
# Disable the On Screen Controller (OSC).
osc=no
# Keep the player window on top of all other windows.
ontop=yes
# Specify high quality video rendering preset (for --vo=gpu only)
# Can cause performance problems with some drivers and GPUs.
profile=gpu-hq
# Enable hardware decoding if available. Often, this does not work with all
# video outputs, but should work well with default settings on most systems.
# If performance or energy usage is an issue, forcing the vdpau or vaapi VOs
# may or may not help.
hwdec=auto
##################
# audio settings #
##################
# Specify default audio device. You can list devices with: --audio-device=help
# The option takes the device string (the stuff between the '...').
audio-device=alsa/default
# Do not filter audio to keep pitch when changing playback speed.
audio-pitch-correction=no
# Output 5.1 audio natively, and upmix/downmix audio with a different format.
audio-channels=5.1
# Disable any automatic remix, _if_ the audio output accepts the audio format.
# of the currently played file. See caveats mentioned in the manpage.
# (The default is "auto-safe", see manpage.)
audio-channels=auto
##################
# other settings #
##################
# Pretend to be a web browser. Might fix playback with some streaming sites,
# but also will break with shoutcast streams.
user-agent="Mozilla/5.0"
#+end_src

** mpd

Music player daemon configuration.

#+begin_src conf :tangle ~/.config/mpd/mpd.conf :mkdirp yes
# Read the user manual for documentation: http://www.musicpd.org/doc/user/
# Files and directories #######################################################
music_directory  "~/Audio/Music"
playlist_directory  "~/.config/mpd/playlists"
db_file   "~/.config/mpd/database"
log_file   "syslog"
pid_file   "~/.config/mpd/pid"
state_file   "~/.config/mpd/state"
sticker_file   "~/.config/mpd/sticker.sql"
###############################################################################
# General music daemon options ################################################
#user    "nobody"
#group    "nogroup"
bind_to_address  "0.0.0.0"
#bind_to_address  "~/.mpd/socket"
#port    "6600"
#log_level   "notice"
#restore_paused "no"
#save_absolute_paths_in_playlists "no"
#metadata_to_use "artist,album,title,track,name,genre,date,composer,performer,disc"
#metadata_to_use "+comment"
auto_update "yes"
auto_update_depth "3"
###############################################################################
# Symbolic link behavior ######################################################
follow_outside_symlinks "yes"
follow_inside_symlinks  "yes"
###############################################################################
# Zeroconf / Avahi Service Discovery ##########################################
#zeroconf_enabled  "yes"
#zeroconf_name   "Music Player @ %h"
###############################################################################
# Permissions #################################################################
#password                        "password@read,add,control,admin"
#default_permissions             "read,add,control,admin"
###############################################################################
# Database #######################################################################
#database {
#       plugin "proxy"
#       host "other.mpd.host"
#       port "6600"
#}
# Input #######################################################################
input {
        plugin "curl"
#       proxy "proxy.isp.com:8080"
#       proxy_user "user"
#       proxy_password "password"
}
###############################################################################
# Audio Output ################################################################
#audio_output {
## type  "alsa"
## name  "My ALSA Device"
## device  "hw:0,0" # optional
## mixer_type      "hardware" # optional
## mixer_device "default" # optional
## mixer_control "PCM"  # optional
## mixer_index "0"  # optional
#}
###############################################################################
# Normalization automatic volume adjustments ##################################
#replaygain   "album"
#replaygain_preamp  "0"
#replaygain_missing_preamp "0"
#replaygain_limit  "yes"
#volume_normalization  "no"
###############################################################################
# Character Encoding ##########################################################
#filesystem_charset  "UTF-8"
###############################################################################
# Visualization
# audio_output {
#   type  "fifo"
#   name  "Visualizer feed"
#   path "/tmp/mpd.fifo"
#   format "44100:16:2"
# }
#+end_src

#+begin_src sh :noweb-ref mpd-post-tangle
mkdir -p ~/.config/mpd/playlists
#+end_src

** ncmpcpp

#+begin_src conf :tangle ~/.config/ncmpcpp/config :mkdirp yes
mpd_host = 127.0.0.1
mpd_port = 6600

browser_sort_mode = name
browser_sort_format = {%A - }{%t}|{%f} {(%l)}
song_columns_list_format = (6f)[green]{NE} (30)[]{a} (30)[white]{t} (30)[cyan]{b} (7f)[magenta]{l}

playlist_show_remaining_time = yes
playlist_shorten_total_times = yes
playlist_separate_albums = yes

browser_display_mode = columns
search_engine_display_mode = columns
playlist_editor_display_mode = columns

autocenter_mode = yes
centered_cursor = yes

default_place_to_search_in = database
user_interface = alternative

media_library_primary_tag = album_artist
cyclic_scrolling = yes

allow_for_physical_item_deletion = no

startup_screen = "playlist"
startup_slave_screen = "playlist"

locked_screen_width_part = 20
ask_for_locked_screen_width_part = no

clock_display_seconds = yes
display_volume_level = yes
display_bitrate = yes
display_remaining_time = yes

ignore_leading_the = yes
media_library_sort_by_mtime = no

enable_window_title = yes

external_editor = vim
use_console_editor = yes
# execute_on_song_change = "~/.config/ncmpcpp/art.sh"
#+end_src

** mutt

Email with mutt.

#+begin_src conf :tangle ~/.config/mutt/muttrc :mkdirp yes

# Paths ------------------------------------------------------------------------
set folder 						= ~/.mail												# mailbox location
set alias_file	            = ~/.config/mutt/alias		# where to store aliases
set header_cache           = ~/.config/mutt/cache/headers	# where to store headers
set message_cachedir 	    = ~/.config/mutt/cache/bodies	# where to store bodies
set certificate_file	    = ~/.config/mutt/certificates	# where to store certs
set mailcap_path           = ~/.config/mutt/mailcap            # entries for filetypes
set tmpdir                 = ~/.config/mutt/tmp                # where to keep temp files
set signature              = ~/.config/mutt/sig                # my signature file

# Basic Options ----------------------------------------------------------------
set wait_key		= no         # shut up, mutt
set mbox_type		= Maildir    # mailbox type
set timeout 		= 3          # idle time before scanning
set mail_check	        = 0          # minimum time between scans
unset move                          # gmail does that
set delete                          # don't ask, just do
unset confirmappend                 # don't ask, just do
set quit                            # don't ask, just do
unset mark_old	                     # read/new is good enough for me
set beep_new                        # bell on new mails
set pipe_decode                     # strip headers and eval mimes when piping
set thorough_search                 # strip headers and eval mimes before searching

# Sidebar ----------------------------------------------------------------------
# Should the Sidebar be shown?
set sidebar_visible = yes
# How wide should the Sidebar be in screen columns?
# Note: Some characters, e.g. Chinese, take up two columns each.
set sidebar_width = 25
# Should the mailbox paths be abbreviated?
set sidebar_short_path = yes
# When abbreviating mailbox path names, use any of these characters as path
# separators.  Only the part after the last separators will be shown.
# For file folders '/' is good.  For IMAP folders, often '.' is useful.
set sidebar_delim_chars = '/.'
# If the mailbox path is abbreviated, should it be indented?
set sidebar_folder_indent = yes
# Indent mailbox paths with this string.
set sidebar_indent_string = ' '
# Make the Sidebar only display mailboxes that contain new, or flagged,
# mail.
set sidebar_new_mail_only = no
# Any mailboxes that are whitelisted will always be visible, even if the
# sidebar_new_mail_only option is enabled.
# sidebar_whitelist '/home/user/mailbox1'
# sidebar_whitelist '/home/user/mailbox2'
# When searching for mailboxes containing new mail, should the search wrap
# around when it reaches the end of the list?
set sidebar_next_new_wrap = no
# The character to use as the divider between the Sidebar and the other Mutt
# panels.
# Note: Only the first character of this string is used.
set sidebar_divider_char = ' | '
# Enable extended buffy mode to calculate total, new, and flagged
# message counts for each mailbox.
set mail_check_stats
# Display the Sidebar mailboxes using this format string.
# set sidebar_format = '%B%?F? [%F]?%* %?N?%N/?%S'
set sidebar_format = "%B %* [%?N?%N / ?%S]"
# Sort the mailboxes in the Sidebar using this method:
#       count    - total number of messages
#       flagged  - number of flagged messages
#       new      - number of new messages
#       path     - mailbox path
#       unsorted - do not sort the mailboxes
set sidebar_sort_method = 'unsorted'
# FUNCTIONS - shown with an example mapping
# Move the highlight to the previous mailbox
bind index,pager \Cp sidebar-prev
# Move the highlight to the next mailbox
bind index,pager \Cn sidebar-next
# Open the highlighted mailbox
bind index,pager \Co sidebar-open
# Move the highlight to the previous page
# This is useful if you have a LOT of mailboxes.
bind index,pager <F3> sidebar-page-up
# Move the highlight to the next page
# This is useful if you have a LOT of mailboxes.
bind index,pager <F4> sidebar-page-down
# Move the highlight to the previous mailbox containing new, or flagged,
# mail.
bind index,pager <F5> sidebar-prev-new
# Move the highlight to the next mailbox containing new, or flagged, mail.
bind index,pager <F6> sidebar-next-new
# Toggle the visibility of the Sidebar.
bind index,pager B sidebar-toggle-visible
# COLORS - some unpleasant examples are given
# Note: All color operations are of the form:
#       color OBJECT FOREGROUND BACKGROUND
# Color of the current, open, mailbox
# Note: This is a general Mutt option which colors all selected items.
color indicator cyan black
# Color of the highlighted, but not open, mailbox.
color sidebar_highlight black color8
# Color of the divider separating the Sidebar from Mutt panels
color sidebar_divider color8 black
# Color to give mailboxes containing flagged mail
color sidebar_flagged red black
# Color to give mailboxes containing new mail
color sidebar_new green black
# Status Bar -------------------------------------------------------------------
set status_chars = " *%A"
set status_format = "---[ Folder: %f ]---[%r%m messages%?n? (%n new)?%?d? (%d to delete)?%?t? (%t tagged)? ]---%>-%?p?( %p postponed )?---"
# Header Options ---------------------------------------------------------------
ignore *																			# ignore all headers
unignore from: to: cc: bcc: date: subject:		# show only these
unhdr_order *																	# some distros order things by default
hdr_order from: to: cc: bcc: date: subject:		# and in this order
# Account Settings -------------------------------------------------------------
# Default inbox
set spoolfile = "+carwinyoung-gmail.com/INBOX"
# Alternate email addresses.
# Mailboxes to show in the sidebar
mailboxes "Personal =================" \
          +carwinyoung-gmail.com/INBOX \
					+carwinyoung-gmail.com/archive \
					+carwinyoung-gmail.com/sent \
					+carwinyoung-gmail.com/drafts \
          "Mobomo ======================" \
          +carwin-mobomo.com/INBOX \
          +carwin-mobomo.com/sales \
          +carwin-mobomo.com/archive \
          +carwin-mobomo.com/sent \
          +carwin-mobomo.com/drafts \

# Other special folders
set mbox			= "+carwinyoung-gmail.com/archive"
set postponed = "+carwinyoung-gmail.com/drafts"
# Index View Options -----------------------------------------------------------
set date_format = "%m/%d"
set index_format = "[%Z]  %D  %-20.20F  %s"
set sort = threads                          # like gmail
set sort_aux = reverse-last-date-received   # like gmail
set uncollapse_jump                         # don't collapse on an unread message
set sort_re                                 # thread based on regex
set reply_regexp = "^(([Rr][Ee]?(\[[0-9]+\])?: *)?(\[[^]]+\] *)?)*"
# Index Key Bindings -----------------------------------------------------------
bind index gg         first-entry
bind index G          last-entry
bind index R          group-reply
bind index <tab>      sync-mailbox
bind index <space>    collapse-thread
# Ctrl-R mark all as read
macro index \Cr "T~U<enter><tag-prefix><clear-flag>N<untag-pattern>.<enter>" "mark all messages as read"
# Sync email
macro index O "<shell-escape>offlineimap<enter>"            "run offlineimap to sync all mail"
macro index o "<shell-escape>offlineimap -qf INBOX<enter>"  "run offlineimap to sync inbox"
# Saner copy/move dialogs
macro index C "<copy-message>?<toggle-mailboxes>"     "copy a message to a mailbox"
macro index M "<save-message>?<toggle-mailboxes>"     "move a message to a mailbox"
# Sidebar Navigation -----------------------------------------------------------
bind index,pager <down>     sidebar-next
bind index,pager <up>       sidebar-prev
bind index,pager <right>    sidebar-open
# Pager View Options -----------------------------------------------------------
set pager_index_lines = 10        # number of index lines to show
set pager_context = 3             # number of context lines to show
set pager_stop                    # don't go to next message automatically
set menu_scroll                   # scroll in menus
set tilde                         # show tildes like in vim
unset markers                     # no ugly plus signs
set quote_regexp = "^( {0,4}[>|:#%]| {0,4}[a-z0-9]+[>|]+)+"
alternative_order text/plain text/enriched text/html
# Pager Key Bindings -----------------------------------------------------------
bind pager k previous-line
bind pager j next-line
bind pager gg top
bind pager G bottom
bind pager R group-reply
# View attachments properly.
bind attach <return> view-mailcap
# Compose View Options ---------------------------------------------------------
set realname = "Carwin Young"                 # who am i?
set envelope_from                             # which from?
set sig_dashes                                # dashes before sig
set edit_headers                              # show headers when composing
set fast_reply                                # skip to compose when replying
set askcc                                     # ask for CC:
set fcc_attach                                # save attachments with the body
unset mime_forward                            # forward attachments as part of body
set forward_format = "Fwd: %s"                # format of subject when forwarding
set forward_decode                            # decode when forwarding
set attribution = "On %d, %n wrote:"          # format of quoting header
set reply_to                                  # reply to Reply to: field
set reverse_name                              # reply to whomever it was to
set include                                   # include message in replies
set forward_quote                             # include message in forwards
set editor = "vim"                            # Use terminal Vim to compose email
auto_view text/html
folder-hook 'carwinyoung-gmail.com'  set from="carwinyoung@gmail.com"
folder-hook 'carwin-mobomo.com'  set from="carwin@mobomo.com"
#+end_src

*** Secret Management

Handle secrets used by =mutt=. I've been using =Seahorse= to manage a keyring, but I don't really like it. I don't have a good solution, and my passwords are a mess.

#+begin_src python :tangle ~/.config/mutt/offlineimap.py :mkdirp yes
'''
gkgetsecret.py
This provides a handful of functions for retrieving secrets from GNOME Keyring
using the libsecret API. See the documentation for each function
'''

from gi import require_version
require_version('Secret', '1')
from gi.repository import Secret

def get_pw_from_desc(pw_desc) :
    '''
    This function returns the password for an item in the default keyring
    which contains the description provided.
    Use this function if you created a password using the dialogue in Seahorse
    '''
    # Get service
    service = Secret.Service.get_sync(Secret.ServiceFlags.LOAD_COLLECTIONS)

    # Get default keyring
    keyring = Secret.Collection.for_alias_sync(service, "default", \
          Secret.CollectionFlags.NONE, None)

    # Get keyring items
    items = keyring.get_items()

    # Load secrets
    Secret.Item.load_secrets_sync(items)

    # Loop through items, find the matching one and return its password
    password = None
    for item in items :
        if item.get_label() == pw_desc :
            password = item.get_secret().get_text()
            break

    # Close connection
    service.disconnect()

    return password

def get_pw_from_attrs(*attr_val_pairs) :
    '''
    This function returns the password for an item in the default keyring
    which contains all of the attribute value pairs provided as arguments.
    Use this function if you created a password using the secret-tool command
    or another such program that interfaces with libsecret
    '''
    # Check the list of attr-val pairs is present and contains an even number
    # of elements
    if attr_val_pairs == () :
        raise TypeError("get_pw_from_attrs() at least 1 attribute-value pair " \
                "must be supplied")
    if len(attr_val_pairs) % 2 != 0 :
        raise TypeError("get_pw_from_attrs() incomplete attribute-value " \
                "pair was supplied")

    # Get service
    service = Secret.Service.get_sync(Secret.ServiceFlags.LOAD_COLLECTIONS)

    # Get default keyring
    keyring = Secret.Collection.for_alias_sync(service, "default", \
          Secret.CollectionFlags.NONE, None)

    # Get keyring items
    items = keyring.get_items()

    # Load secrets
    Secret.Item.load_secrets_sync(items)

    # Loop through items, find the one which contains all supplied attr_val
    # pairs and return its password
    password = None
    for item in items :
        attrs = item.get_attributes()
        match = True
        for x in range(0, len(attr_val_pairs), 2) :
            key = attr_val_pairs[x]
            value = attr_val_pairs[x + 1]
            try :
                if attrs[key] != value :
                    match = False
                    break
            except KeyError :
                match = False
                break
        if match :
            password = item.get_secret().get_text()
            break

    # Close connection
    service.disconnect()

    return password

def get_val_from_attrs(attr, *attr_val_pairs) :
    '''
    This function returns the value for a given attribute. The first item
    found that contains that attribute will be the one that is used. To ensure
    that the correct item is chosen, any number of attribute-value pairs can
    be optionally supplied as arguments and only the item which contains all
    of those attr-val pairs (along with the main attr) will be used.
    Use this function if you created a password using the secret-tool command
    or another such program that interfaces with libsecret
    '''
    # Check the list of attr-val pairs contains an even number of elements
    # if it exists
    if attr_val_pairs != () :
        if len(attr_val_pairs) % 2 != 0 :
            raise TypeError("get_val_from_attrs() incomplete attribute-value " \
                    "pair was supplied")

    # Get service
    service = Secret.Service.get_sync(Secret.ServiceFlags.LOAD_COLLECTIONS)

    # Get default keyring
    keyring = Secret.Collection.for_alias_sync(service, "default", \
          Secret.CollectionFlags.NONE, None)

    # Get keyring items
    items = keyring.get_items()

    # Loop through items, find the one which contains the supplied attribute
    # (plus any attr_val pairs if specified) and return that attribute's
    # value
    attr_value = None
    for item in items :
        attrs = item.get_attributes()
        try :
            attrs[attr]
        except KeyError :
            continue
        match = True
        for x in range(0, len(attr_val_pairs), 2) :
            key = attr_val_pairs[x]
            value = attr_val_pairs[x + 1]
            try :
                if attrs[key] != value :
                    match = False
                    break
            except KeyError :
                match = False
                break
        if match :
            attr_value = attrs[attr]
            break

    # Close connection
    service.disconnect()

    return attr_value

#+end_src

*** Mailcap

#+begin_src conf :tangle ~/.config/mutt/mailcap
# MS Word documents
#application/msword; ~/.config/mutt/view_attachment.sh %s "-" 'document-viewer'

# Images
image/jpg; ~/.config/mutt/view_attachment.sh %s jpg
image/jpeg; ~/.config/mutt/view_attachment.sh %s jpg
image/pjpeg; ~/.config/mutt/view_attachment.sh %s jpg
image/png; ~/.config/mutt/view_attachment.sh %s png
image/gif; ~/.config/mutt/view_attachment.sh %s gif

# PDFs
application/pdf; ~/.config/mutt/view_attachment.sh %s pdf

# HTML
# text/html; ~/.config/mutt/view_attachment.sh %s html
text/html; w3m -I %{charset} -T text/html; copiousoutput;

# Unidentified files
application/octet-stream; ~/.mutt/view_attachment.sh %s "-"
#+end_src

*** View Attachment

This script handles email attachments for =mutt=. It's possible this will need to be set as executable via: ~chmod +x $HOME/.config/mutt/view_attachment.sh~

#+begin_src sh :tangle ~/.config/mutt/view_attachment.sh
#!/bin/bash
#
# Author:  Eric Gebhart
#
# Purpose:  To be called by mutt as indicated by .mailcap to handle mail attachments.
#
# Function: Copy the given file to a temporary directory so mutt
#           Won't delete it before it is read by the application.
#
#           Along the way, discern the file type or use the type
#           That is given.
#
#           Finally use 'open' or 'open -a' if the third argument is
#           given.
#
#
# Arguments:
#
#     $1 is the file
#     $2 is the type - for those times when file magic isn't enough.
#                      I frequently get html mail that has no extension
#                      and file can't figure out what it is.
#
#                      Set to '-' if you don't want the type to be discerned.
#                      Many applications can sniff out the type on their own.
#                      And they do a better job of it too.
#
#                      Open Office and MS Office for example.
#
#     $3 is open with.  as in open -a 'open with this .app' foo.xls
#
# Examples:  These are typical .mailcap entries which use this program.
#
#     Image/JPEG; /Users/vdanen/.mutt/view_attachment %s
#     Image/PNG; /Users/vdanen/.mutt/view_attachment %s
#     Image/GIF; /Users/vdanen/.mutt/view_attachment %s
#
#     Application/PDF; /Users/vdanen/.mutt/view_attachment %s
#
#         #This HTML example passes the type because file doesn't always work and
#         #there aren't always extensions.
#
#     text/html; /Users/vdanen/.mutt/view_attachment %s html
#
#         # If your Start OpenOffice.org.app is spelled with a space like this one, <--
#         # then you'll need to precede the space with a \ .  I found that too painful
#         # and renamed it with an _.
#
#     Application/vnd.ms-excel; /Users/vdanen/.mutt/view_attachment %s "-" '/Applications/OpenOffice.org1.1.2/Start_OpenOffice.org.app'
#     Application/msword; /Users/vdanen/.mutt/view_attachment %s "-" '/Applications/OpenOffice.org1.1.2/Start_OpenOffice.org.app'
#
#
# Debugging:  If you have problems set debug to 'yes'.  That will cause a debug file
#             be written to /tmp/mutt_attach/debug so you can see what is going on.
#
# See Also:  The man pages for open, file, basename
#

# the tmp directory to use.
tmpdir="/tmp/mutt_attach"

# the name of the debug file if debugging is turned on.
debug_file=$tmpdir/debug

# debug.  yes or no.
#debug="no"
debug="yes"

type=$2
open_with=$3

# make sure the tmpdir exists.
mkdir -p $tmpdir

# clean it out.  Remove this if you want the directory
# to accumulate attachment files.
rm -f $tmpdir/*

# Mutt puts everything in /tmp by default.
# This gets the basic filename from the full pathname.
filename=`basename $1`

# get rid of the extenson and save the name for later.
file=`echo $filename | cut -d"." -f1`

if [ $debug = "yes" ]; then
    echo "1:" $1 " 2:" $2 " 3:" $3 > $debug_file
    echo "Filename:"$filename >> $debug_file
    echo "File:"$file >> $debug_file
    echo "===========================" >> $debug_file
fi

# if the type is empty then try to figure it out.
if [ -z $type ]; then
    file  $1
    type=`file -bi $1 | cut -d"/" -f2`
fi

# if the type is '-' then we don't want to mess with type.
# Otherwise we are rebuilding the name.  Either from the
# type that was passed in or from the type we discerned.
if [ $type = "-" ]; then
    newfile=$filename
else
    newfile=$file.$type
fi

newfile=$tmpdir/$newfile

# Copy the file to our new spot so mutt can't delete it
# before the app has a chance to view it.
cp $1 $newfile

if [ $debug = "yes" ]; then
    echo "File:" $file "TYPE:" $type >> $debug_file
    echo "Newfile:" $newfile >> $debug_file
    echo "Open With:" $open_with >> $debug_file
fi

# If there's no 'open with' then we can let preview do it's thing.
# Otherwise we've been told what to use.  So do an open -a.

if [ -z $open_with ]; then
    xdg-open $newfile
else
    xdg-open $newfile
fi
#+end_src

** OfflineImap

As you might expect, =offlineimap= creates a local database of =IMAP= data for viewing emails offline.

#+begin_src conf :tangle ~/.config/offlineimap/config :mkdirp yes
[general]
ui = ttyui
accounts = CarwinYoung, Mobomo
pythonfile=~/.config/mutt/offlineimap.py
fsync = False

[Account CarwinYoung]
localrepository = CarwinYoung-Local
remoterepository = CarwinYoung-Remote
postsynchook = notmuch new

[Repository CarwinYoung-Local]
type = Maildir
localfolders = ~/.mail/carwinyoung-gmail.com
nametrans = lambda folder: {'drafts':   '[Gmail]/Drafts',
                            'sent':     '[Gmail]/Sent Mail',
                            'flagged':  '[Gmail]/Starred',
                            'trash':    '[Gmail]/Trash',
                            'archive':  '[Gmail]/All Mail',
                            }.get(folder, folder)

[Repository CarwinYoung-Remote]
maxconnections = 1
type = Gmail
ssl = yes
remoteuser = carwinyoung@gmail.com
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
remotepasseval = get_pw_from_desc("Personal gmail password for mutt")
realdelete = no
nametrans = lambda folder: {'[Gmail]/Drafts':     'drafts',
                            '[Gmail]/Sent Mail':  'sent',
                            '[Gmail]/Starred':    'flagged',
                            '[Gmail]/Trash':      'trash',
                            '[Gmail]/All Mail':   'archive',
                            }.get(folder, folder)
folderfilter = lambda folder: folder not in ['[Gmail]/Trash',
                                             '[Gmail]/Important',
                                             '[Gmail]/Spam'
                                            ]





[Account Mobomo]
localrepository = Mobomo-Local
remoterepository = Mobomo-Remote
postsynchook = notmuch new

[Repository Mobomo-Local]
type = Maildir
localfolders = ~/.mail/carwin-mobomo.com
nametrans = lambda folder: {'drafts':     '[Gmail]/Drafts',
                            'sent':       '[Gmail]/Sent Mail',
                            'sales':      'Sales',
                            'flagged':    '[Gmail]/Starred',
                            'trash':      '[Gmail]/Trash',
                            'archive':    '[Gmail]/All Mail',
                           }.get(folder, folder)


[Repository Mobomo-Remote]
maxconnections = 1
type = Gmail
ssl = yes
remoteuser = carwin@mobomo.com
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
remotepasseval = get_pw_from_desc("Mobomo gmail password for mutt")
realdelete = no
nametrans = lambda folder: {'[Gmail]/Drafts':     'drafts',
                            '[Gmail]/Sent Mail':  'sent',
                            'Sales':              'sales',
                            '[Gmail]/Starred':    'flagged',
                            '[Gmail]/Trash':      'trash',
                            '[Gmail]/All Mail':   'archive',
                           }.get(folder, folder)
folderfilter = lambda folder: folder not in ['[Gmail]/Trash',
                                             '[Gmail]/Important',
                                             '[Gmail]/Spam'
                                            ]
#+end_src

** vim

=Vim= configuration. Ol' trusty.

#+begin_src conf :tangle ~/.vimrc
" Plugin Management
" ------------------------------------------------------------------------------
" Check for a plugin manager, and if it doesn't exist, go get it.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'plasticboy/vim-markdown'
Plug 'pangloss/vim-javascript'
Plug 'cakebaker/scss-syntax.vim'
Plug 'evidens/vim-twig'
Plug 'morhetz/gruvbox', { 'as': 'gruvbox' }

" call these on-demand
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }

call plug#end()

" NerdTree plugin configuration
" ------------------------------------------------------------------------------
" Close vim if the only window left open is NERDTree.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Markdown plugin configurations
" ------------------------------------------------------------------------------
" Disable folding
let g:vim_markdown_folding_disabled = 1

" Lightline plugin configuration
" ------------------------------------------------------------------------------
" Set lightline colorscheme
let g:lightline = {
  \ 'colorscheme': 'seoul256',
  \ }

" Key Mappings
" ------------------------------------------------------------------------------
:let mapleader = ","
" Do escape with kj
inoremap kj <c-c>`^
" Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>
" Fast save a buffer
nmap <leader>ww :w!<cr>
" Fast save and quit buffer
nmap <leader>wq :wq!<cr>
" Fast quit
nmap <leader>q :q!<cr>
" New tab
map <leader>tn :tabnew<cr> " Tab only map <leader>to :tabonly<cr>
" Tab move
map <leader>tm :tabmove<cr>
" Tab next
nnoremap <leader>. :tabnext<CR>
" Tab previous
nnoremap <leader>' :tabprevious<CR>
" Toggle Paste mode (,p)
set pastetoggle=<leader>p
map <leader>p :set invpaste paste?<CR>
" Strip trailing whitespace (,ss)
nnoremap <leader>ss :call StripWhitespace()<CR>
" Toggle background transparency (C-T)
nnoremap <C-T> :call ToggleTransparent()<CR>
" Map <C-L> (redraw screen) to also turn off search highlighting until the next search.
nnoremap <C-L> :nohl<CR><C-L>

" General
" ------------------------------------------------------------------------------
set background=dark
"colorscheme gruvbox
"let g:colors_name='gruvbox'
set t_Co=256
syntax on
set autoindent " When opening a new line and no filetype-specific indenting is enabled, keep same indent.
set backspace=indent,eol,start " Allow backspacing over auto-indents, line breaks, and start of insert action
set colorcolumn=+1 " Highlight the column width border (+1 means highlight line 81 if textwidth is 80).
set confirm " Raise a dialog asking to save changed files.
set cursorline " Highlight the cursor line.
set encoding=utf-8 nobomb " Set encoding without BOM
set expandtab " Expand tabs into spaces.
set foldcolumn=4 " Indicate a fold with 4 columns.
set foldenable " Enable folds.
set foldlevel=2 " Fold / unfold this many.
set foldmethod=syntax " Set the fold method, see :help foldmethod.
set foldminlines=0 " Set a minimum value for closed folds.
set foldnestmax=3 " Set maximum nesting of folds for syntax method.
set history=1000 " Remember this many lines for the five history tables.
set hlsearch " Highlight searches (<C-L> to toggle).
set ignorecase " Use case insensitive search.
set incsearch " Highlight incrementally as search is typed.
set laststatus=2 " Always display the status line.
set magic " Enable extended regexes.
set mouse=a " Enable use of the mouse.
set noerrorbells " Don't make noises when doing bad things.
set nojoinspaces " Only insert single space after a '.', '?', and '!' with a join command.
set nostartofline " Don't reset cursor when moving around.
set notimeout ttimeout ttimeoutlen=200 " Quickly time out on keycodes, but never on mappings.
set nowrap " No visual wrapping.
set number " Display line numbers.
set scrolloff=3 " Keep this many lines above/below the cursor for context.
set shiftwidth=2 " Define columns to use for indenting (>> and <<).
set showcmd " Show partial commands in the last line of the screen.
set showmode " Show the current mode in the last line.
set showtabline=2 " Always display the tabline up top.
set smartcase " Use case sensitive search when using capitals.
set smartindent " Indent new lines intelligently.
set softtabstop=2 " Move the cursor two characters when typing Tab in insert mode.
set suffixes=.bak,.swp,.swo,.info,.aux,.log,.pdf,.bin,.dmg,.exe,.out,.inc,.pyd,.pyc,.dll " Ignore these extensions when completing filenames and encountering multiple matches.
set tabstop=2 " Define how many columns a Tab counts for.
set title " Set the window title to the filename.
set ttyfast " Improve redrawing.
set textwidth=80 " Set the max columns for text before breaking to a new line.
set undofile " Persistent undo.
set wildmenu " Better command-line completion.
set wrapscan " Searches wrap around end of file.

" Highlight redundant whitespace.
highlight RedundantSpaces ctermbg=red guibg=black
match RedundantSpaces /\s\+$\| \+\ze\t\|\t/

" Change the colorcolumn color.
highlight ColorColumn ctermbg=236

" Local directories
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
set undodir=~/.vim/undo

" Syntax
" ------------------------------------------------------------------------------
" HTML
let g:html_indent_tags = 'li\|p' " <li> and <p> tags are block elements

" ZSH
au BufRead,BufNewFile .zsh_rc,.functions,.commonrc set ft=zsh

" Sass
au BufRead,BufNewFile *.scss set filetype=scss.css
autocmd FileType scss set iskeyword+=-

" Make
autocmd FileType make setlocal noexpandtab

" Markdown
au BufRead,BufNewFile *.m*down setlocal filetype=markdown
au BufRead,BufNewFile *.md setlocal textwidth=80
au BufRead,BufNewFile *.md setlocal spell

" Drupal
au BufRead,BufNewFile *.module set filetype=php
au BufRead,BufNewFile *.install set filetype=php
au BufRead,BufNewFile *.test set filetype=php
au BufRead,BufNewFile *.inc set filetype=php
au BufRead,BufNewFile *.profile set filetype=php
au BufRead,BufNewFile *.view set filetype=php
au BufRead,BufNewFile *.theme set filetype=php

" PHP
autocmd FileType php set omnifunc=phpcomplete#CompletePHP

" Functions
" ------------------------------------------------------------------------------
" Strip trailing whitespace
function! StripWhitespace ()
  let save_cursor = getpos('.')
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

" Toggle Transparency
let t:is_transparent = 1
function! ToggleTransparent()
  if t:is_transparent == 0
    hi Normal guibg=NONE ctermbg=NONE
    let t:is_transparent = 1
  else
    hi Normal guibg=#000000 ctermbg=16
    let t:is_transparent = 0
  endif
endfunction
#+end_src

Create =vim= directories.

#+begin_src  sh :noweb-ref vim-post-tangle
mkdir -p ~/.vim/undo
mkdir -p ~/.vim/backups
mkdir -p ~/.vim/swaps
#+end_src

Before this configuration file can be useful some directories and the =vim-plugin= manager needs to be put in the autoload directory.

#+begin_src sh :noweb-ref vim-post-tangle
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
#+end_src

** Taskwarrior

Now that I have =Emacs= and it's super great Agenda, I don't often use =Taskwarrior= anymore, but it's still a useful tool, and I may end up picking it up again.

#+begin_src conf :tangle ~/.taskrc
# [Created by task 2.5.1 6/3/2020 15:38:53]
# Taskwarrior program configuration file.
# For more documentation, see http://taskwarrior.org or try 'man task', 'man task-color',
# 'man task-sync' or 'man taskrc'

# Here is an example of entries that use the default, override and blank values
#   variable=foo   -- By specifying a value, this overrides the default
#   variable=      -- By specifying no value, this means no default
#   #variable=foo  -- By commenting out the line, or deleting it, this uses the default

# Use the command 'task show' to see all defaults and overrides

# Files
data.location=~/.task

# Color theme (uncomment one to use)
#include /usr/share/doc/task/rc/light-16.theme
#include /usr/share/doc/task/rc/light-256.theme
#include /usr/share/doc/task/rc/dark-16.theme
#include /usr/share/doc/task/rc/dark-256.theme
#include /usr/share/doc/task/rc/dark-red-256.theme
#include /usr/share/doc/task/rc/dark-green-256.theme
#include /usr/share/doc/task/rc/dark-blue-256.theme
#include /usr/share/doc/task/rc/dark-violets-256.theme
#include /usr/share/doc/task/rc/dark-yellow-green.theme
#include /usr/share/doc/task/rc/dark-gray-256.theme
#include /usr/share/doc/task/rc/dark-gray-blue-256.theme
#include /usr/share/doc/task/rc/solarized-dark-256.theme
#include /usr/share/doc/task/rc/solarized-light-256.theme
#include /usr/share/doc/task/rc/no-color.theme

taskd.certificate=\/home\/narwic\/.task\/narwic.cert.pem
taskd.key=\/home\/narwic\/.task\/narwic.key.pem
taskd.ca=\/home\/narwic\/.task\/ca.cert.pem
taskd.server=sector6.1000needles.net:53589
# taskd.credentials=Personal\/narwic\/c8101054-0d12-4c41-995a-693230b96085
taskd.credentials=Personal\/narwic\/0b7a353e-8137-4c9e-8621-699471e2ec95
taskd.trust=ignore hostname
#+end_src

** Qutebrowser

=Qutebrowser= is a keyboard based web browser with vim-like keybindings.

#+begin_src python :tangle ~/.config/qutebrowser/config.py :mkdirp yes

# Custom keybindings
config.unbind('d') # Don't close window when d is pressed
config.bind('yy', 'yank') # Yank
config.bind(',.', 'tab-next') # Next tab
config.bind(",'", 'tab-prev') # Previous tab
# Vim-style movement keys in command mode
config.bind('<Ctrl-j>', 'completion-item-focus --history next', mode='command')
config.bind('<Ctrl-k>', 'completion-item-focus --history prev', mode='command')
# Play YouTube videos with mpv
config.bind(",m", "spawn mpv {url}")
config.bind(",M", "hint links spawn mpv {hint-url}")

# Add a hint group for scrollable elements
config.set(
  'hints.selectors',
  {'scrollable': ['.custom-scrollbar']},
  pattern='*://10.0.1.43:3000/*',
)
config.bind(';c', 'hint scrollable')
# Add a hint group for jumping to links in the current tab.
config.set(
  'hints.selectors',
  {'jump': ['a']},
  pattern='*://*',
)
config.bind(';j', 'hint jump')

# Fonts & Colors
c.fonts.web.family.standard = "M+ 1m"
c.fonts.web.family.serif = "Bitsream Vera Serif"
c.fonts.web.family.sans_serif = "M+ 1mn"
c.fonts.web.family.fixed = "Dank Mono"
c.fonts.statusbar = "18px M+ 1m"

# Save sessions for next time.
c.auto_save.session = True
c.session.lazy_restore = True

# Be smooth
c.scrolling.smooth = True

# Dark mode (doesn't work everywhere)
c.colors.webpage.darkmode.enabled = True

# Automatically turn on insert mode when a loaded page focuses a text field
c.input.insert_mode.auto_load = True

# Edit fields in Emacs with Ctrl+E
c.editor.command = ["emacsclient", "+{line}:{column}", "{file}"]

# Don't allow autoplay media
c.content.autoplay = False

# Only first-party cookies
c.content.cookies.accept = "no-unknown-3rdparty"

# Don't tell sites where we came from
c.content.headers.referer = "same-domain"

# Hint settings
c.fonts.hints = "bold 20pt monospace"

# Allow viewing pdfs in qutebrowser via pdfjs
c.content.pdfjs = True

# Expose only public interface via webrtc
c.content.webrtc_ip_handling_policy = "default-public-interface-only"

with config.pattern('*://*.youtube.com/watch') as p:
    p.content.javascript.enabled = True
    p.content.autoplay = False

#+end_src

#+begin_src  conf :tangle ~/.config/qutebrowser/quickmarks :mkdirp yes
lp https://lastpass.com/?ac=1&lpnorefresh=1
gh https://github.com/ $0
type https://www.keybr.com/login/MOma70tyO6
sab 10.0.1.43:8085
grafana 10.0.1.43:3000
comics 10.0.1.43:2202/ubooquity
sonarr 10.0.1.43:8989
lidarr 10.0.1.43:8686
radarr 10.0.1.43:7878
portainer 10.0.1.43:9000
pi1 10.0.1.43:192
pi2 10.0.1.43:193
znc 10.0.1.43:4378
#+end_src

#+begin_src conf :tangle ~/.local/share/applications/qute_home.desktop
[Desktop Entry]
Type=Application
Version=1.0
Name=Qutebrowser (Home)
Comment=Qutebrowser instance for home.
Exec=qutebrowser --basedir .config/qutebrowser/profile_home
#+end_src

#+begin_src conf :tangle ~/.local/share/applications/qute_work.desktop
[Desktop Entry]
Type=Application
Version=1.0
Name=Qutebrowser (Work)
Comment=Qutebrowser instance for work.
Exec=qutebrowser --basedir .config/qutebrowser/profile_work
#+end_src

#+begin_src sh :noweb-ref qutebrowser-post-tangle
mkdir -p ~/.config/qutebrowser/profile_home/config;
mkdir -p ~/.config/qutebrowser/profile_work/config;

ln -s ~/.config/qutebrowser/config.py ~/.config/qutebrowser/profile_home/config/config.py
ln -s ~/.config/qutebrowser/quickmarks ~/.config/qutebrowser/profile_home/config/quickmarks

ln -s ~/.config/qutebrowser/config.py ~/.config/qutebrowser/profile_work/config/config.py
ln -s ~/.config/qutebrowser/quickmarks ~/.config/qutebrowser/profile_work/config/quickmarks
#+end_src

** Application post-tangle actions.

#+begin_src sh :noweb yes :mkdirp yes :tangle ~/Projects/Home/dotfiles/tangled/application-post-tangle.sh :shebang "#!/bin/bash" :tangle-mode (identity #o755)
<<mpd-post-tangle>>
<<qutebrowser-post-tangle>>
<<vim-post-tangle>>
#+end_src

* Systemd

This section is for storing all of my =Systemd= configurations and timers. Org will tangle these out, but they won't be enabled or run without intervention or some kind of post-save Emacs hook.

User level =Systemd= configurations live in =~/.config/systemd/user/=

** Emacs

Emacs ships with a systemd unit (at least in Arch), so there's really not much to tangle out. On a fresh system, one need simply enable the service and start it.

#+begin_src sh :noweb-ref emacs-post-tangle
systemctl --user enable --now emacs
systemctl --user start emacs
#+end_src

** OneDrive Sync

On Arch, I use the AUR package =onedrive-abraunegg= to sync my OneDrive files to my local machine. These end up in =~/OneDrive= and get symlinked around.

First, set up a service that can be run as needed.

#+begin_src conf :tangle ~/.config/systemd/user/onedrive-sync.service
[Unit]
Description=Syncs OneDrive

[Service]
ExecStart=/usr/bin/onedrive --synchronize

[Install]
WantedBy=default.target
#+end_src

Now, set up a timer to run the service hourly.

#+begin_src conf :tangle ~/.config/systemd/user/onedrive-sync.timer
[Unit]
Description=Run OneDrive synchronization hourly

[Timer]
OnBootSec=15min
OnUnitActiveSec=1h

[Install]
WantedBy=timers.target
#+end_src

Once these files have been tangled out, some kind of action needs to enable the timer via: ~systemctl --user enable onedrive-sync.timer~

#+begin_src sh :noweb-ref onedrive-post-tangle
# systemctl --user enable onedrive-sync.timer
# systemctl --user start onedrive-sync.timer
#+end_src

** Post-tangle

#+begin_src sh :noweb yes :mkdirp yes :tangle ~/Projects/Home/dotfiles/tangled/systemd-post-tangle.sh :shebang "#!/bin/bash" :tangle-mode (identity #o755)
<<emacs-post-tangle>>
<<onedrive-post-tangle>>
#+end_src
