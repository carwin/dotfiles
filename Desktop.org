#+title: Desktop Configuration
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh   :tangle-mode (identity #o555) :shebang #!/bin/bash
#+PROPERTY: header-args:conf :tangle-mode (identity #o555)

* Table of Contents
:PROPERTIES:
:TOC:      :include siblings :depth 2 :force (nothing) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#principles-and-goals][Principles and Goals]]
- [[#system-specific-settings][System-specific Settings]]
- [[#system-packages][System Packages]]
- [[#environment][Environment]]
  - [[#profile][.profile]]
  - [[#xdg-user-directories][XDG User Directories]]
  - [[#shell-configurations][Shell Configurations]]
  - [[#x-window-system][X Window System]]
  - [[#git][Git]]
  - [[#window-manager][Window Manager]]
- [[#applications][Applications]]
  - [[#dunst][Dunst]]
  - [[#rofi][Rofi]]
  - [[#tmux][Tmux]]
  - [[#ranger][ranger]]
  - [[#mpv][mpv]]
  - [[#mpd][mpd]]
  - [[#ncmpcpp][ncmpcpp]]
  - [[#vim][vim]]
  - [[#firefox][Firefox]]
- [[#systemd-scripts][Systemd Scripts]]
  - [[#random-wallpaper-timer][Random Wallpaper Timer]]
  - [[#emacs][Emacs]]
- [[#post-tangle-targets][Post-tangle Targets]]
  - [[#packages][Packages]]
  - [[#environment][Environment]]
  - [[#system][System]]
  - [[#applications][Applications]]
  - [[#emacs-centric][Emacs-centric]]
- [[#general-todos][General @TODOs]]
:END:

This file documents the configuration and general setup of my desktop
systems. No matter which machine is being used, things like the
environment, shell, X configuration and keybindings should all remain
more or less the same.

* Principles and Goals

- Turn all common application configs into /literate configuration/ files, Ã la [[https://en.wikipedia.org/wiki/Literate_programming][Donald Knuth]].
- Really understand the configuration being described.
- Where possible, use variables to describe common paths, avoiding references to static paths: e.g.: ~$XDG_CONFIG_HOME~ and ~$HOME~.
- Provide shell scripts to retrieve or set any dependencies laid out in configuration.
- Present content to myself as if I had amnesia and forgot how my configuration worked.

* System-specific Settings

This file relies on settings and functions configured in
=./Systems.org=, which provides ='cy-system=. ='cy-system= gets evaluated on
init and is called by =./Emacs.org=.

='cy-system= provides the Elisp function ~cy/system-settings-get~, which
is used in this file to retrieve variables for values that differ
between systems like DPI, resolution, etc...

#+name: system-settings
#+begin_src emacs-lisp :session system-settings
(load-file (concat user-emacs-directory "cy-system-settings.el"))
#+end_src

#+name: get-setting
#+begin_src emacs-lisp :var name="nil" :session system-settings
(cy/system-settings-get (intern name))
#+end_src

* System Packages

/The majority of this document assumes that Arch Linux is installed
and functioning./

Once =Arch Linux= is installed, a few things need to happen.

I typically set up my Arch system based on
https://github.com/smfsh/arch-install.

Core packages should be installed via =pacman=. It is assumed that
most of the actual _core_ packages like =btrfs-progs= and =linux-headers=
have already been installed at this point.

#+begin_src sh :noweb-ref pacman-install
sudo pacman -Syyu && sudo pacman -S \
                          awesome-terminal-fonts \
                          docker \
                          htop \
                          emacs \
                          git \
                          go \
                          networkmanager \
                          nfs-utils \
                          nvidia \
                          openssh \
                          rxvt-unicode \
                          termite \
                          tmux \
                          vim \
                          wget \
                          xclip \
#+end_src

To make =AUR= package management easier, first install =yay=.

#+begin_src sh :noweb-ref arch-install-yay
cd ~/;
git clone https://aur.archlinux.org/yay.git
cd yay;
makepkg -si;
cd ../;
rm -rf yay;
#+end_src

Now install =AUR= packages:

#+begin_src sh :noweb-ref yay-install
yay -S \
    ack \
    aaxtomp3 \
    adobe-source-han-sans-jp-fonts \
    anki \
    bind-tools \
    dbschema \
    discord \
    dunst \
    elm-bin \
    elm-language-server \
    efibootmgr \
    feh \
    flac \
    fortune-mod \
    gnupg \
    i3-gaps \
    i3lock-color \
    ibus-anthy \
    iotop \
    polybar \
    lando \
    libreswan \
    lxdm-gtk3 \
    ly \
    mailcap \
    mdadm \
    mlocate \
    mpd \
    mpv \
    multimarkdown \
    mu \
    ncmpcpp \
    network-manager-applet \
    networkmanager-l2tp \
    networkmanager-libreswan \
    ngrok \
    nodejs \
    noto-fonts \
    npm \
    ntfs-3g \
    nvm \
    org-protocol-emacsclient \
    p7zip \
    pass \
    pavucontrol \
    picom-git \
    pulseaudio \
    python-dotty-dict \
    python-hjson \
    python-matplotlib \
    python-numpy \
    qgis \
    ranger \
    rofi \
    rustup \
    scrot \
    sqlite \
    sshfs \
    syncthing \
    ttf-mplus \
    tree \
    unrar \
    unzip \
    urxvt-perls \
    w3m \
    wee-slack \
    xautolock \
    xfce-polkit \
    xorg-server \
    xorg-xdpyinfo \
    xorg-xev \
    xorg-xauth \
    xorg-xhost \
    xorg-xmodmap \
    xorg-xrdb \
    xorg-xrandr \
    xpra \
    zip
#+end_src

Create the =$HOME/.local/share/fonts= directory and download the fonts
that get used throughout these configurations.

| M+               | https://github.com/coz-m/MPLUS_FONTS                |
| M+ For Powerline | https://github.com/larzconwell/mplus-powerline-font |
| Dank Mono        | https://philpl.gumroad.com/l/dank-mono              |

/Dank Mono is a paid font, and there's no convenient way to script the/
/installation. This is something that needs to be worked out, but local/
/sharing of the font via =SyncThing= should do in a pinch./

#+begin_src sh :noweb-ref get-preferred-fonts
mkdir -p $HOME/.local/share/fonts;
git clone git@github.com:coz-m/MPLUS_FONTS.git $HOME/.local/share/fonts/MPLUS_FONTS;
git clone https://github.com/larzconwell/mplus-powerline-font/blob/master/mplus%20for%20Powerline.ttf $HOME/.local/share/fonts/mplus-for-powerline;
#+end_src


* Environment

Configure the basic environment upon which everything operates and
depends. This is where all the most basic configurations, environment
variables, etc... live.

** =.profile=

I use a =.profile= file because it's easy to source for my primary shell
(=zsh=), works with =bash=, and login managers read it.  This covers the
absolute basics of my configuration in a lot of instances.

This file follows the stylistic convention of using ~export~ rather than
simply declaring variables.  Though this is mostly a preference, there
are instances where using ~export~ may save some headaches.

~export~ sets the =$PATH= variable explicitly and sets the environment
variables for child processes, though this isn't strictly necessary in
most cases, because =$PATH= would already be set for the current
environment when a child process runs.  You should expect dragons in
cases where a script using this =POSIX= ~export~ built-in to set a
variable calls another script which, by some mechanism, ceases to
export that variable, in such a case it likely is no longer available
in the parent environment either.

While using the ~export~ built-in doesn't prevent the shooting of one's
own foot in that very specific way, it will prevent some scoping
problems for the life of the shell.

Now that the preamble is out of the way, declare the basics like =LANG=
and =EDITOR=:

#+begin_src conf :noweb-ref dot-profile
export DIFFPROG="vim"
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_COLLATE=C
export RANGER_LOAD_DEFAULT_RC=false
export EDITOR="emacsclient --alternate-editor=vim -nw"
export VISUAL="emacsclient --alternate-editor=vim"
export ALTERNATE_EDITOR="emacs -Q"
#+end_src

Set the terminal to report 256 Colors if we're using xterm.

#+begin_src conf :noweb-ref dot-profile
[[ "$TERM" == "xterm" ]] && export TERM=xterm-256-color
#+end_src


Ensure ~/usr/local/bin~ is in =$PATH=.

#+begin_src conf :noweb-ref dot-profile
export PATH="$PATH:/usr/local/bin"
#+end_src

Ensure ~$HOME/.local/bin~ is in =$PATH=, =Python= likes to use this
directory.

#+begin_src conf :noweb-ref dot-profile
export PATH="$PATH:$HOME/.local/bin"
#+end_src

Add =Ruby= gems into =$PATH= and, if =rvm= is installed, somewhere we expect
it to be, source it and load =rvm= into a shell session as a function.

For Emacs' "dumb" =$TERM= don't do anything but export a variable to
silence complaints.  =rvm= doesn't play nicely with dumb terms.

#+begin_src conf :noweb-ref dot-profile
case $TERM in
  dumb*)
    # Emacs inferior shell is dumb
    # source $(rvm default do rvm env --path)
    export RVM_SILENCE_PATH_MISMATCH_CHECK_FLAG=1
    ;;
  xterm*)
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
    ;;
esac
#+end_src

Add =Rust= crates into =$PATH= if the =rustup= binary is found.

#+begin_src conf :noweb-ref dot-profile
if which rustup >/dev/null; then
  export PATH="$PATH:$HOME/.cargo/bin"
fi
#+end_src

Add PHP's =composer= globals into =$PATH=.

#+begin_src conf :noweb-ref dot-profile
export PATH="$PATH:$HOME/.config/composer/vendor/bin"
#+end_src

Add NVIDIA's [[https://wiki.archlinux.org/title/GPGPU#CUDA][CUDA]] stuff into =$PATH=.

#+begin_src conf :noweb-ref dot-profile
export PATH="$PATH:/opt/cuda/bin"
#+end_src

Source the Node Version Manager (=nvm=) in much the same way as =rvm=, above.

#+begin_src conf :noweb-ref dot-profile
[[ -s $HOME/.nvm/nvm.sh ]] && . $HOME/.nvm/nvm.sh
[[ -s /usr/share/nvm/init-nvm.sh ]] && . /usr/share/nvm/init-nvm.sh
#+end_src

Define the color values used by the =ls= command when it is invoked with
the ~--color~ argument.

#+begin_src conf :noweb-ref dot-profile
# LS_COLORS='no=00;37:fi=00:di=00;33:ln=04;36:pi=40;33:so=01;35:bd=40;33;01:'
LS_COLORS='no=00;37:fi=00:di=00;33:ln=04;36:pi=40;33:so=01;35:bd=40;33;01:'
#+end_src

Set environment variables related to input methods. These environment
variables are required to make =ibus= and =ibus-anthy= work for inputting
text in Japanese and Korean in particular.

#+begin_src conf :noweb-ref dot-profile
export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus
#+end_src

Specify the directories that fall within the [[https://wiki.archlinux.org/title/XDG_Base_Directory][XDG Base Directory]]
specification.

These, for some reason, don't go into ~user-dirs.dirs~.  Many
applications have yet to switch over to using these locations, but
someday this will be the standard.

 - ~XDG_CONFIG_HOME~ :: Analogous to ~/etc~.
 - ~XDG_DATA_HOME~ :: Analogous to ~/usr/share~.
 - ~XDG_CACHE_HOME~ :: Analogous to ~/var/cache~.
 - ~XDG_STATE_HOME~ :: Analogous to ~/var/lib~.
 - ~XDG_RUNTIME_DIR~ :: Used for non-essential, user specific data files like sockets, named pipes, etc...

#+begin_src conf :noweb-ref dot-profile
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_STATE_HOME="$HOME/.local/lib"
export XDG_RUNTIME_HOME="$HOME/.local/run"
#+end_src

Now, collect all the bits of =.profile= into a single file.

#+begin_src conf :noweb yes :tangle (concat (cy/system-settings-get 'user/home) "/.profile")
<<dot-profile>>
#+end_src

** XDG User Directories

XDG user directories define the paths for "well-known" directories.

These values can be queried while scripting using ~xdg-user-dir
<varname>~ like so:

#+begin_src sh
> xdg-user-dir DOWNLOAD
#+end_src

Using the configurations from this document, that would output:

#+begin_src sh
> /home/<user>/Downloads
#+end_src

 - =XDG_DESKTOP_DIR= :: Desktop files. This is mostly ignored, but it seems like a basic necessity for certain things like =Wine= applications.
 - =XDG_DOWNLOAD_DIR= :: The basic download directory for browsers and other applications.
 - =XDG_TEMPLATES_DIR= :: Another mostly unused value. The purpose of this directory is to house file templates which can be used by right clicking in Desktop Managers and choosing an available template from the contextual menu.
 - =XDG_PUBLICSHARE_DIR= :: This directory is for files that should be public on the network.
 - =XDG_DOCUMENTS_DIR= :: User document storage.
 - =XDG_MUSIC_DIR= :: Where tunez come from.
 - =XDG_PICTURES_DIR= :: Photo storage.
 - =XDG_VIDEOS_DIR= :: Video storage.


#+begin_src conf :tangle (concat (cy/system-settings-get 'config/dir) "/user-dirs.dirs")
XDG_DESKTOP_DIR="$HOME/"
XDG_DOWNLOAD_DIR="$HOME/Downloads"
XDG_TEMPLATES_DIR="$HOME/Templates"
XDG_PUBLICSHARE_DIR="$HOME/Public"
XDG_DOCUMENTS_DIR="$HOME/Documents"
XDG_MUSIC_DIR="$HOME/Audio/Music"
XDG_PICTURES_DIR="$HOME/Pictures"
XDG_VIDEOS_DIR="$HOME/Videos"
#+end_src

After this file is changed, user-dirs need to be updated via: ~xdg-user-dirs-update~.

#+begin_src sh :noweb-ref update-xdg-user-dirs
xdg-user-dirs-update
#+end_src

** Shell Configurations

*** ZSH

**** =.zshenv=
Create a ~/home/<user>/.zshenv~ file to point invocations of =zsh= to look
for configuration files within ~$XDG_CONFIG_HOME~. This is non-standard,
but likely will be some day.

#+begin_quote
~.zshenv~ is sourced on all invocations of the shell unless the ~-f~
option is set. It should contain commands to set the command search
path, plus other important environment variables. ~.zshenv~ should not
contain commands that produce output or assume the shell is attached
to a tty.

-- Zsh Manual

#+end_quote

To keep the environment and command search paths standard between
shells, I prefer to keep as much as I can in ~~/.profile~ and simply
~source~ it at the top of ~/.zshenv~.

The call chain works like this:

 1. =zsh= is invoked.
 2. =zsh= finds ~.zshenv~ and begins parsing.
 3. Within ~.zshenv~, =zsh= is told to source ~~/.profile~ which contains the environment variable declaration for ~$XDG_CONFIG_HOME~.
 4. After sourcing ~~/.profile~, =zsh= now looks in ~${XDG_CONFIG_HOME}/zsh/~ for a ~.zprofile~, then a ~.zshrc~ -- loading them in that order.

The =dotsloc= environment variable is also defined here, rather than
in ~.zshrc~, to make it available to non-interactive instances of the
shell.  This is useful for jumping to the dotfiles directory from a
script.

#+begin_src conf :tangle (concat (cy/system-settings-get 'user/home) "/.zshenv")
# emulate sh -c 'source ~/.profile'
source ${HOME}/.profile
ZDOTDIR=${XDG_CONFIG_HOME}/zsh/
DOTDIR=${HOME}/Projects/home/dotfiles
#+end_src

**** =.zprofile=

~.zprofile~ is sourced before ~.zshrc~ and is meant to act as an
alternative to ~.zlogin~ (both are sourced for login shells). Neither
~.zprofile~ nor ~.zlogin~ should be used to change the shell environment
at all and instead be used to set the terminal type and run a series
of external commands like =fortune=.

#+begin_src conf :tangle (concat (cy/system-settings-get 'config/dir) "/zsh/.zprofile")
#export TERM="xterm-256color"
shopt -s expand_aliases
#+end_src

#+end_src

**** =.zshrc=

~.zshrc~ is where everything interesting happens. This file is sourced
on every interactive invocation of =zsh=.

First, load up the =zsh= plugin manager =Antigen=.

#+begin_src conf :noweb-ref zshrc
source ${ZDOTDIR:-$HOME/.zsh}/custom/plugins/antigen/antigen.zsh
#+end_src

This configuration uses =oh-my-zsh= as a plugin backend, which I very
much dislike. Other options like =prezto= seem just as heavy as
=oh-my-zsh= though.

Set a theme, and pull in any required plugins.

| Antigen bundle / theme           | Desc.                                                                                | Link |
|----------------------------------+--------------------------------------------------------------------------------------+------|
| =git=                              | Comes with a lot of aliases, I mainly use the stash features.                        | [[https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git][Link]] |
| =zdharma/fast-syntax-highlighting= | Faster, more configurable syntax highlighting than zsh-users/zsh-syntax-highlighting | [[https://github.com/zdharma/fast-syntax-highlighting][Link]] |
| =spaceship-prompt=                 | A pretty nice prompt theme. To eventually be replaced with Carwin's custom prompt.   | [[https://github.com/spaceship-prompt/spaceship-prompt][Link]] |

The =spaceship-prompt= comes with some built-in configurable options which can be found [[https://github.com/spaceship-prompt/spaceship-prompt/blob/master/docs/options.md][here]].

#+begin_src conf :noweb-ref zshrc
antigen use oh-my-zsh

antigen bundle git
antigen bundle zdharma/fast-syntax-highlighting

antigen theme spaceship-prompt/spaceship-prompt

antigen apply
#+end_src

Setup =zsh= to make it easier to be lazy about changing directories and
enable extended globbing.

The extended globbing feature allows asterisks to be used in a number
of handy ways. ~ls **/foo~ will recursively list ~foo~ within the current
directory tree. ~ls ***/foo~ will do the same thing but also follow
symlinks. There are many other interesting features provided by the
=EXTENDED_GLOB=, and most of them look fairly similar to regular
expressions. For instance, ~ls [^ab]*~ matches any file not starting
with the letters ~a~ or ~b~.

#+begin_src conf :noweb-ref zshrc
setopt AUTO_CD # Don't make me use `cd`. You know what I wanted.
setopt NO_CASE_GLOB # Case insensitive globbing.
setopt EXTENDED_GLOB
#+end_src

Save =zsh= history to a ~.zhistory~ file, ignoring duplicate entries.

#+begin_src conf :noweb-ref zshrc
HISTFILE=${ZDOTDIR:-$HOME}/.zhistory
setopt EXTENDED_HISTORY # timestamp history lines
SAVEHIST=5000
HISTSIZE=2000
setopt SHARE_HISTORY # share history across sessions
setopt APPEND_HISTORY # just keep adding to history
setopt INC_APPEND_HISTORY # write all the time, don't wait for shell to close
setopt HIST_IGNORE_DUPS # do not store duplicates
setopt HIST_IGNORE_ALL_DUPS # ignore duplicate entries
setopt HISTIGNOREALLDUPS    # ignore duplicate entries alternative syntax.
setopt HIST_EXPIRE_DUPS_FIRST # expire duplicates first
setopt HIST_SAVE_NO_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS # ignore duplicates when searching
setopt HIST_REDUCE_BLANKS # remove blank lines from history
setopt HIST_VERIFY # be really sure when using !!
#+end_src

Allow =zsh= to provide corrections to commands which have been mistyped, even when using the ~AUTO_CD~ opt set above.

#+begin_src conf :noweb-ref zshrc
# Correction
setopt CORRECT
setopt CORRECT_ALL # Correct when using AUTO_CD
#+end_src

Configure =zsh='s auto-completion features.

#+begin_src conf :noweb-ref zshrc
autoload -Uz compinit && compinit

# Color dirs
export LS_COLORS # I don't know why this is necessary here, but colors don't work without it.
# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
#+end_src

Define custom command aliases.

 - ~ls~ :: Automatically color the output of ~ls~.
 - 7zultra :: Zip and compress a file or directory. This gets things pretty small.
 - curlheaders :: Curl, with ~-I~ baked in.
 - curlheadersproxy :: Curl, with ~-I~ baked in, but do it through a local proxy at =localhost:11080=.
 - scrote :: Capture a selected area of the screen to the clipboard using =scrot=.
 - webcam :: Turn on the webcam, sort of works like a mirror to check yourself before a meeting.
 - dots :: Jump to the dotfiles directory.
 - updots :: Update my dotfiles by running a script that tells Emacs to evaluate these Org files as a script.
 - work :: Jump to the work projects directory.
 - notes :: Jump to the ~~/Notes~ directory.
 - docs :: Jump to ~~/Documents~.
 - em :: Run =emacsclient=.
 - emc :: The same as ~em~, but adds the ~-c~ parameter and runs it in the background.

#+begin_src conf :noweb-ref zshrc
alias ls='ls --color=auto'
alias 7zultra='7z a -t7z -m0=lzma2 -mx=0 -mfb=64 -md=32m -ms=on'
alias curlheaders='curl -I'
alias curlheadersproxy='curl --socks5 localhost:11080 -I'
alias scrote='scrot -s ~/foo.png && xclip -selection clipboard -t image/png ~/foo.png && rm ~/foo.png'
alias webcam='mplayer tv:// -tv driver=v412:width=1920:height=1080:device=/dev/video0 -fps 15 -vf screenshot'
alias dots='cd ~/Projects/home/dotfiles'
alias updots='~/Projects/home/dotfiles/.bin/update-dotfiles'
alias work='cd ~/Projects/work'
alias notes='cd ~/Notes'
alias docs='cd ~/Documents'
alias em='emacsclient'
alias emc='emacsclient -c &'
#+end_src

Configure some system-dependent variables. Most of these are added to
handle some quirky behavior within =WSL= instances.

#+begin_src conf :noweb-ref zshrc
export GPG_TTY=$(tty)

# System dependent variables:
if [[ "$(< /proc/sys/kernel/osrelease)" == *microsoft* ]]; then
    export $(dbus-launch)
    export LIBGL_ALWAYS_INDIRECT=1
    export WSL_VERSION=$(wsl.exe -l -v | grep -a '[*]' | sed 's/[^0-9]*//g')
    export WSL_HOST=$(tail -1 /etc/resolv.conf | cut -d' ' -f2)
    export DISPLAY=$(ipconfig.exe | grep IPv4 | head -1 | rev | awk '{print $1}' | rev | tr -d '\r'):0.0

    # Handle pinentry for gpg password prompting in various scenarios.
    # In Ubuntu-20.04 WSL2, I've essentially given up on getting pinentry
    # in Emacs directly, opting instead for the pinentry-gtk2 package.
    kill -0 $SSH_AGENT_PID &> /dev/null
    if [[ $? -eq 1 ]]; then
        eval $( gpg-agent \
            --daemon \
            --allow-emacs-pinentry \
            --allow-loopback-pinentry \
            --enable-ssh-support);
    fi

    # Start Docker daemon when logging in if not runnint
    RUNNING=`ps aux | grep dockerd | grep -v grep`
    if [ -z "$RUNNING" ]; then
        sudo dockerd > /dev/null 2>&1 &
        disown
    fi
fi
#+end_src

Load built-in =zsh= modules. ~url-quote-magic~ analyzes characters being
typed in a command to decide if the character needs to be escaped.

#+begin_src conf :noweb-ref zshrc
autoload -U url-quote-magic
#+end_src

Source any custom =zsh= plugins.

| base16-shell            | https://github.com/chriskempson/base16-shell         |

=Base-16= is a plugin that essentially lets you choose a terminal theme
from a command completion. Start with ~base16_~ and hit ~<Tab>~ to see the
theme options.

The settings are stored in ~~/.base16_theme~. Remove that directory to
go back to ~.Xresources~ styles or whatever other configuration the
current terminal emulator uses (e.g.: ~~/.config/termite/config~)

#+begin_src conf :noweb-ref zshrc
source ${ZDOTDIR}/custom/plugins/base16-shell/base16-shell.plugin.zsh
#+end_src

The below line is commented out, generally, but are used to load the
custom work-in-progress prompt defined below.

#+begin_src conf :noweb-ref zshrc
# source ${ZDOTDIR:-$HOME}/prompt
#+end_src

Tangle out all of the ~.zshrc~ source blocks defined above into the
final file.

#+begin_src conf :tangle (concat (cy/system-settings-get 'config/dir) "/zsh/.zshrc") :noweb yes
<<zshrc>>
#+end_src

The following files should be pulled into the local filesystem via =git=
on any new system.

For convenience, simply evaluate this block or the
collection of ~:noweb-ref~ blocks that includes this one which is
defined at the bottom of this file.

#+begin_src sh :noweb-ref zsh-downloads
#!/bin/bash
git clone https://github.com/zsh-users/antigen.git ~/.config/zsh/custom/plugins/antigen
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.config/zsh/custom/plugins/zsh-syntax-highlighting
git clone git@github.com:chriskempson/base16-shell.git ~/.config/zsh/custom/plugins/base16-shell
#+end_src

*Work In Progress*

Carwin's custom =zsh= prompt.

#+begin_src conf :tangle ~/.config/zsh/prompt
# Left prompt
export PS1="%F{223}%n%F{224}@%F{211}%m %F{179}%~%b%F{255} âº "

# Right prompt
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
zstyle ':vcs_info:git:*' formats '%F{223}%b|%F{211}%r%f'
zstyle ':vcs_info:*' enable git

#+end_src

#+begin_src conf
This bit here came from the Archcraft repository, I'd like to have a much nicer shell...

if [[ "$USER" == "root" ]]; then
  PROMPT="%(?:%{$fg_bold[red]%}ï%{$fg_bold[yellow]%}ï%{$fg_bold[red]%}ï :%{$fg_bold[red]%}ïïï )"
  PROMPT+='%{$fg[cyan]%}ï»  %c%{$reset_color%} $(git_prompt_info)'
else
  PROMPT="%(?:%{$fg_bold[red]%}ï%{$fg_bold[green]%}ï%{$fg_bold[yellow]%}ï :%{$fg_bold[red]%}ïïï )"
  PROMPT+='%{$fg[cyan]%}ï»  %c%{$reset_color%} $(git_prompt_info)'
fi

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[blue]%}ï  git:(%{$fg[red]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%} "
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%}) %{$fg[yellow]%}â"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%})"
#+end_src


** X Window System

Until =Wayland= stops being terrible with the =NVIDIA= drivers, I'll
continue using =X=.

*** Xresources

This file handles a variety of things, from shell colors to terminal
emulator settings.

#+begin_src conf :noweb yes :tangle ~/.Xresources
<<xresources-config>>
#+end_src

Old bits and bobs that likely aren't necessary:

#+begin_src conf :noweb-ref xresources-config
!emacs*Background: DarkSlateGray
!emacs*Foreground: Wheat
!emacs*pointerColor: Orchid
!emacs*cursorColor: Orchid
!emacs*bitmapIcon: on
!emacs*font: fixed
!emacs.geometry: 80x25

*.foreground: #d8dee8

#+end_src

Set the cursor size to something sane. This often gets skewed on HiDPI
devices or when switching between a Desktop Manager like GNOME or Xfce
and a window manager like =i3=.

#+begin_src conf :noweb-ref xresources-config
Xcursor.size: 18
#+end_src

Configure [[https://www.freedesktop.org/wiki/Software/Xft/][Xft]] font settings for X applications to use.

The goal with these settings is to get fonts looking as nice as
possible with hinting and filtering. It is highly likely that these
values are system dependent.

@todo: How do I output different blocks based on emacs variable values?

#+begin_src conf :noweb-ref xresources-config
Xft.autohint: 0
Xft.lcdfilter: lcddefault
Xft.hintstyle: hintslight
Xft.hinting: 1
Xft.antialias: 1
Xft.rgba: rgb
Xft.dpi: 109
#+end_src

The terminal emulator =URxvt= reads its configuration from this
=$HOME/.Xresources= file. This is the primary terminal emulator used
across the various setups.

/Note: =URxvt= is being slowly replaced by =Termite=, but URxvt should
always be around as a fallback./

Set the font for URxvt to use =M+ 1m for Powerline= and set ~letterSpace~
and ~lineSpace~ both to ~0~ to avoid rendering quirks.

#+begin_src conf :noweb-ref xresources-config
URxvt*font: xft:M+ 1m for Powerline:regular:size=10
URxvt*letterSpace: 0
URxvt.lineSpace:  0
#+end_src

=URxvt= should report support for 256 colors and allow scrolling back ~15000~ lines.

#+begin_src conf :noweb-ref xresources-config
! general settings
URxvt*saveline:   15000
URxvt*termName:   rxvt-256color
#+end_src

The ~iso14755: false~ setting is an attempt at disabling what =URxvt= dubs
'picture insert mode' when ~Ctrl+Shift~ is pressed. This is disabled
here to allow interaction with the system's clipboard via ~Ctrl+Shift+c~
and ~Ctrl+Shift+v~.

#+begin_src conf :noweb-ref xresources-config
URxvt*iso14755:   false
#+end_src

Allow the terminal to flash or make a noise when something interesting
happens that the user should pay attention to.

#+begin_src conf :noweb-ref xresources-config
URxvt*urgentOnBell:  true
#+end_src

Tell =URxvt= to use =ibus= as the input method. This is mostly set to
allow inputting Japanese into the terminal, for instance, in
=weechat=.

#+begin_src conf :noweb-ref xresources-config
URxvt.inmputMethod: ibus
URxvt.preeditType: OverTheSpot
#+end_src

Configure the appearance of =URxvt=, turning off scroll bars and
essentially making a plain, undecorated window that is slightly
transparent.

#+begin_src conf :noweb-ref xresources-config
URxvt*depth:   32
URxvt*scrollBar:  false
URxvt*scrollBar_right: false
URxvt*internalBorder: 24
URxvt*externalBorder: 0
URxvt.geometry:   84x22
URxvt*transparent: true
URxvt*shading: 25
#+end_src

Define a list of perl extensions that extend the functionality of
=URxvt=. For Arch Linux, these come by way of the =urxvt-perls= package in
the AUR.

| default             |                                                                    |
| keyboard-select     | Use keyboard shortcuts to select and copy text                     |
| selection-clipboard |                                                                    |
| matcher             | Replaces the old ~url-select~, use keyboard shortcuts to select URLs |

#+begin_src conf :noweb-ref xresources-config
! perl extensions
URxvt.perl-ext-common: default,keyboard-select,selection-clipboard,matcher
#+end_src

Define key bindings for those =Perl= extensions.

#+begin_src conf :noweb-ref xresources-config
! macros for clipboard and selection
URxvt.copyCommand:  xclip -i -selection clipboard
URxvt.pasteCommand:  xclip -o -selection clipboard
URxvt.keysym.M-c:  perl:clipboard:copy
URxvt.keysym.M-v:  perl:clipboard:paste
URxvt.keysym.M-C-v:  perl:clipboard:paste_escaped
URxvt.keysym.M-Escape: perl:keyboard-select:activate
URxvt.keysym.M-s:  perl:keyboard-select:search
URxvt.keysym.M-u:  perl:url-select:select_next
#+end_src

Handle URLs within =URxvt=. They should be underlined and colored,
follow-able with the left mouse click, and open with Firefox by
default.

#+begin_src conf :noweb-ref xresources-config
URxvt.url-launcher:  firefox
URxvt.underlineURLs: true
URxvt*matcher.button: 1
URxvt.urlButton: 1
URxvt.underlineColor: #bf616a
#+end_src

Configure additional keybindings for normal =URxvt= functionality.

#+begin_src conf :noweb-ref xresources-config
! scroll one line
URxvt.keysym.Shift-Up:  command:\033]720;1\007
URxvt.keysym.Shift-Down: command:\033]721;1\007

! control arrow
URxvt.keysym.Control-Up: \033[1;5A
URxvt.keysym.Control-Down: \033[1;5B
URxvt.keysym.Control-Right: \033[1;5C
URxvt.keysym.Control-Left: \033[1;5D

! Copy/Pasta
URxvt.keysym.Shift-Control-V: eval:paste_clipboard
URxvt.keysym.Shift-Control-C: eval:selection_to_clipboard
#+end_src

Set up some colors for =Rofi= in case it is called without any color
arguments.

#+begin_src conf :noweb-ref xresources-config
rofi.color-enabled: true
rofi.color-window: #2e3440, #2e3440, #2e3440
rofi.color-normal: #2e3440, #d8dee9, #2e3440, #2e3440, #bf616a
rofi.color-active: #2e3440, #b48ead, #2e3440, #2e3440, #93e5cc
rofi.color-urgent: #2e3440, #ebcb8b, #2e3440, #2e3440, #ebcb8b
rofi.modi: run,drun,window,ssh
#+end_src

Also set up colors for =dmenu= in case it ever gets used again.

#+begin_src conf :noweb-ref xresources-config
dmenu.selforeground: #d8dee9
dmenu.background:    #2e3440
dmenu.selbackground: #bf616a
dmenu.foreground:    #d8dee9
#+end_src

After changing this file, it is necessary to reload it via: ~xrdb
~/.Xresources~

#+begin_src sh :shebang #!/bin/bash :noweb-ref source-xresources
xrdb ~/.Xresources
#+end_src

*** xsettingsd

=xsettingsd= acts as a minimal settings daemon for =Xorg=
applications. It replaces similar daemons from desktop environments
like =GNOME= and =XFCE= and enables the usage of a simple configuration
file.

Here it is used primarily to attempt better Xft font display. This
somewhat duplicates similar entries in =$HOME/.Xresources= but various
differences in system configuration may require one or the other.

#+begin_src conf :tangle ~/.config/xsettingsd/xsettingsd.conf :noweb yes
Xft/Antialias 1
Xft/Hinting 1
Xft/HintStyle "hintslight"
Xft/RGBA "rgb"
#+end_src

** Git

*** Primary =.gitconfig=

Set the editor for gitinteraction to vim. If I want to do things
within Emacs I'll use =magit=.

#+begin_src conf :noweb-ref gitconfig
[core]
  editor = vim
#+end_src

Set up the default details about the global git user.

Some projects will use a different email value. This can be set on a
per-project basis with ~git config --local
user.email="some-email@wherever.com"~.

#+begin_src conf :noweb-ref gitconfig
[user]
  name = Carwin Young
  email = cy@carw.in
  signingkey = D6FA5A05B721CCDE
#+end_src

Make git's output prettier by configuring colors.

#+begin_src conf :noweb-ref gitconfig
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  frag = cyan bold
  meta = yellow bold
  new = green bold
  old = red bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
#+end_src

Configure some default parameters for basic =git= commands. Logging for
~git merge~, etc...

#+begin_src conf :noweb-ref gitconfig
[merge]
  log = true
[rebase]
  stat = true
[log]
  decorate = full
#+end_src

Create some handy url aliases for commonly used remote repositories.

#+begin_src conf :noweb-ref gitconfig
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com"]
  insteadOf = "gist:"
[url "git@heroku.com:"]
  insteadOf = "heroku:"
#+end_src

Provide a list of shortcut aliases to commonly used =git= functionality.

Some of these may duplicate options made available via the =oh-my-zsh=
plugin for the shell but are worth keeping here in case shell
preferences change. This list of aliases acts as the master list and
any other provided alias is just a rarely used convenience.

#+begin_src conf :noweb-ref gitconfig
[alias]
  br = branch
  st = status
  co = checkout
  df = diff
  g  = grep -I
  rc = rank-contributors
  pr = pull --rebase
  lgp = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
  lg = log --show-signature
  cm = commit -S -m
  cma = commit --amend -S
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch -f --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f"
#+end_src

Collect all the =.gitconfig= bits in this section and tangle them out
into ~/homr/<user>/.gitconfig~.

#+begin_src conf :tangle (concat (cy/system-settings-get 'user/home) "/.gitconfig") :noweb yes :shebang #!/bin/bash
<<gitconfig>>
#+end_src

** Window Manager

*** i3

=i3wm= is the preferred window manager it is lightweight, and
accomplishes its purpose very well with minimal overhead.

**** Primary i3wm Configuration

#+begin_src conf :noweb-ref i3config
set $mod Mod1
set $sup Mod4
#+end_src

Configure the font and positioning for window titles. This will also
be used by the default bar unless a different font is used in the
bar{} section, which isn't particularly relevant as this configuration
is meant to be used with =polybar=.

#+begin_src conf :noweb-ref i3config
font pango:monospace 8
# Title bar text alignment
title_align center
for_window [class=".*"] border pixel 4
#+end_src

This configuration assumes that the variant of =i3=, =i3gaps=, is in use.
Set up gaps intelligently.

#+begin_src conf :noweb-ref i3config
# Gaps (Outer gaps are added to the inner gaps)
gaps inner 15
gaps outer 0
# Only enable gaps on a workspace when there is at least one container
#smart_gaps on
# Activate smart borders (always)
smart_borders on
#+end_src

Configure =i3='s colors. So pretty!

#+begin_src conf :noweb-ref i3config
# class                 border  backgr. text    indicator child_border
client.focused          #DA6E89 #DA6E89 #FFFFFF #98C379   #DA6E89
client.focused_inactive #61AFEF #61AFEF #1E222A #98C379   #61AFEF
client.unfocused        #2C3038 #2C3038 #FFFFFF #98C379   #2C3038
client.urgent           #C678DD #C678DD #FFFFFF #98C379   #C678DD
client.placeholder      #1E222A #1E222A #FFFFFF #98C379   #1E222A

client.background       #1E222A
#+end_src

Run the ~autostart.sh~ script that is tangled out of this file a little
later. It stores all the commands to be run when =i3= is initialized.

#+begin_src conf :noweb-ref i3config
exec_always --no-startup-id ~/.config/i3/bin/autostart.sh
#+end_src

Define keybindings for commonly used applications within =i3=.

| =Rofi= key bindings |                      |
|-------------------+----------------------|
| ~$mod+F1~         | Application launcher |
| ~$mod+d~          | Application launcher |
| ~$sup+n~          | Network menu         |
| ~$sup+x~          | Power menu           |
| ~$mod+Ctrl+m~     | mpd control          |
| ~$mod+Ctrl+n~     | Network panel        |
| ~$mod+Ctrl+s~     | Screenshot menu      |
| ~Printscrn~       | Screenshot menu      |
| ~$mod+Ctrl+r~     | Execute as root menu |
| ~$mod+Ctrl+w~     | Window menu          |

#+begin_src conf :noweb-ref i3config
bindsym $mod+F1 exec ~/.config/rofi/bin/launcher
bindsym $mod+d exec ~/.config/rofi/bin/launcher
bindsym $sup+n exec ~/.config/rofi/bin/network-menu
bindsym $sup+x exec ~/.config/rofi/bin/power-menu
bindsym $mod+Control+m exec ~/.config/rofi/bin/mpd
bindsym $mod+Control+n exec ~/.config/rofi/bin/network
bindsym $mod+Control+s exec ~/.config/rofi/bin/screenshot
bindsym Print exec ~/.config/rofi/bin/screenshot
bindsym $mod+Control+r exec ~/.config/rofi/bin/asroot
bindsym $mod+Control+w exec ~/.config/rofi/bin/windows
#+end_src

| PulseAudio general (via pactl) |                |
|--------------------------------+----------------|
| ~XF86AudioRaiseVolume~           | Volume up      |
| ~XF86AudioLowerVolume~           | Volume down    |
| ~XF86AudioMute~                  | Mute audio     |
| ~XF86AudioMicMute~               | Mute mic input |

#+begin_src conf :noweb-ref i3config
set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status
#+end_src

| =mpd= control (via =mpc=) |              |
|-----------------------+--------------|
| ~XF86AudioPlay~         | Play / Pause |
| ~XF86AudioStop~         | Stop         |
| ~XF86AudioNext~         | Next         |

#+begin_src conf :noweb-ref i3config
bindsym XF86AudioPlay exec "mpc toggle"
bindsym XF86AudioStop exec "mpc stop"
bindsym XF86AudioNext exec "mpc next"
#+end_src

| Lockscreen      |             |
|-----------------+-------------|
| ~$mod+Ctrl+l~     | Lock screen |
| ~XF86ScreenSaver~ | Lock screen |

#+begin_src conf :noweb-ref i3config
# -- Lockscreen --
bindsym $mod+Control+l exec ~/.config/i3/bin/i3lock.sh
bindsym XF86ScreenSaver exec ~/.config/i3/bin/i3lock.sh
#+end_src

Set =i3= to automatically lock the screen after ten minutes of
inactivity using ~xautolock~ and the =i3lock.sh= script tangled out later
in this file.

#+begin_src conf :noweb-ref i3config
exec xautolock -time 10 -locker "~/.config/i3/bin/i3lock.sh"
#+end_src

Now that most of the application specific bindings are out of the way,
configure the actual =i3= bindings to suit needs.

Use ~Mouse+$mod~ to drag floating windows to their wanted position as
well as resize a panel using right-click and ~$mod~ to drag.

#+begin_src conf :noweb-ref i3config
floating_modifier $mod
#+end_src

Start a terminal. This is typically =URxvt=, but =termite= is being
experimented with as a replacement.

#+begin_src conf :noweb-ref i3config
bindsym $mod+Return exec termite
#+end_src

Kill focused windows with ~$mod-Shift-q~.

#+begin_src conf :noweb-ref i3config
bindsym $mod+Shift+q kill
#+end_src

Use ~hjkl~ movements with ~$mod~ to change window focus. Add ~Shift~ to that
combination to /move/ the currently focused window.

For /moving/ windows, also allow the use of arrow keys.

#+begin_src conf :noweb-ref i3config
# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right
#+end_src

Use ~$mod~ and ~apostrophe~ to split horizontally.

#+begin_src conf :noweb-ref i3config
bindsym $mod+apostrophe split h
#+end_src

Use ~$mod~ and ~minus~ to split vertically. ~minus~ in this context is also
sometimes called the hyphen or dash key. Whatever it is called, it
outputs =-= when typed.

#+begin_src conf :noweb-ref i3config
bindsym $mod+minus split v
#+end_src

Toggle fullscreen mode for the focused container using ~$mod-f~.

#+begin_src conf :noweb-ref i3config
bindsym $mod+f fullscreen toggle
#+end_src

Jump between predefined window layouts (stacked, tabbed, etc...):

 - ~$mod+s~ :: stacking layout
 - ~$mod+w~ :: tabbed layout
 - ~$mod+e~ :: toggle split layout

#+begin_src conf :noweb-ref i3config
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split
#+end_src

Use ~$mod+Shift+Space~ to toggle between tiling and floating modes for
the focused window.

#+begin_src conf :noweb-ref i3config
bindsym $mod+Shift+space floating toggle
#+end_src

If some windows are floating and others are tiling, use ~$mod+Space~ to
switch between them.

#+begin_src conf :noweb-ref i3config
bindsym $mod+space focus mode_toggle
#+end_src

Focus the parent container with ~$mod+a~.

#+begin_src conf :noweb-ref i3config
bindsym $mod+a focus parent
#+end_src

Focus the child container with @todo.

#+begin_src conf :noweb-ref i3config
#bindsym $mod+d focus child
#+end_src

Define names for the default workspaces and configure their
keybindings.

 - =$prim= (~$mod+1~) :: Generally, the first workspace is always the Primary workspace, so it is given the name =$prim=. For habitual reasons, this is still typically bound to ~$mod+1~. The rest of the single digit numbers on the keyboard get their own workspaces but are simply referenced using =$ws<number>=.
 - =$ws<number>= (~$mod+<number>~) :: Unamed workspaces for general use, numbers 2-9 and 0 are available.
 - =$comm= (~$mod+c~) :: Communiciations space. This is where things like IRC, Slack, and Discord should all go by default.
 - =$net= (~$mod+n~) :: This is the default workspace for web browsing.
 - =$game= (~$mod+g~) :: Anything game related should end up on this workspace.
 - =$mail= (~$mod+m~) :: (*Deprecated*) The =$mail= workspace is meant for an email client. Now that ~mu4e~ has replaced ~mutt~, it isn't necessary, however it is sometimes useful to launch ~mu4e~ in a new Emacs frame and send it to the =$mail= workspace manually.

A focused container may be moved to one of the default workspaces by
adding ~Shift~ to the corresponding workspace key binding.

#+begin_src conf :noweb-ref i3config
set $prim "1: I"
set $ws2 "2: II"
set $ws3 "3: III"
set $ws4 "4: IV"
set $ws5 "5: V"
set $ws6 "6: VI"
set $ws7 "7: VII"
set $ws8 "8: VIII"
set $ws9 "9: IX"
set $ws10 "10: X"
set $comm "comm."
set $net "internet"
set $game "game"
set $mail "mail"

# Switch to workspace
bindsym $mod+1 workspace $prim
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10
bindsym $mod+c workspace $comm
bindsym $mod+n workspace $net
bindsym $mod+g workspace $game
bindsym $mod+m workspace $mail
# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $prim
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10
bindsym $mod+Shift+c move container to workspace $comm
bindsym $mod+Shift+n move container to workspace $net
bindsym $mod+Shift+g move container to workspace $game
bindsym $mod+Shift+m move container to workspace $mail
#+end_src

Reload the configuration file using ~$mod+Shift+Control+c~.

#+begin_src conf :noweb-ref i3config
bindsym $mod+Shift+Control+c reload
#+end_src

Restart =i3= in place, preserving layout and session, via ~$mod+Shift+Control+r~.

#+begin_src conf :noweb-ref i3config
bindsym $mod+Shift+r restart
#+end_src

Exit =i3= and log out of the current X session with ~$mod+Shift+e~. This
makes use of the built-in ~i3-nagbar~ to prompt the user for
confirmation before exiting.

#+begin_src conf :noweb-ref i3config
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"
#+end_src

In addition to the window resizing functionality provided by the
~$mod+Mouse~ combination, configure ~$mod+r~ to entire a "resize mode"
wherein ~hjkl~ and arrow movements shrink or grow the currently focused
window.

#+begin_src conf :noweb-ref i3config
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}
bindsym $mod+r mode "resize"
#+end_src

Define rules for specific windows, classes of windows, and windows
with certain roles.

Information about a window can be found by way of the ~xprop~ command.

#+begin_src conf :noweb-ref i3config
#-- window rules, you can find the window class using xprop --
for_window [class=".*"] border pixel 1
for_window [window_role="pop-up"] floating enable
for_window [window_role="task_dialog"] floating enable
for_window [class="Pavucontrol|Xfce4-power-manager-settings|Nm-connection-editor"] floating enable
for_window [class=Gnome-screenshot] floating enable
for_window [class="feh|Viewnior|Gpicview|Gimp"] floating enable
for_window [class=feh|Pavucontrol|Screenshot] floating enable
for_window [class=zoom title="^Participants"] floating enable
for_window [class=zoom title="^Zoom Meeting"] floating enable
for_window [class=zoom title="^Zoom - Licensed Account"] floating enable

#-- workspace rules --
for_window [class=firefox] move --no-auto-back-and-forth container to workspace $net
for_window [class=Google-chrome window_role=browser] move container to workspace $net
for_window [class=Google-chrome window_role=pop-up] move container to workspace $comm
for_window [class=Signal] move container to workspace $comm
for_window [class=Slack] move container to workspace $comm
for_window [class=Emacs] move container to workspace $prim
#+end_src

Output the =i3= configuration defined in this section into a single
configuration file on the system.

#+begin_src emacs-lisp :noweb yes :tangle ~/.config/i3/config
<<i3config>>
#+end_src

**** i3 Scripts

***** Autostart with i3

This script is called whenever =i3= starts up. It's purpose is to
automatically spawn programs and processes.

#+begin_src sh :noweb yes :tangle ~/.config/i3/bin/autostart.sh :shebang #!/bin/bash
<<i3-autostart-script>>
#+end_src

First, kill already running processes from the list of enabled
autostarts.

#+begin_src sh :noweb-ref i3-autostart-script
#_ps=(compton dunst ksuperkey mpd polybar xfce-polkit xfce4-power-manager)
_ps=(compton dunst polybar xfce-polkit)
for _prs in "${_ps[@]}"; do
    if [[ `pidof ${_prs}` ]]; then
        killall -9 ${_prs}
    fi
done
#+end_src

Start the =xfce-polkit= agent.

#+begin_src sh :noweb-ref i3-autostart-script
/usr/lib/xfce-polkit/xfce-polkit &
#+end_src

Start an =ibus-daemon= instance for multi-lingual text input.

#+begin_src sh :noweb-ref i3-autostart-script
ibus-daemon -drxR &
#+end_src

Launch =Dunst= to serve notifications.

#+begin_src sh :noweb-ref i3-autostart-script
~/.config/i3/bin/launch-dunst.sh
#+end_src

Launch =Polybar= to give the window manager some interactive chrome.

#+begin_src sh :noweb-ref i3-autostart-script
~/.config/i3/bin/launch-polybar.sh
#+end_src

Launch the =picom= compositor for X to allow things like transparency
and fading of windows.

#+begin_src sh :noweb-ref i3-autostart-script
~/.config/i3/bin/launch-compton.sh
#+end_src

Set the desktop wallpaper to the contents of ~$HOME/.fehbg~. This file
gets updated whenever =feh= is used to set the wallpaper so it
effectively sets your wallpaper to the last image chosen.

#+begin_src sh :noweb-ref i3-autostart-script
~/.fehbg &
#+end_src

Run =xmodmap= and point it to ~$HOME/.Xmodmap~ to ensure that the
=CAPS_LOCK= key is always set to =L_Control= when in X on systems for
which a keyboard level configuration is inappropriate or impossible.

#+begin_src sh :noweb-ref i3-autostart-script
xmodmap ~/.Xmodmap &
#+end_src

***** i3lock

This =i3lock= script is triggered manually by way of keystroke from =i3=
or an automatic inactivity timer provided by the =xautolock= package.

#+begin_src sh :noweb yes :tangle (concat (cy/system-settings-get 'config/dir) "/i3/bin/i3lock.sh") :shebang  #!/bin/bash
<<i3-lock-script>>
#+end_src

Define the color variales the script will use:

#+begin_src sh :noweb-ref i3-lock-script
FG="#c8ccd4"
BG="#1e222a"

BLACK="#1e222a"
RED="#e06c75"
GREEN="#98c379"
YELLOW="#e5c07b"
BLUE="#61afef"
MAGENTA="#c678dd"
CYAN="#56b6c2"
WHITE="#abb2bf"
#+end_src

@todo: This appears broken.

Set an occasionally silly message from the =fortune= package to display
on the lockscreen.

#+begin_src sh :noweb-ref i3-lock-script
TOTD=`fortune -n 90 -s | head -n 1`
#+end_src

Invoke ~i3lock~, making it look extra fancy.

#+begin_src sh :noweb-ref i3-lock-script
i3lock \
    --color="${BG}D9" \
    --insidever-color=${GREEN} \
    --insidewrong-color=${RED} \
    --inside-color="${BG}00" \
    --ringver-color=${GREEN} \
    --ringwrong-color=${RED} \
    --ring-color=${BLUE} \
    --line-color=${BG} \
    --separator-color=${BG} \
    --keyhl-color=${YELLOW} \
    --bshl-color=${RED} \
    --verif-color=${BG} \
    --wrong-color=${FG} \
    --layout-color=${FG} \
    --time-color=${FG} \
    --date-color=${FG} \
    --pass-media-keys \
    --pass-screen-keys \
    --pass-power-keys \
    --pass-volume-keys \
    --{time,date,layout,verif,wrong,greeter}-font="JetBrains Mono Medium" \
    --{layout,verif,wrong,greeter}-size=18 \
    --time-size=34 \
    --date-size=18 \
    --greeter-text="${TOTD}" \
    --greeter-color=${CYAN} \
    --verif-text="verifying..." \
    --wrong-text="wrong!" \
    --noinput-text="Empty" \
    --lock-text="Locking..." \
    --lockfailed-text="Failed to lock" \
    --radius 120 \
    --ring-width 8.0 \
    --screen 1 \
    --clock \
    --indicator \
    --time-str="%I:%M %p" \
    --date-str="%b %d, %G" \
#+end_src

***** i3's =Dunst= Launcher

#+begin_src sh :tangle (concat (cy/system-settings-get 'config/dir) "/i3/bin/launch-dunst.sh") :shebang #!/bin/bash
if [[ `pidof dunst` ]]; then
    pkill dunst
fi

dunst \
-geom "280x50-15+53" -frame_width "2" -font "JetBrains Mono Medium 10" \
-lb "#1e222a" -lf "#c8ccd4" -lfr "#61afef" \
-nb "#1e222a" -nf "#c8ccd4" -nfr "#61afef" \
-cb "#1e222a" -cf "#e06c75" -cfr "#e06c75" &
#+end_src

***** i3's =Polybar= Launcher

=i3= launches this script at startup to display Polybar.

#+begin_src sh :noweb yes :tangle (concat (cy/system-settings-get 'config/dir) "/i3/bin/launch-polybar.sh") :shebang #!/bin/bash
<<i3-polybar-launcher>>
#+end_src

Terminate already running bar instances.

#+begin_src sh :noweb-ref i3-polybar-launcher
killall -q polybar
#+end_src

Wait until the processes have been shut down

#+begin_src sh :noweb-ref i3-polybar-launcher
while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done
#+end_src

Launch polybar

#+begin_src sh :noweb-ref i3-polybar-launcher
polybar main -c ~/.config/polybar/config.ini &
#+end_src

***** i3's Compositor Launcher

This script launches the picom / compton compositor when =i3= starts
up. Lots of systems still call it "Compton" but the program has been
renamed to "Picom" for some reason.

#+begin_src sh :noweb yes :tangle (concat (cy/system-settings-get 'config/dir) "/i3/bin/launch-compton.sh") :shebang #!/bin/bash
<<i3-compositor-launcher>>
#+end_src

Terminate the compositor process if compton/picom is already running.

#+begin_src sh :noweb-ref i3-compositor-launcher
killall -q compton
#+end_src

Wait until the processes have been shut down.

#+begin_src sh :noweb-ref i3-compositor-launcher
while pgrep -u $UID -x compton >/dev/null; do sleep 1; done
#+end_src

Launch the compositor.

#+begin_src sh :noweb-ref i3-compositor-launcher
compton --config ~/.config/picom/picom.conf &
#+end_src

*** Polybar

Configure polybar's colors.

#+begin_src conf :tangle ~/.config/polybar/colors.ini
[color]
BG = #1e222a
BGL = #2c3038
FG = #c8ccd4
FGA = #808080

BLACK = #000000
WHITE = #FFFFFF
RED = #e06c75
GREEN = #98c379
YELLOW = #e5c07b
BLUE = #61afef
PURPLE = #c678dd
CYAN = #56b6c2
#+end_src

Set up all the general configurations for Polybar.

#+begin_src conf :tangle ~/.config/polybar/config.ini
;; Global WM Settings

[global/wm]
; Adjust the _NET_WM_STRUT_PARTIAL top value
; Used for top aligned bars
margin-bottom = 0

; Adjust the _NET_WM_STRUT_PARTIAL bottom value
; Used for bottom aligned bars
margin-top = 0

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; File Inclusion
; include an external file, like module file, etc.

include-file = ~/.config/polybar/colors.ini
include-file = ~/.config/polybar/modules.ini
include-file = ~/.config/polybar/decor.ini

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; Bar Settings

[bar/main]
; Use either of the following command to list available outputs:
; If unspecified, the application will pick the first one it finds.
; $ polybar -m | cut -d ':' -f 1
; $ xrandr -q | grep " connected" | cut -d ' ' -f1
monitor =

; Use the specified monitor as a fallback if the main one is not found.
monitor-fallback =

; Require the monitor to be in connected state
; XRandR sometimes reports my monitor as being disconnected (when in use)
monitor-strict = false

; Tell the Window Manager not to configure the window.
; Use this to detach the bar if your WM is locking its size/position.
override-redirect = false

; Put the bar at the bottom of the screen
bottom = false

; Prefer fixed center position for the `modules-center` block
; When false, the center position will be based on the size of the other blocks.
fixed-center = true

; Dimension defined as pixel value (e.g. 35) or percentage (e.g. 50%),
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in a width or height of 50% minus 10 pixels
width = 100%
height = 26

; Offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in an offset in the x or y direction
; of 50% minus 10 pixels
offset-x = 0%
offset-y = 0%

; Background ARGB color (e.g. #f00, #ff992a, #ddff1023)
background = ${color.BG}

; Foreground ARGB color (e.g. #f00, #ff992a, #ddff1023)
foreground = ${color.FG}

; Background gradient (vertical steps)
;   background-[0-9]+ = #aarrggbb
;;background-0 =

; Value used for drawing rounded corners
; Note: This shouldn't be used together with border-size because the border
; doesn't get rounded
; Individual top/bottom values can be defined using:
;   radius-{top,bottom}
radius-top = 0.0
radius-bottom = 0.0

; Under-/overline pixel size and argb color
; Individual values can be defined using:
;   {overline,underline}-size
;   {overline,underline}-color
line-size = 2
line-color = ${color.BLUE}

; Values applied to all borders
; Individual side values can be defined using:
;   border-{left,top,right,bottom}-size
;   border-{left,top,right,bottom}-color
; The top and bottom borders are added to the bar height, so the effective
; window height is:
;   height + border-top-size + border-bottom-size
; Meanwhile the effective window width is defined entirely by the width key and
; the border is placed withing this area. So you effectively only have the
; following horizontal space on the bar:
;   width - border-right-size - border-left-size
border-size = 6
border-color = ${color.BG}

; Number of spaces to add at the beginning/end of the bar
; Individual side values can be defined using:
;   padding-{left,right}
padding = 0

; Number of spaces to add before/after each module
; Individual side values can be defined using:
;   module-margin-{left,right}
module-margin-left = 0
module-margin-right = 0

; Fonts are defined using <font-name>;<vertical-offset>
; Font names are specified using a fontconfig pattern.
;   font-0 = "Iosevka Nerd Font:size=10;3"
;   font-1 = MaterialIcons:size=10
;   font-2 = Termsynu:size=8;-1
;   font-3 = FontAwesome:size=10
; See the Fonts wiki page for more details

font-0 = "JetBrains Mono:bold:size=10;3"
font-1 = "Iosevka Nerd Font:size=12;3"
font-2 = "Iosevka Nerd Font:size=15;4"
font-3 = "Iosevka Nerd Font:bold:size=12;4"

; Modules are added to one of the available blocks
;   modules-left = cpu ram
;   modules-center = xwindow xbacklight
;   modules-right = ipc clock

# Default
modules-left = LD i3 RD dot LD mpd RD sep song dot filesystem
modules-center =
modules-right = cpu sep temperature dot memory dot volume dot battery dot wired-network dot wireless-network dot LD date RD dot sysmenu

# Alternate
;modules-left = openbox 2LD cpu 3LD memory 4LD filesystem 5LD
;modules-center = mpd
;modules-right = 2RD volume 3RD backlight 4RD battery 5RD network 6RD date sep

; The separator will be inserted between the output of each module
separator =

; This value is used to add extra spacing between elements
; @deprecated: This parameter will be removed in an upcoming version
spacing = 0

; Opacity value between 0.0 and 1.0 used on fade in/out
dim-value = 1.0

; Value to be used to set the WM_NAME atom
; If the value is empty or undefined, the atom value
; will be created from the following template: polybar-[BAR]_[MONITOR]
; NOTE: The placeholders are not available for custom values
wm-name =

; Locale used to localize various module data (e.g. date)
; Expects a valid libc locale, for example: sv_SE.UTF-8
locale =

; Position of the system tray window
; If empty or undefined, tray support will be disabled
; NOTE: A center aligned tray will cover center aligned modules
;
; Available positions:
;   left
;   center
;   right
;   none
tray-position = right

; If true, the bar will not shift its
; contents when the tray changes
tray-detached = false

; Tray icon max size
tray-maxsize = 16

; DEPRECATED! Since 3.3.0 the tray always uses pseudo-transparency
; Enable pseudo transparency
; Will automatically be enabled if a fully transparent
; background color is defined using `tray-background`
; tray-transparent = false

; Background color for the tray container
; ARGB color (e.g. #f00, #ff992a, #ddff1023)
; By default the tray container will use the bar
; background color.
tray-background = ${color.BG}

; Tray offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
tray-offset-x = 0
tray-offset-y = 0

; Pad the sides of each tray icon
tray-padding = 0

; Scale factor for tray clients
tray-scale = 1.0

; Restack the bar window and put it above the
; selected window manager's root
;
; Fixes the issue where the bar is being drawn
; on top of fullscreen window's
;
; Currently supported WM's:
;   bspwm
;   i3 (requires: `override-redirect = true`)
; wm-restack =

; Set a DPI values used when rendering text
; This only affects scalable fonts
; dpi =

; Enable support for inter-process messaging
; See the Messaging wiki page for more details.
enable-ipc = true

; Fallback click handlers that will be called if
; there's no matching module handler found.
click-left =
click-middle =
click-right =
scroll-up =
scroll-down =
double-click-left =
double-click-middle =
double-click-right =

; Requires polybar to be built with xcursor support (xcb-util-cursor)
; Possible values are:
; - default   : The default pointer as before, can also be an empty string (default)
; - pointer   : Typically in the form of a hand
; - ns-resize : Up and down arrows, can be used to indicate scrolling
cursor-click =
cursor-scroll =

;; WM Workspace Specific

; bspwm
;;scroll-up = bspwm-desknext
;;scroll-down = bspwm-deskprev
;;scroll-up = bspc desktop -f prev.local
;;scroll-down = bspc desktop -f next.local

;i3
;;scroll-up = i3wm-wsnext
;;scroll-down = i3wm-wsprev
;;scroll-up = i3-msg workspace next_on_output
;;scroll-down = i3-msg workspace prev_on_output

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; Application Settings

[settings]
; The throttle settings lets the eventloop swallow up til X events
; if they happen within Y millisecond after first event was received.
; This is done to prevent flood of update event.
;
; For example if 5 modules emit an update event at the same time, we really
; just care about the last one. But if we wait too long for events to swallow
; the bar would appear sluggish so we continue if timeout
; expires or limit is reached.
throttle-output = 5
throttle-output-for = 10

; Time in milliseconds that the input handler will wait between processing events
;throttle-input-for = 30

; Reload upon receiving XCB_RANDR_SCREEN_CHANGE_NOTIFY events
screenchange-reload = false

; Compositing operators
; @see: https://www.cairographics.org/manual/cairo-cairo-t.html#cairo-operator-t
compositing-background = source
compositing-foreground = over
compositing-overline = over
compositing-underline = over
compositing-border = over

; Define fallback values used by all module formats
;format-foreground =
;format-background =
;format-underline =
;format-overline =
;format-spacing =
;format-padding =
;format-margin =
;format-offset =

; Enables pseudo-transparency for the bar
; If set to true the bar can be transparent without a compositor.
pseudo-transparency = false
#+end_src

Decorate =Polybar= by defining some new, purely visual, modules.

#+begin_src conf :tangle ~/.config/polybar/decor.ini
[module/sep]
type = custom/text
content = -

content-background = ${color.BG}
content-foreground = ${color.BG}

[module/dot]
type = custom/text
content = ï

content-background = ${color.BG}
content-foreground = ${color.BGL}
content-padding = 2

[module/LD]
type = custom/text
content = "%{T3}î¶%{T-}"
content-background = ${color.BG}
content-foreground = ${color.BGL}

[module/RD]
type = custom/text
content = "%{T3}î´%{T-}"
content-background = ${color.BG}
content-foreground = ${color.BGL}
#+end_src

**** Polybar Modules

Set up the available modules for =Polybar=. Most of these are some
variation of the default.

#+begin_src conf :noweb yes :tangle ~/.config/polybar/modules.ini
<<polybar-modules>>
#+end_src

***** Back-light

#+begin_src conf :noweb-ref polybar-modules
[module/backlight]
type = internal/backlight
#type = internal/xbacklight

; Use the following command to list available cards:
; $ ls -1 /sys/class/backlight/
card = amdgpu_bl0
#card = intel_backlight

; Available tags:
;   <label> (default)
;   <ramp>
;   <bar>
format = <ramp> <label>

; Available tokens:
;   %percentage% (default)
label = %percentage%%

; Only applies if <ramp> is used

ramp-0 = ï
ramp-1 = ï
ramp-2 = ï
ramp-3 = ï
ramp-4 = ï
ramp-5 = ï
ramp-6 = ï
ramp-7 = ï
ramp-8 = ï
ramp-9 = ï
ramp-font = 2
ramp-foreground = ${color.CYAN}
#+end_src

***** Battery

#+begin_src conf :noweb-ref polybar-modules
[module/battery]
type = internal/battery

; This is useful in case the battery never reports 100% charge
full-at = 99

; Use the following command to list batteries and adapters:
; $ ls -1 /sys/class/power_supply/
battery = BAT1
adapter = ACAD

; If an inotify event haven't been reported in this many
; seconds, manually poll for new values.
;
; Needed as a fallback for systems that don't report events
; on sysfs/procfs.
;
; Disable polling by setting the interval to 0.
;
; Default: 5
poll-interval = 2

; see "man date" for details on how to format the time string
; NOTE: if you want to use syntax tags here you need to use %%{...}
; Default: %H:%M:%S
time-format = %H:%M

; Available tags:
;   <label-charging> (default)
;   <bar-capacity>
;   <ramp-capacity>
;   <animation-charging>
format-charging = <animation-charging> <label-charging>
format-charging-prefix = "ï§ "
format-charging-prefix-font = 1
format-charging-prefix-foreground = ${color.RED}

; Available tags:
;   <label-discharging> (default)
;   <bar-capacity>
;   <ramp-capacity>
;   <animation-discharging>
format-discharging = <ramp-capacity> <label-discharging>

; Available tags:
;   <label-full> (default)
;   <bar-capacity>
;   <ramp-capacity>
;format-full = <ramp-capacity> <label-full>

; Available tokens:
;   %percentage% (default)
;   %time%
;   %consumption% (shows current charge rate in watts)

label-charging = %percentage%%

; Available tokens:
;   %percentage% (default)
;   %time%
;   %consumption% (shows current discharge rate in watts)
label-discharging = %percentage%%

; Available tokens:
;   %percentage% (default)
format-full = <label-full>
format-full-prefix = "ï "
format-full-prefix-font = 2
format-full-prefix-foreground = ${color.RED}
label-full = %percentage%%

; Only applies if <ramp-capacity> is used
ramp-capacity-0 = ï
ramp-capacity-1 = ï
ramp-capacity-2 = ï
ramp-capacity-3 = ï
ramp-capacity-4 = ï
ramp-capacity-foreground = ${color.YELLOW}
ramp-capacity-font = 2

; Only applies if <animation-charging> is used
animation-charging-0 = ï
animation-charging-1 = ï
animation-charging-2 = ï
animation-charging-3 = ï
animation-charging-4 = ï
animation-charging-foreground = ${color.GREEN}
animation-charging-font = 2
animation-charging-framerate = 700
#+end_src

***** i3

#+begin_src conf :noweb-ref polybar-modules
[module/i3]
type = internal/i3

; Only show workspaces defined on the same output as the bar
;
; Useful if you want to show monitor specific workspaces
; on different bars
;
; Default: false
pin-workspaces = true

; This will split the workspace name on ':'
; Default: false
strip-wsnumbers = true

; Sort the workspaces by index instead of the default
; sorting that groups the workspaces by output
; Default: false
index-sort = true

; Create click handler used to focus workspace
; Default: true
enable-click = true

; Create scroll handlers used to cycle workspaces
; Default: true
enable-scroll = true

; Wrap around when reaching the first/last workspace
; Default: true
wrapping-scroll = false

; Set the scroll cycle direction
; Default: true
reverse-scroll = false

; Use fuzzy (partial) matching on labels when assigning
; icons to workspaces
; Example: code;â will apply the icon to all workspaces
; containing 'code' in the label
; Default: false
fuzzy-match = true

; ws-icon-[0-9]+ = label;icon
; NOTE: The label needs to match the name of the i3 workspace
ws-icon-0 = 1;ï 
ws-icon-1 = 2;ï©
ws-icon-2 = 3;ï»
ws-icon-3 = 4;ï
ws-icon-4 = 5;ï¡
ws-icon-5 = 6;ï¦
ws-icon-6 = 7;ïª
ws-icon-7 = 8;ï
ws-icon-8 = 9;ï
ws-icon-9 = 10;ï³´
ws-icon-default = ï¡¸
; NOTE: You cannot skip icons, e.g. to get a ws-icon-6
; you must also define a ws-icon-5.

; Available tags:
;   <label-state> (default) - gets replaced with <label-(focused|unfocused|visible|urgent)>
;   <label-mode> (default)
format = <label-state><label-mode>
format-background = ${color.BGL}

; Available tokens:
;   %mode%
; Default: %mode%
label-mode = %mode%
label-mode-padding = 1
label-mode-background = ${color.YELLOW}
label-mode-foreground = ${color.BGL}

; Available tokens:
;   %name%
;   %icon%
;   %index%
;   %output%
; Default: %icon%  %name%
label-focused = %icon%
label-focused-foreground = ${color.BGL}
label-focused-background = ${color.BLUE}

; Available tokens:
;   %name%
;   %icon%
;   %index%
;   %output%
; Default: %icon%  %name%
label-unfocused = %icon%
label-unfocused-foreground = ${color.FG}
label-unfocused-background = ${color.BGL}

; Available tokens:
;   %name%
;   %icon%
;   %index%
;   %output%
; Default: %icon%  %name%
label-visible = %icon%
label-visible-foreground = ${color.BGL}
label-visible-background = ${color.GREEN}

; Available tokens:
;   %name%
;   %icon%
;   %index%
;   %output%
; Default: %icon%  %name%
label-urgent = %icon%
label-urgent-foreground = ${color.BGL}
label-urgent-background = ${color.RED}

; Paddings
label-focused-padding = 1
label-unfocused-padding = 1
label-visible-padding = 1
label-urgent-padding = 1

; Separator in between workspaces
label-separator = |
label-separator-padding = 0
label-separator-foreground = ${color.BGL}
label-separator-background = ${color.BGL}
#+end_src

***** CPU

#+begin_src conf :noweb-ref polybar-modules
[module/cpu]
type = internal/cpu

; Seconds to sleep between updates
; Default: 1
interval = 0.5

; Available tags:
;   <label> (default)
;   <bar-load>
;   <ramp-load>
;   <ramp-coreload>
;;format = <label> <ramp-coreload>
format = <label>
format-prefix = ï¾
format-prefix-font = 2
format-prefix-foreground = ${color.YELLOW}

; Available tokens:
;   %percentage% (default) - total cpu load averaged over all cores
;   %percentage-sum% - Cumulative load on all cores
;   %percentage-cores% - load percentage for each core
;   %percentage-core[1-9]% - load percentage for specific core
label = " %percentage%%"

; Spacing between individual per-core ramps
;;ramp-coreload-spacing = 1
;;ramp-coreload-0 = î
;;ramp-coreload-1 = î 
;;ramp-coreload-2 = î¡
;;ramp-coreload-3 = î¢
;;ramp-coreload-4 = î¢
#+end_src

***** Date

#+begin_src conf :noweb-ref polybar-modules
[module/date]
type = internal/date

; Seconds to sleep between updates
interval = 1.0

; See "http://en.cppreference.com/w/cpp/io/manip/put_time" for details on how to format the date string
; NOTE: if you want to use syntax tags here you need to use %%{...}
;;date = %Y-%m-%d%

; Optional time format
time = %I:%M %p

; if `date-alt` or `time-alt` is defined, clicking
; the module will toggle between formats
;;date-alt = %A, %d %B %Y
#time-alt = %d/%m/%Y%
time-alt = %b %d, %G

; Available tags:
;   <label> (default)

format = <label>
format-prefix = "ï "
format-prefix-font = 2
format-prefix-foreground = ${color.CYAN}
format-background = ${color.BGL}

; Available tokens:
;   %date%
;   %time%
; Default: %date%
label = %time%
label-font = 4
label-foreground = ${color.CYAN}
#+end_src

***** Filesystem

#+begin_src conf :noweb-ref polybar-modules
[module/filesystem]
type = internal/fs

; Mountpoints to display
mount-0 = /
;;mount-1 = /home
;;mount-2 = /var

; Seconds to sleep between updates
; Default: 30
interval = 10

; Display fixed precision values
; Default: false
fixed-values = true

; Spacing between entries
; Default: 2
;;spacing = 4

; Available tags:
;   <label-mounted> (default)
;   <bar-free>
;   <bar-used>
;   <ramp-capacity>
format-mounted = <label-mounted>

format-mounted-prefix = ï
format-mounted-prefix-font = 2
format-mounted-prefix-foreground = ${color.PURPLE}

; Available tags:
;   <label-unmounted> (default)
format-unmounted = <label-unmounted>

format-unmounted-prefix = ï
format-unmounted-prefix-font = 2
format-unmounted-prefix-foreground = ${color.PURPLE}

; Available tokens:
;   %mountpoint%
;   %type%
;   %fsname%
;   %percentage_free%
;   %percentage_used%
;   %total%
;   %free%
;   %used%
; Default: %mountpoint% %percentage_free%%
label-mounted = " %free%"

; Available tokens:
;   %mountpoint%
; Default: %mountpoint% is not mounted
label-unmounted = " %mountpoint%: NM"
#+end_src

***** Memory / RAM

#+begin_src conf :noweb-ref polybar-modules
[module/memory]
type = internal/memory

; Seconds to sleep between updates
; Default: 1
interval = 3

; Available tags:
;   <label> (default)
;   <bar-used>
;   <bar-free>
;   <ramp-used>
;   <ramp-free>
;   <bar-swap-used>
;   <bar-swap-free>
;   <ramp-swap-used>
;   <ramp-swap-free>
format = <label>

format-prefix = ï
format-prefix-font = 2
format-prefix-foreground = ${color.CYAN}

; Available tokens:
;   %percentage_used% (default)
;   %percentage_free%
;   %gb_used%
;   %gb_free%
;   %gb_total%
;   %mb_used%
;   %mb_free%
;   %mb_total%
;   %percentage_swap_used%
;   %percentage_swap_free%
;   %mb_swap_total%
;   %mb_swap_free%
;   %mb_swap_used%
;   %gb_swap_total%
;   %gb_swap_free%
;   %gb_swap_used%

label = " %mb_used%"

; Only applies if <ramp-used> is used
;;ramp-used-0 = î
;;ramp-used-1 = î
;;ramp-used-2 = î
;;ramp-used-3 = î
;;ramp-used-4 = î

; Only applies if <ramp-free> is used
;;ramp-free-0 = î
;;ramp-free-1 = î
;;ramp-free-2 = î
;;ramp-free-3 = î
;;ramp-free-4 = î
#+end_src

***** MPD

#+begin_src conf :noweb-ref polybar-modules
[module/mpd]
type = internal/mpd

; Host where mpd is running (either ip or domain name)
; Can also be the full path to a unix socket where mpd is running.
;;host = 127.0.0.1
;;port = 6600
;;password = mysecretpassword

; Seconds to sleep between progressbar/song timer sync
; Default: 1
interval = 2

; Available tags:
;   <label-song> (default)
;   <label-time>
;   <bar-progress>
;   <toggle> - gets replaced with <icon-(pause|play)>
;   <toggle-stop> - gets replaced with <icon-(stop|play)>
;   <icon-random>
;   <icon-repeat>
;   <icon-repeatone> (deprecated)
;   <icon-single> - Toggle playing only a single song. Replaces <icon-repeatone>
;   <icon-consume>
;   <icon-prev>
;   <icon-stop>
;   <icon-play>
;   <icon-pause>
;   <icon-next>
;   <icon-seekb>
;   <icon-seekf>

format-online = <icon-prev> <toggle> <icon-next>
;;format-online-prefix = "ï "
;;format-online-prefix-font = 2
;;format-online-prefix-foreground = ${color.GREEN}
format-online-background = ${color.BGL}

format-playing = ${self.format-online}
format-paused = ${self.format-online}
format-stopped = ${self.format-online}

; Available tags:
;   <label-offline>
format-offline = <label-offline>
format-offline-prefix = "ï¢ "
format-offline-background = ${color.BGL}

; Available tokens:
;   %artist%
;   %album-artist%
;   %album%
;   %date%
;   %title%
; Default: %artist% - %title%
label-song =  "%artist% - %title%"
label-song-maxlen = 25
label-song-ellipsis = true

; Available tokens:
;   %elapsed%
;   %total%
; Default: %elapsed% / %total%
;;abel-time = %elapsed% / %total%

; Available tokens:
;   None
label-offline = "Offline"

; Only applies if <icon-X> is used
icon-play = ï
icon-play-font = 2
icon-play-foreground = ${color.GREEN}
icon-pause = ï
icon-pause-font = 2
icon-pause-foreground = ${color.RED}
icon-stop = ï
icon-stop-foreground = ${color.RED}
icon-prev = ï¦­
icon-prev-font = 1
icon-prev-foreground = ${color.CYAN}
icon-next = ï¦¬
icon-next-font = 1
icon-next-foreground = ${color.CYAN}

; Used to display the state of random/repeat/repeatone/single
; Only applies if <icon-[random|repeat|repeatone|single]> is used
;;toggle-on-foreground = #ff
;;toggle-off-foreground = #55

#+end_src

***** Song

#+begin_src conf :noweb-ref polybar-modules
[module/song]
type = internal/mpd

interval = 2

format-online = <label-song>

format-playing = ${self.format-online}
format-paused = ${self.format-online}
format-stopped = ${self.format-online}

label-song =  "%artist% - %title%"
label-song-maxlen = 25
label-song-ellipsis = true
#+end_src

***** Wired Network

#+begin_src conf :noweb-ref polybar-modules
; If you use both a wired and a wireless network, just add 2 module definitions. For example
[module/wired-network]
type = internal/network
interface = eno1
#+end_src

***** Wireless Network

#+begin_src conf :noweb-ref polybar-modules
[module/wireless-network]
type = internal/network
interface = wlp6s0
#+end_src

***** Generic / Combined Network

#+begin_src conf :noweb-ref polybar-modules
; Normal Module
[module/network]
type = internal/network
interface = eth0

; Seconds to sleep between updates
; Default: 1
interval = 1.0

; Test connectivity every Nth update
; A value of 0 disables the feature
; NOTE: Experimental (needs more testing)
; Default: 0
;ping-interval = 3

; @deprecated: Define min width using token specifiers (%downspeed:min% and %upspeed:min%)
; Minimum output width of upload/download rate
; Default: 3
;;udspeed-minwidth = 5

; Accumulate values from all interfaces
; when querying for up/downspeed rate
; Default: false
accumulate-stats = true

; Consider an `UNKNOWN` interface state as up.
; Some devices have an unknown state, even when they're running
; Default: false
unknown-as-up = true

; Available tags:
;   <label-connected> (default)
;   <ramp-signal>
format-connected = <ramp-signal> <label-connected>

; Available tags:
;   <label-disconnected> (default)

format-disconnected = <label-disconnected>
format-disconnected-prefix = "ïª© "
format-disconnected-prefix-font = 2
format-disconnected-foreground = ${color.FGA}

; Available tags:
;   <label-connected> (default)
;   <label-packetloss>
;   <animation-packetloss>
;;format-packetloss = <animation-packetloss> <label-connected>

; Available tokens:
;   %ifname%    [wireless+wired]
;   %local_ip%  [wireless+wired]
;   %local_ip6% [wireless+wired]
;   %essid%     [wireless]
;   %signal%    [wireless]
;   %upspeed%   [wireless+wired]
;   %downspeed% [wireless+wired]
;   %linkspeed% [wired]
; Default: %ifname% %local_ip%
;label-connected = "%essid% ï %downspeed%"
label-connected = "%{A1:~/.config/rofi/bin/network_menu &:}%essid% | %downspeed%%{A}"

; Available tokens:
;   %ifname%    [wireless+wired]
; Default: (none)
label-disconnected = "%{A1:~/.config/rofi/bin/network_menu &:}Offline%{A}"

; Available tokens:
;   %ifname%    [wireless+wired]
;   %local_ip%  [wireless+wired]
;   %local_ip6% [wireless+wired]
;   %essid%     [wireless]
;   %signal%    [wireless]
;   %upspeed%   [wireless+wired]
;   %downspeed% [wireless+wired]
;   %linkspeed% [wired]
; Default: (none)
;label-packetloss = %essid%
;label-packetloss-foreground = #eefafafa

; Only applies if <ramp-signal> is used
ramp-signal-0 = ï«
ramp-signal-1 = ï«
ramp-signal-2 = ï«
ramp-signal-3 = ï«
ramp-signal-4 = ï«
ramp-signal-foreground = ${color.PURPLE}
ramp-signal-font = 2

; Only applies if <animation-packetloss> is used
;;animation-packetloss-0 = â 
;;animation-packetloss-0-foreground = #ffa64c
;;animation-packetloss-1 = â 
;;animation-packetloss-1-foreground = #000000
; Framerate in milliseconds
;;animation-packetloss-framerate = 500
#+end_src

***** Volume

#+begin_src conf :noweb-ref polybar-modules
[module/volume]
type = internal/pulseaudio

; Sink to be used, if it exists (find using `pacmd list-sinks`, name field)
; If not, uses default sink
sink = alsa_output.pci-0000_12_00.3.analog-stereo

; Use PA_VOLUME_UI_MAX (~153%) if true, or PA_VOLUME_NORM (100%) if false
; Default: true
use-ui-max = false

; Interval for volume increase/decrease (in percent points)
; Default: 5
interval = 5

; Available tags:
;   <label-volume> (default)
;   <ramp-volume>
;   <bar-volume>
format-volume = <ramp-volume> <bar-volume>

; Available tags:
;   <label-muted> (default)
;   <ramp-volume>
;   <bar-volume>
format-muted = <label-muted>
format-muted-prefix = ï¦
format-muted-prefix-font = 2

; Available tokens:
;   %percentage% (default)
;label-volume = %percentage%%

; Available tokens:
;   %percentage% (default)
label-muted = " Mute"
label-muted-foreground = ${color.FGA}

; Only applies if <bar-volume> is used
bar-volume-width = 10
bar-volume-gradient = false

bar-volume-indicator = ï¥
bar-volume-indicator-font = 2
bar-volume-indicator-foreground = ${color.BLUE}

bar-volume-fill = ïª¯
bar-volume-fill-font = 3
bar-volume-foreground-0 = ${color.BLUE}
bar-volume-foreground-1 = ${color.BLUE}
bar-volume-foreground-2 = ${color.BLUE}
bar-volume-foreground-3 = ${color.BLUE}
bar-volume-foreground-4 = ${color.BLUE}

bar-volume-empty = ïª¯
bar-volume-empty-font = 3
bar-volume-empty-foreground = ${color.BGL}

; Only applies if <ramp-volume> is used
ramp-volume-0 = ï¦
ramp-volume-1 = ï¦
ramp-volume-2 = ï¦
ramp-volume-3 = ï§
ramp-volume-4 = ï§
ramp-volume-5 = ï§
ramp-volume-6 = ï¨
ramp-volume-7 = ï¨
ramp-volume-8 = ï¨
ramp-volume-9 = ï¨
ramp-volume-font = 2
ramp-volume-foreground = ${color.BLUE}
#+end_src

***** Temperature

#+begin_src conf :noweb-ref polybar-modules
[module/temperature]
type = internal/temperature

; Seconds to sleep between updates
; Default: 1
interval = 0.5

; Thermal zone to use
; To list all the zone types, run
; $ for i in /sys/class/thermal/thermal_zone*; do echo "$i: $(<$i/type)"; done
; Default: 0
thermal-zone = 0

; Full path of temperature sysfs path
; Use `sensors` to find preferred temperature source, then run
; $ for i in /sys/class/hwmon/hwmon*/temp*_input; do echo "$(<$(dirname $i)/name): $(cat ${i%_*}_label 2>/dev/null || echo $(basename ${i%_*})) $(readlink -f $i)"; done
; to find path to desired file
; Default reverts to thermal zone setting
;;hwmon-path = /sys/devices/platform/coretemp.0/hwmon/hwmon2/temp1_input

; Threshold temperature to display warning label (in degrees celsius)
; Default: 80
warn-temperature = 60

; Whether or not to show units next to the temperature tokens (Â°C, Â°F)
; Default: true
onits = true

; Available tags:
;   <label> (default)
;   <ramp>
format = <ramp> <label>

; Available tags:
;   <label-warn> (default)
;   <ramp>
format-warn = <ramp> <label-warn>

; Available tokens:
;   %temperature% (deprecated)
;   %temperature-c%   (default, temperature in Â°C)
;   %temperature-f%   (temperature in Â°F)
label = %temperature-c%

; Available tokens:
;   %temperature% (deprecated)
;   %temperature-c%   (default, temperature in Â°C)
;   %temperature-f%   (temperature in Â°F)
label-warn = "%temperature-c%"
label-warn-foreground = ${color.RED}

; Requires the <ramp> tag
; The icon selection will range from 0 to `warn-temperature`
; with the current temperature as index.
ramp-0 = ï
ramp-1 = ï
ramp-2 = ï
ramp-3 = ï
ramp-4 = ï
ramp-5 = ï
ramp-6 = ï
ramp-7 = ï
ramp-8 = ï
ramp-9 = ï
ramp-font = 2
ramp-foreground = ${color.YELLOW}
;;ramp-foreground = #55
#+end_src

***** Menu (Application launcher)

#+begin_src conf :noweb-ref polybar-modules
[module/menu]
type = custom/text

content = " ï¬"
content-font = 3
content-foreground = ${color.GREEN}
content-padding = 0

click-left = ~/.config/rofi/bin/launcher
;;click-middle = path_to_script
;;click-right = path_to_script

;;scroll-up = path_to_script
;;scroll-down = path_to_script
#+end_src

***** Sysmenu (Power)

#+begin_src conf :noweb-ref polybar-modules
[module/sysmenu]
type = custom/text

content = "ï "
content-font = 3
content-foreground = ${color.RED}
content-padding = 0

click-left = ~/.config/rofi/bin/power-menu
#+end_src

* Applications

| Arch package | Description                                               |
|--------------+-----------------------------------------------------------|
| =xfce-polkit=  | Polkit agent                                              |
| =i3lock-color= | A fork of i3lock with more color options                  |
| =fortune-mod=  | Provides fun sayings for lockscreens and such             |
| =picom-git=    | The latest version of Compton, which was renamed to Picom |
| =lxdm-gtk3=    | Display manager, occasionally swapped with the ~ly~ package |
| =dunst=        | Notifications                                             |
| =rofi=         | Launcher and more                                         |
| =tmux=         | Terminal multiplexer                                      |
| =ranger=       | File browser                                              |
| =mpv=          | Video player                                              |
| =mpd=          | Music player daemon                                       |
| =ncmpcpp=      | Library manager and =mpd= interface                         |
| =vim=          | Likely the most perfect pure text editor                  |
| =firefox=      | GUI Web Browser                                           |

This section configures the majority of the programs in use in this
system and is the area of this file most likely to change.

** Dunst

=Dunst= serves as the notification system. It's configuration is minimal
and is mostly concerned with color, placement, and format.

#+begin_src conf :noweb yes :tangle ~/.config/dunst/dunstrc
<<dunst-config>>
#+end_src

*** Global

First, set global =Dunst= parameters for things like the font, padding,
width, etc...

#+begin_src conf :noweb-ref dunst-config
[global]
monitor = 0
follow = mouse
geometry = "250x50-24+24"
indicate_hidden = yes
shrink = no
separator_height = 0
padding = 16
horizontal_padding = 24
frame_width = 2
sort = no
idle_threshold = 120
font = M+ 1p 8
line_height = 4
markup = full
format = "<b>%s</b>\n%b"
alignment = left
show_age_threshold = 60
word_wrap = yes
ignore_newline = no
stack_duplicates = false
hide_duplicate_count = yes
show_indicators = no
icon_position = off
sticky_history = yes
history_length = 20
browser = /usr/bin/firefox -new-tab
always_run_script = true
title = Dunst
class = Dunst
#+end_src

*** Shortcuts

Define global key bindings for interacting with Dunst.

- ~Ctrl+Space~ :: Close an open notification.
- ~Ctrl+Shift+Space~ :: Close all open notifications.
- ~Ctrl+`~ :: Step back through notification history, re-opens closed notifications.
- ~Ctrl+Shift+.~ :: Context (@todo: This doesn't actually work)


#+begin_src conf :noweb-ref dunst-config
[shortcuts]
close = ctrl+space
close_all = ctrl+shift+space
history = ctrl+grave
context = ctrl+shift+period
#+end_src

*** Notification Styles

=Dunst= supports styling notifications by their urgency. Low-priority
styles should be unassuming, critical / urgent notifications should
grab your attention.

**** Low-priority Notifications

#+begin_src conf :noweb-ref dunst-config
[urgency_low]
background = "#2f343f"
foreground = "#d8dee8"
timeout = 2
#+end_src

**** Normal Notifications

#+begin_src conf :noweb-ref dunst-config
[urgency_normal]
background = "#2f343f"
foreground = "#d8dee8"
timeout = 4
#+end_src

**** Urgent Notifications

#+begin_src conf :noweb-ref dunst-config
[urgency_critical]
background = "#2f343f"
foreground = "#d8dee8"
frame_color = "#bf616a"
timeout = 0
#+end_src

** Rofi

=Rofi= is the primary launcher application used on these systems. It is
similar to =dmenu= in Linux or =Alfred= on OSX systems.

*** Bins

The scripts in this section all provide some measure of functionality
to different customized implementations of a =Rofi= call. Each of the
following bin scripts have a corresponding ~.rasi~ theme file.

**** Asroot

This Asroot script is used to launch applications as the root user.
@TODO: Confirm the binding, I don't often use this.

#+begin_src sh :tangle ~/.config/rofi/bin/asroot :shebang #!/bin/bash

DIR="$HOME/.config/rofi/bin"

rofi_command="rofi -theme $DIR/../themes/asroot.rasi"

# Apps
terminal="î§© Termite"
files="î¥¬ Thunar"
editor="î¥ Geany"
clifm="î¥» Ranger"
lpad="î¥¨ Leafpad"
vim="î¥ Vim"

# Variable passed to rofi
options="$terminal\n$files\n$editor\n$clifm\n$lpad\n$vim"

# Functions

chosen="$(echo -e "$options" | $rofi_command -p "Run as root(#)" -dmenu -selected-row 0)"
case $chosen in
    $terminal)
        ${DIR}/bin/apps_as_root.sh 'termite'
        ;;
    $files)
        ${DIR}/bin/apps_as_root.sh 'dbus-run-session thunar'
        ;;
    $editor)
        ${DIR}/bin/apps_as_root.sh geany
        ;;
    $clifm)
        ${DIR}/bin/apps_as_root.sh 'termite -e ranger'
        ;;
    $lpad)
        ${DIR}/bin/apps_as_root.sh leafpad
        ;;
    $vim)
        ${DIR}/bin/apps_as_root.sh 'termite -e vim'
        ;;
#+end_src


**** Confirm

A simple confirmation dialog for =Rofi= scripts.

#+begin_src sh :tangle ~/.config/rofi/bin/confirm :shebang #!/bin/bash
rofi -dmenu\
     -i\
     -no-fixed-num-lines\
     -p "Are You Sure? : "\
     -theme ~/.config/rofi/themes/confirm.rasi
#+end_src

**** Launcher

This =Rofi= script is the primary launcher for applications. It uses
=i3wm='s default launcher binding of ~<Mod>~-~d~.

#+begin_src sh :tangle ~/.config/rofi/bin/launcher :shebang #!/bin/bash
DIR="$HOME/.config/"

rofi -no-lazy-grab -show drun -no-default-config -theme $DIR/rofi/themes/launcher.rasi
#+end_src

**** MPD Control via Rofi

This =Rofi= script launches a window that allows management of =MPD=. The
script is bound in the =i3wm= configuration to ~<Ctrl>~-~<Mod>~-~m~.

#+begin_src sh :tangle ~/.config/rofi/bin/mpd

DIR="$HOME/.config/rofi"

rofi_command="rofi -theme $DIR/themes/mpd.rasi"

# Gets the current status of mpd (for us to parse it later on)
status="$(mpc status)"
# Defines the Play / Pause option content
if [[ $status == *"[playing]"* ]]; then
    play_pause="î¦®"
else
    play_pause="î¦º"
fi
active=""
urgent=""

# Display if repeat mode is on / off
tog_repeat="î§"
if [[ $status == *"repeat: on"* ]]; then
    active="-a 4"
elif [[ $status == *"repeat: off"* ]]; then
    urgent="-u 4"
else
    tog_repeat="ï Parsing error"
fi

# Display if random mode is on / off
tog_random="î§"
if [[ $status == *"random: on"* ]]; then
    [ -n "$active" ] && active+=",5" || active="-a 5"
elif [[ $status == *"random: off"* ]]; then
    [ -n "$urgent" ] && urgent+=",5" || urgent="-u 5"
else
    tog_random="ï Parsing error"
fi
stop="î§ "
next="î§"
previous="î§"
music="î¦¨"

# Variable passed to rofi
options="$previous\n$play_pause\n$stop\n$next\n$tog_repeat\n$tog_random"

# Get the current playing song
current=$(mpc current)
# If mpd isn't running it will return an empty string, we don't want to display that
if [[ -z "$current" ]]; then
    current="-"
fi

# Spawn the mpd menu with the "Play / Pause" entry selected by default
chosen="$(echo -e "$options" | $rofi_command -p "$current" -dmenu $active $urgent -selected-row 1)"
case $chosen in
    $previous)
        mpc -q prev && kunst --size 60x60 --silent
        ;;
    $play_pause)
        mpc -q toggle && kunst --size 60x60 --silent
        ;;
    $stop)
        mpc -q stop
        ;;
    $next)
        mpc -q next && kunst --size 60x60 --silent
        ;;
    $tog_repeat)
        mpc -q repeat
        ;;
    $tog_random)
        mpc -q random
        ;;
esac
#+end_src


**** Network

This =Rofi= Network menu provides a simple overview of the current
network connection(s) and the ability to turn wifi off. It is bound to
~<Ctrl>~-~<Mod>~-~n~.

#+begin_src sh :tangle ~/.config/rofi/bin/network
DIR="$HOME/.config/rofi"

rofi_command="rofi -theme $DIR/themes/network.rasi"

## Get info
IFACE="$(nmcli | grep -i interface | awk '/interface/ {print $2}')"
#SSID="$(iwgetid -r)"
#LIP="$(nmcli | grep -i server | awk '/server/ {print $2}')"
#PIP="$(dig +short myip.opendns.com @resolver1.opendns.com )"
STATUS="$(nmcli radio wifi)"

active=""
urgent=""

if (ping -c 1 archlinux.org || ping -c 1 google.com || ping -c 1 bitbucket.org || ping -c 1 github.com || ping -c 1 sourceforge.net) &>/dev/null; then
	if [[ $STATUS == *"enable"* ]]; then
        if [[ $IFACE == e* ]]; then
            connected="î¨"
        else
            connected="î¨"
        fi
	active="-a 0"
	SSID="$(iwgetid -r)"
	PIP="$(wget --timeout=30 http://ipinfo.io/ip -qO -)"
	fi
else
    urgent="-u 0"
    SSID="Disconnected"
    PIP="NA"
    connected="î¨"
fi

## Icons
bmon="î¤"
launch_cli="î§"
launch="î¥"

options="$connected\n$bmon\n$launch_cli\n$launch"

## Main
chosen="$(echo -e "$options" | $rofi_command -p "$SSID : $PIP" -dmenu $active $urgent -selected-row 1)"
case $chosen in
    $connected)
		if [[ $STATUS == *"enable"* ]]; then
			nmcli radio wifi off
		else
			nmcli radio wifi on
		fi
        ;;
    $bmon)
        termite -e bmon
        ;;
    $launch_cli)
        termite -e nmtui
        ;;
    $launch)
        nm-connection-editor
        ;;
esac
#+end_src

**** Network Menu

#+begin_src python :tangle ~/.config/rofi/bin/network-menu :shebang #!/usr/bin/env python3
# encoding:utf8
"""NetworkManager command line dmenu script.
To add new connections or enable/disable networking requires policykit
permissions setup per:
https://wiki.archlinux.org/index.php/NetworkManager#Set_up_PolicyKit_permissions
OR running the script as root
Add dmenu formatting options and default terminal if desired to
$HOME/.config/i3/rofi/themes/networkmenu_config.ini
"""
import pathlib
import struct
import configparser
import itertools
import locale
import os
from os.path import expanduser
import shlex
import sys
import uuid
from subprocess import Popen, PIPE

import gi
gi.require_version('NM', '1.0')
from gi.repository import GLib, NM  # pylint: disable=wrong-import-position

ENV = os.environ.copy()
ENV['LC_ALL'] = 'C'
ENC = locale.getpreferredencoding()

CLIENT = NM.Client.new(None)
LOOP = GLib.MainLoop()
CONNS = CLIENT.get_connections()

CONF = configparser.ConfigParser()
CONF.read(expanduser("~/.config/rofi/themes/networkmenu_config.ini"))

def dmenu_cmd(num_lines, prompt="Networks", active_lines=None):  # pylint: disable=too-many-branches
    """Parse nmd.ini if it exists and add options to the dmenu command
    Args: args - num_lines: number of lines to display
                 prompt: prompt to show
    Returns: command invocation (as a list of strings) for
                dmenu -l <num_lines> -p <prompt> -i ...
    """
    dmenu_command = "dmenu"
    if not CONF.sections():
        res = [dmenu_command, "-i", "-l", str(num_lines), "-p", str(prompt)]
        res.extend(sys.argv[1:])
        return res
    if CONF.has_section('dmenu'):
        args = CONF.items('dmenu')
        args_dict = dict(args)
        dmenu_args = []
        if "dmenu_command" in args_dict:
            command = shlex.split(args_dict["dmenu_command"])
            dmenu_command = command[0]
            dmenu_args = command[1:]
            del args_dict["dmenu_command"]
        if "p" in args_dict and prompt == "Networks":
            prompt = args_dict["p"]
            del args_dict["p"]
        elif "p" in args_dict:
            del args_dict["p"]
        if "rofi" in dmenu_command:
            lines = "-i -dmenu -lines"
            # rofi doesn't support 0 length line, it requires at least -lines=1
            # see https://github.com/DaveDavenport/rofi/issues/252
            num_lines = num_lines or 1
        else:
            lines = "-i -l"
        if "l" in args_dict:
            # rofi doesn't support 0 length line, it requires at least -lines=1
            # see https://github.com/DaveDavenport/rofi/issues/252
            if "rofi" in dmenu_command:
                args_dict['l'] = min(num_lines, int(args_dict['l'])) or 1
            lines = "{} {}".format(lines, args_dict['l'])
            del args_dict['l']
        else:
            lines = "{} {}".format(lines, num_lines)
        if "pinentry" in args_dict:
            del args_dict["pinentry"]
        if "compact" in args_dict:
            del args_dict["compact"]
        if "wifi_chars" in args_dict:
            del args_dict["wifi_chars"]
        rofi_highlight = CONF.getboolean('dmenu', 'rofi_highlight', fallback=False)
        if CONF.has_option('dmenu', 'rofi_highlight'):
            del args_dict["rofi_highlight"]
        if rofi_highlight is True and "rofi" in dmenu_command:
            if active_lines:
                dmenu_args.extend(["-a", ",".join([str(num)
                                                   for num in active_lines])])
    if prompt == "Passphrase":
        if CONF.has_section('dmenu_passphrase'):
            args = CONF.items('dmenu_passphrase')
            args_dict.update(args)
        rofi_obscure = CONF.getboolean('dmenu_passphrase', 'rofi_obscure', fallback=True)
        if CONF.has_option('dmenu_passphrase', 'rofi_obscure'):
            del args_dict["rofi_obscure"]
        if rofi_obscure is True and "rofi" in dmenu_command:
            dmenu_args.extend(["-password"])
        dmenu_password = CONF.getboolean('dmenu_passphrase', 'dmenu_password', fallback=False)
        if CONF.has_option('dmenu_passphrase', 'dmenu_password'):
            del args_dict["dmenu_password"]
        if dmenu_password is True:
            dmenu_args.extend(["-P"])
    extras = (["-" + str(k), str(v)] for (k, v) in args_dict.items())
    res = [dmenu_command, "-p", str(prompt)]
    res.extend(dmenu_args)
    res += list(itertools.chain.from_iterable(extras))
    res[1:1] = lines.split()
    res = list(filter(None, res))  # Remove empty list elements
    res.extend(sys.argv[1:])
    return res


def choose_adapter(client):
    """If there is more than one wifi adapter installed, ask which one to use
    """
    devices = client.get_devices()
    devices = [i for i in devices if i.get_device_type() == NM.DeviceType.WIFI]
    if not devices:  # pylint: disable=no-else-return
        return None
    elif len(devices) == 1:
        return devices[0]
    device_names = "\n".join([d.get_iface() for d in devices]).encode(ENC)
    sel = Popen(dmenu_cmd(len(devices), "CHOOSE ADAPTER:"),
                stdin=PIPE,
                stdout=PIPE,
                env=ENV).communicate(input=device_names)[0].decode(ENC)
    if not sel.strip():
        sys.exit()
    devices = [i for i in devices if i.get_iface() == sel.strip()]
    assert len(devices) == 1
    return devices[0]


def is_modemmanager_installed():
    """Check if ModemManager is installed"""
    with open(os.devnull) as devnull:
        try:
            Popen(["ModemManager"], stdout=devnull, stderr=devnull).communicate()
        except OSError:
            return False
        return True


def bluetooth_get_enabled():
    """Check if bluetooth is enabled via rfkill.
    Returns None if no bluetooth device was found.
    """
    # See https://www.kernel.org/doc/Documentation/ABI/stable/sysfs-class-rfkill
    for path in pathlib.Path('/sys/class/rfkill/').glob('rfkill*'):
        if (path / 'type').read_text().strip() == 'bluetooth':
            return (path / 'soft').read_text().strip() == '0'
    return None


def create_other_actions(client):
    """Return list of other actions that can be taken
    """
    networking_enabled = client.networking_get_enabled()
    networking_action = "Disable" if networking_enabled else "Enable"

    wifi_enabled = client.wireless_get_enabled()
    wifi_action = "Disable" if wifi_enabled else "Enable"

    bluetooth_enabled = bluetooth_get_enabled()
    bluetooth_action = "Disable" if bluetooth_enabled else "Enable"

    actions = [Action("{} Wifi".format(wifi_action), toggle_wifi,
                      not wifi_enabled),
               Action("{} Networking".format(networking_action),
                      toggle_networking, not networking_enabled)]
    if bluetooth_enabled is not None:
        actions.append(Action("{} Bluetooth".format(bluetooth_action),
                              toggle_bluetooth, not bluetooth_enabled))
    actions += [Action("Launch Connection Manager", launch_connection_editor),
                Action("Delete a Connection", delete_connection)]
    if wifi_enabled:
        actions.append(Action("Rescan Wifi Networks", rescan_wifi))
    return actions


def rescan_wifi():
    """
    Rescan Wifi Access Points
    """
    for dev in CLIENT.get_devices():
        if gi.repository.NM.DeviceWifi == type(dev):
            try:
                dev.request_scan_async(None, rescan_cb, None)
                LOOP.run()
            except gi.repository.GLib.Error as err:
                # Too frequent rescan error
                notify("Wifi rescan failed", urgency="critical")
                if not err.code == 6:  # pylint: disable=no-member
                    raise err


def rescan_cb(dev, res, data):
    """Callback for rescan_wifi. Just for notifications
    """
    if dev.request_scan_finish(res) is True:
        notify("Wifi scan complete")
    else:
        notify("Wifi scan failed", urgency="critical")
    LOOP.quit()


def ssid_to_utf8(nm_ap):
    """ Convert binary ssid to utf-8 """
    ssid = nm_ap.get_ssid()
    if not ssid:
        return ""
    ret = NM.utils_ssid_to_utf8(ssid.get_data())
    return ret


def prompt_saved(saved_cons):
    """Prompt for a saved connection."""
    actions = create_saved_actions(saved_cons)
    sel = get_selection(actions)
    sel()


def ap_security(nm_ap):
    """Parse the security flags to return a string with 'WPA2', etc. """
    flags = nm_ap.get_flags()
    wpa_flags = nm_ap.get_wpa_flags()
    rsn_flags = nm_ap.get_rsn_flags()
    sec_str = ""
    if ((flags & getattr(NM, '80211ApFlags').PRIVACY) and
            (wpa_flags == 0) and (rsn_flags == 0)):
        sec_str += " WEP"
    if wpa_flags != 0:
        sec_str += " WPA1"
    if rsn_flags != 0:
        sec_str += " WPA2"
    if ((wpa_flags & getattr(NM, '80211ApSecurityFlags').KEY_MGMT_802_1X) or
            (rsn_flags & getattr(NM, '80211ApSecurityFlags').KEY_MGMT_802_1X)):
        sec_str += " 802.1X"

    # If there is no security use "--"
    if sec_str == "":
        sec_str = "--"
    return sec_str.lstrip()


class Action():  # pylint: disable=too-few-public-methods
    """Helper class to execute functions from a string variable"""
    def __init__(self,
                 name,
                 func,
                 args=None,
                 active=False):
        self.name = name
        self.func = func
        self.is_active = active
        if args is None:
            self.args = None
        elif isinstance(args, list):
            self.args = args
        else:
            self.args = [args]

    def __str__(self):
        return self.name

    def __call__(self):
        if self.args is None:
            self.func()
        else:
            self.func(*self.args)


def conn_matches_adapter(conn, adapter):
    """Return True if the connection is applicable for the given adapter.
    There seem to be two ways for a connection specify what interface it belongs
    to:
    - By setting 'mac-address' in [wifi] to the adapter's MAC
    - By setting 'interface-name` in [connection] to the adapter's name.
    Depending on how the connection was added, it seems like either
    'mac-address', 'interface-name' or neither of both is set.
    """
    # [wifi] mac-address
    setting_wireless = conn.get_setting_wireless()
    mac = setting_wireless.get_mac_address()
    if mac is not None:
        return mac == adapter.get_permanent_hw_address()

    # [connection] interface-name
    setting_connection = conn.get_setting_connection()
    interface = setting_connection.get_interface_name()
    if interface is not None:
        return interface == adapter.get_iface()

    # Neither is set, let's assume this connection is for multiple/all adapters.
    return True


def process_ap(nm_ap, is_active, adapter):
    """Activate/Deactivate a connection and get password if required"""
    if is_active:
        CLIENT.deactivate_connection_async(nm_ap, None, deactivate_cb, nm_ap)
    else:
        conns_cur = [i for i in CONNS if
                     i.get_setting_wireless() is not None and
                     conn_matches_adapter(i, adapter)]
        con = nm_ap.filter_connections(conns_cur)
        if len(con) > 1:
            raise ValueError("There are multiple connections possible")

        if len(con) == 1:
            CLIENT.activate_connection_async(con[0], adapter, nm_ap.get_path(),
                                             None, activate_cb, nm_ap)
        else:
            if ap_security(nm_ap) != "--":
                password = get_passphrase()
            else:
                password = ""
            set_new_connection(nm_ap, password, adapter)
    LOOP.run()


def activate_cb(dev, res, data):
    """Notification if activate connection completed successfully
    """
    try:
        conn = dev.activate_connection_finish(res)
    except GLib.Error:
        conn = None
    if conn is not None:
        notify("Activated {}".format(conn.get_id()))
    else:
        notify("Problem activating {}".format(data.get_id()),
               urgency="critical")
    LOOP.quit()


def deactivate_cb(dev, res, data):
    """Notification if deactivate connection completed successfully
    """
    if dev.deactivate_connection_finish(res) is True:
        notify("Deactivated {}".format(data.get_id()))
    else:
        notify("Problem deactivating {}".format(data.get_id()),
               urgency="critical")
    LOOP.quit()


def process_vpngsm(con, activate):
    """Activate/deactive VPN or GSM connections"""
    if activate:
        CLIENT.activate_connection_async(con, None, None,
                                         None, activate_cb, con)
    else:
        CLIENT.deactivate_connection_async(con, None, deactivate_cb, con)
    LOOP.run()


def create_ap_actions(aps, active_ap, active_connection, adapter):  # pylint: disable=too-many-locals
    """For each AP in a list, create the string and its attached function
    (activate/deactivate)
    """
    active_ap_bssid = active_ap.get_bssid() if active_ap is not None else ""

    names = [ssid_to_utf8(ap) for ap in aps]
    max_len_name = max([len(name) for name in names]) if names else 0
    secs = [ap_security(ap) for ap in aps]
    max_len_sec = max([len(sec) for sec in secs]) if secs else 0

    ap_actions = []

    for nm_ap, name, sec in zip(aps, names, secs):
        bars = NM.utils_wifi_strength_bars(nm_ap.get_strength())
        wifi_chars = CONF.get("dmenu", "wifi_chars", fallback=False)
        if wifi_chars:
            bars = "".join([wifi_chars[i] for i, j in enumerate(bars) if j == '*'])
        is_active = nm_ap.get_bssid() == active_ap_bssid
        compact = CONF.getboolean("dmenu", "compact", fallback=False)
        if compact:
            action_name = u"{}  {}  {}".format(name, sec, bars)
        else:
            action_name = u"{:<{}s}  {:<{}s}  {}".format(name, max_len_name, sec,
                                                         max_len_sec, bars)
        if is_active:
            ap_actions.append(Action(action_name, process_ap,
                                     [active_connection, True, adapter],
                                     active=True))
        else:
            ap_actions.append(Action(action_name, process_ap,
                                     [nm_ap, False, adapter]))
    return ap_actions


def create_vpn_actions(vpns, active):
    """Create the list of strings to display with associated function
    (activate/deactivate) for VPN connections.
    """
    active_vpns = [i for i in active if i.get_vpn()]
    return _create_vpngsm_actions(vpns, active_vpns, "VPN")


def create_wireguard_actions(wgs, active):
    """Create the list of strings to display with associated function
    (activate/deactivate) for Wireguard connections.
    """
    active_wgs = [i for i in active if i.get_connection_type() == "wireguard"]
    return _create_vpngsm_actions(wgs, active_wgs, "Wireguard")


def create_eth_actions(eths, active):
    """Create the list of strings to display with associated function
    (activate/deactivate) for Ethernet connections.
    """
    active_eths = [i for i in active if 'ethernet' in i.get_connection_type()]
    return _create_vpngsm_actions(eths, active_eths, "Eth")


def create_gsm_actions(gsms, active):
    """Create the list of strings to display with associated function
    (activate/deactivate) GSM connections."""
    active_gsms = [i for i in active if
                   i.get_connection() is not None and
                   i.get_connection().is_type(NM.SETTING_GSM_SETTING_NAME)]
    return _create_vpngsm_actions(gsms, active_gsms, "GSM")


def create_blue_actions(blues, active):
    """Create the list of strings to display with associated function
    (activate/deactivate) Bluetooth connections."""
    active_blues = [i for i in active if
                    i.get_connection() is not None and
                    i.get_connection().is_type(NM.SETTING_BLUETOOTH_SETTING_NAME)]
    return _create_vpngsm_actions(blues, active_blues, "Bluetooth")


def create_saved_actions(saved):
    """Create the list of strings to display with associated function
    (activate/deactivate) for VPN connections.
    """
    return _create_vpngsm_actions(saved, [], "SAVED")


def _create_vpngsm_actions(cons, active_cons, label):
    active_con_ids = [a.get_id() for a in active_cons]
    actions = []
    for con in cons:
        is_active = con.get_id() in active_con_ids
        action_name = u"{}:{}".format(con.get_id(), label)
        if is_active:
            active_connection = [a for a in active_cons
                                 if a.get_id() == con.get_id()]
            if len(active_connection) != 1:
                raise ValueError(u"Multiple active connections match"
                                 " the connection: {}".format(con.get_id()))
            active_connection = active_connection[0]

            actions.append(Action(action_name, process_vpngsm,
                                  [active_connection, False], active=True))
        else:
            actions.append(Action(action_name, process_vpngsm,
                                  [con, True]))
    return actions


def create_wwan_actions(client):
    """Create WWWAN actions
    """
    wwan_enabled = client.wwan_get_enabled()
    wwan_action = "Disable" if wwan_enabled else "Enable"
    return [Action("{} WWAN".format(wwan_action), toggle_wwan, not wwan_enabled)]


def combine_actions(eths, aps, vpns, wgs, gsms, blues, wwan, others, saved):
    """Combine all given actions into a list of actions.
    Args: args - eths: list of Actions
                 aps: list of Actions
                 vpns: list of Actions
                 gsms: list of Actions
                 blues: list of Actions
                 wwan: list of Actions
                 others: list of Actions
    """
    compact = CONF.getboolean("dmenu", "compact", fallback=False)
    empty_action = [Action('', None)] if not compact else []
    all_actions = []
    all_actions += eths + empty_action if eths else []
    all_actions += aps + empty_action if aps else []
    all_actions += vpns + empty_action if vpns else []
    all_actions += wgs + empty_action if wgs else []
    all_actions += gsms + empty_action if (gsms and wwan) else []
    all_actions += blues + empty_action if blues else []
    all_actions += wwan + empty_action if wwan else []
    all_actions += others + empty_action if others else []
    all_actions += saved + empty_action if saved else []
    return all_actions


def get_selection(all_actions):
    """Spawn dmenu for selection and execute the associated action."""
    rofi_highlight = CONF.getboolean('dmenu', 'rofi_highlight', fallback=False)
    inp = []

    if rofi_highlight is True:
        inp = [str(action) for action in all_actions]
    else:
        inp = [('== ' if action.is_active else '   ') + str(action)
               for action in all_actions]
    active_lines = [index for index, action in enumerate(all_actions)
                    if action.is_active]

    inp_bytes = "\n".join(inp).encode(ENC)
    command = dmenu_cmd(len(inp), active_lines=active_lines)
    sel = Popen(command, stdin=PIPE, stdout=PIPE,
                env=ENV).communicate(input=inp_bytes)[0].decode(ENC)

    if not sel.rstrip():
        sys.exit()

    if rofi_highlight is False:
        action = [i for i in all_actions
                  if ((str(i).strip() == str(sel.strip())
                       and not i.is_active) or
                      ('== ' + str(i) == str(sel.rstrip('\n'))
                       and i.is_active))]
    else:
        action = [i for i in all_actions if str(i).strip() == sel.strip()]
    assert len(action) == 1, \
        u"Selection was ambiguous: '{}'".format(str(sel.strip()))
    return action[0]


def toggle_networking(enable):
    """Enable/disable networking
    Args: enable - boolean
    """
    toggle = GLib.Variant.new_tuple(GLib.Variant.new_boolean(enable))
    try:
        CLIENT.dbus_call(NM.DBUS_PATH, NM.DBUS_INTERFACE, "Enable", toggle,
                         None, -1, None, None, None)
    except AttributeError:
        # Workaround for older versions of python-gobject
        CLIENT.networking_set_enabled(enable)
    notify("Networking {}".format("enabled" if enable is True else "disabled"))


def toggle_wifi(enable):
    """Enable/disable Wifi
    Args: enable - boolean
    """
    toggle = GLib.Variant.new_boolean(enable)
    try:
        CLIENT.dbus_set_property(NM.DBUS_PATH, NM.DBUS_INTERFACE, "WirelessEnabled", toggle,
                                 -1, None, None, None)
    except AttributeError:
        # Workaround for older versions of python-gobject
        CLIENT.wireless_set_enabled(enable)
    notify("Wifi {}".format("enabled" if enable is True else "disabled"))


def toggle_wwan(enable):
    """Enable/disable WWAN
    Args: enable - boolean
    """
    toggle = GLib.Variant.new_boolean(enable)
    try:
        CLIENT.dbus_set_property(NM.DBUS_PATH, NM.DBUS_INTERFACE, "WwanEnabled", toggle,
                                 -1, None, None, None)
    except AttributeError:
        # Workaround for older versions of python-gobject
        CLIENT.wwan_set_enabled(enable)
    notify("Wwan {}".format("enabled" if enable is True else "disabled"))


def toggle_bluetooth(enable):
    """Enable/disable Bluetooth
    Args: enable - boolean
    References:
    https://github.com/blueman-project/blueman/blob/master/blueman/plugins/mechanism/RfKill.py
    https://www.kernel.org/doc/html/latest/driver-api/rfkill.html
    https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/uapi/linux/rfkill.h?h=v5.8.9
    """
    type_bluetooth = 2
    op_change_all = 3
    idx = 0
    soft_state = 0 if enable else 1
    hard_state = 0

    data = struct.pack("IBBBB", idx, type_bluetooth, op_change_all,
                       soft_state, hard_state)

    try:
        with open('/dev/rfkill', 'r+b', buffering=0) as rff:
            rff.write(data)
    except PermissionError:
        notify("Lacking permission to write to /dev/rfkill.",
               "Maybe you need to add your user to the 'rfkill' group?",
               urgency="critical")
    else:
        notify("Bluetooth {}".format("enabled" if enable else "disabled"))


def launch_connection_editor():
    """Launch nmtui or the gui nm-connection-editor
    """
    terminal = CONF.get("editor", "terminal", fallback="xterm")
    gui_if_available = CONF.getboolean("editor", "gui_if_available", fallback=True)
    if gui_if_available is True:
        try:
            Popen(["gnome-control-center", "network"]).communicate()
        except OSError:
            try:
                Popen(["nm-connection-editor"]).communicate()
            except OSError:
                Popen([terminal, "-e", "nmtui"]).communicate()
    else:
        Popen([terminal, "-e", "nmtui"]).communicate()


def get_passphrase():
    """Get a password
    Returns: string
    """
    pinentry = CONF.get("dmenu", "pinentry", fallback=None)
    if pinentry:
        pin = ""
        out = Popen(pinentry,
                    stdout=PIPE,
                    stdin=PIPE).communicate(input=b'setdesc Get network password\ngetpin\n')[0]
        if out:
            res = out.decode(ENC).split("\n")[2]
            if res.startswith("D "):
                pin = res.split("D ")[1]
        return pin
    return Popen(dmenu_cmd(0, "Passphrase"),
                 stdin=PIPE, stdout=PIPE).communicate()[0].decode(ENC)


def delete_connection():
    """Display list of NM connections and delete the selected one
    """
    conn_acts = [Action(i.get_id(), i.delete_async, args=[None, delete_cb, None]) for i in CONNS]
    conn_names = "\n".join([str(i) for i in conn_acts]).encode(ENC)
    sel = Popen(dmenu_cmd(len(conn_acts), "CHOOSE CONNECTION TO DELETE:"),
                stdin=PIPE,
                stdout=PIPE,
                env=ENV).communicate(input=conn_names)[0].decode(ENC)
    if not sel.strip():
        sys.exit()
    action = [i for i in conn_acts if str(i) == sel.rstrip("\n")]
    assert len(action) == 1, u"Selection was ambiguous: {}".format(str(sel))
    action[0]()
    LOOP.run()


def delete_cb(dev, res, data):
    """Notification if delete completed successfully
    """
    if dev.delete_finish(res) is True:
        notify("Deleted {}".format(dev.get_id()))
    else:
        notify("Problem deleting {}".format(dev.get_id()), urgency="critical")
    LOOP.quit()


def set_new_connection(nm_ap, nm_pw, adapter):
    """Setup a new NetworkManager connection
    Args: ap - NM.AccessPoint
          pw - string
    """
    nm_pw = str(nm_pw).strip()
    profile = create_wifi_profile(nm_ap, nm_pw, adapter)
    CLIENT.add_and_activate_connection_async(profile, adapter, nm_ap.get_path(),
                                             None, verify_conn, profile)
    LOOP.run()


def create_wifi_profile(nm_ap, password, adapter):
    # pylint: disable=C0301
    # From https://cgit.freedesktop.org/NetworkManager/NetworkManager/tree/examples/python/gi/add_connection.py
    # and https://cgit.freedesktop.org/NetworkManager/NetworkManager/tree/examples/python/dbus/add-wifi-psk-connection.py
    # pylint: enable=C0301
    """Create the NM profile given the AP and passphrase"""
    ap_sec = ap_security(nm_ap)
    profile = NM.SimpleConnection.new()

    s_con = NM.SettingConnection.new()
    s_con.set_property(NM.SETTING_CONNECTION_ID, ssid_to_utf8(nm_ap))
    s_con.set_property(NM.SETTING_CONNECTION_UUID, str(uuid.uuid4()))
    s_con.set_property(NM.SETTING_CONNECTION_TYPE, "802-11-wireless")
    profile.add_setting(s_con)

    s_wifi = NM.SettingWireless.new()
    s_wifi.set_property(NM.SETTING_WIRELESS_SSID, nm_ap.get_ssid())
    s_wifi.set_property(NM.SETTING_WIRELESS_MODE, 'infrastructure')
    s_wifi.set_property(NM.SETTING_WIRELESS_MAC_ADDRESS, adapter.get_permanent_hw_address())
    profile.add_setting(s_wifi)

    s_ip4 = NM.SettingIP4Config.new()
    s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, "auto")
    profile.add_setting(s_ip4)

    s_ip6 = NM.SettingIP6Config.new()
    s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, "auto")
    profile.add_setting(s_ip6)

    if ap_sec != "--":
        s_wifi_sec = NM.SettingWirelessSecurity.new()
        if "WPA" in ap_sec:
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_KEY_MGMT,
                                    "wpa-psk")
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_AUTH_ALG,
                                    "open")
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_PSK, password)
        elif "WEP" in ap_sec:
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_KEY_MGMT,
                                    "None")
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE,
                                    NM.WepKeyType.PASSPHRASE)
            s_wifi_sec.set_wep_key(0, password)
        profile.add_setting(s_wifi_sec)

    return profile


def verify_conn(client, result, data):
    """Callback function for add_and_activate_connection_async
    Check if connection completes successfully. Delete the connection if there
    is an error.
    """
    try:
        act_conn = client.add_and_activate_connection_finish(result)
        conn = act_conn.get_connection()
        if not all([conn.verify(),
                    conn.verify_secrets(),
                    data.verify(),
                    data.verify_secrets()]):
            raise GLib.Error
        notify("Added {}".format(conn.get_id()))
    except GLib.Error:  # pylint: disable=catching-non-exception
        try:
            notify("Connection to {} failed".format(conn.get_id()),
                   urgency="critical")
            conn.delete_async(None, None, None)
        except UnboundLocalError:
            pass
    finally:
        LOOP.quit()


def create_ap_list(adapter, active_connections):
    """Generate list of access points. Remove duplicate APs , keeping strongest
    ones and the active AP
    Args: adapter
          active_connections - list of all active connections
    Returns: aps - list of access points
             active_ap - active AP
             active_ap_con - active Connection
             adapter
    """
    aps = []
    ap_names = []
    active_ap = adapter.get_active_access_point()
    aps_all = sorted(adapter.get_access_points(),
                     key=lambda a: a.get_strength(), reverse=True)
    conns_cur = [i for i in CONNS if
                 i.get_setting_wireless() is not None and
                 conn_matches_adapter(i, adapter)]
    try:
        ap_conns = active_ap.filter_connections(conns_cur)
        active_ap_name = ssid_to_utf8(active_ap)
        active_ap_con = [active_conn for active_conn in active_connections
                         if active_conn.get_connection() in ap_conns]
    except AttributeError:
        active_ap_name = None
        active_ap_con = []
    if len(active_ap_con) > 1:
        raise ValueError("Multiple connection profiles match"
                         " the wireless AP")
    active_ap_con = active_ap_con[0] if active_ap_con else None
    for nm_ap in aps_all:
        ap_name = ssid_to_utf8(nm_ap)
        if nm_ap != active_ap and ap_name == active_ap_name:
            # Skip adding AP if it's not active but same name as active AP
            continue
        if ap_name not in ap_names:
            ap_names.append(ap_name)
            aps.append(nm_ap)
    return aps, active_ap, active_ap_con, adapter


def notify(message, details=None, urgency="low"):
    """Use notify-send if available for notifications
    """
    args = ["-u", urgency, message]
    if details is not None:
        args.append(details)

    try:
        Popen(["notify-send"] + args,
              stdout=PIPE, stderr=PIPE).communicate()
    except FileNotFoundError:
        pass


def run():
    """Main script entrypoint"""
    active = CLIENT.get_active_connections()
    adapter = choose_adapter(CLIENT)
    if adapter:
        ap_actions = create_ap_actions(*create_ap_list(adapter, active))
    else:
        ap_actions = []

    vpns = [i for i in CONNS if i.is_type(NM.SETTING_VPN_SETTING_NAME)]
    try:
        wgs = [i for i in CONNS if i.is_type(NM.SETTING_WIREGUARD_SETTING_NAME)]
    except AttributeError:
        # Workaround for older versions of python-gobject with no wireguard support
        wgs = []
    eths = [i for i in CONNS if i.is_type(NM.SETTING_WIRED_SETTING_NAME)]
    blues = [i for i in CONNS if i.is_type(NM.SETTING_BLUETOOTH_SETTING_NAME)]

    vpn_actions = create_vpn_actions(vpns, active)
    wg_actions = create_wireguard_actions(wgs, active)
    eth_actions = create_eth_actions(eths, active)
    blue_actions = create_blue_actions(blues, active)
    other_actions = create_other_actions(CLIENT)
    wwan_installed = is_modemmanager_installed()
    if wwan_installed:
        gsms = [i for i in CONNS if i.is_type(NM.SETTING_GSM_SETTING_NAME)]
        gsm_actions = create_gsm_actions(gsms, active)
        wwan_actions = create_wwan_actions(CLIENT)
    else:
        gsm_actions = []
        wwan_actions = []

    list_saved = CONF.getboolean('dmenu', 'list_saved', fallback=False)
    saved_cons = [i for i in CONNS if i not in vpns + wgs + eths + blues]
    if list_saved:
        saved_actions = create_saved_actions(saved_cons)
    else:
        saved_actions = [Action("Saved connections", prompt_saved, [saved_cons])]

    actions = combine_actions(eth_actions, ap_actions, vpn_actions, wg_actions,
                              gsm_actions, blue_actions, wwan_actions,
                              other_actions, saved_actions)
    sel = get_selection(actions)
    sel()


if __name__ == '__main__':
    run()

# vim: set et ts=4 sw=4 :
#+end_src

**** Power Menu

#+begin_src sh :tangle ~/.config/rofi/bin/power-menu
DIR="$HOME/.config/rofi"

rofi_command="rofi -theme $DIR/themes/powermenu.rasi"

uptime=$(uptime -p | sed -e 's/up //g')

# Options
shutdown="î§"
reboot="î§"
lock="î¦"
suspend="î¦£"
logout="î¦"

# Variable passed to rofi
options="$shutdown\n$reboot\n$lock\n$suspend\n$logout"
_msg="Options  -  yes / y / no / n"

chosen="$(echo -e "$options" | $rofi_command -p "UP - $uptime" -dmenu -selected-row 2)"
case $chosen in
    $shutdown)
		ans=$($HOME/.config/rofi/bin/confirm &)
		if [[ $ans == "yes" ]] || [[ $ans == "YES" ]] || [[ $ans == "y" ]]; then
			systemctl poweroff
		elif [[ $ans == "no" ]] || [[ $ans == "NO" ]] || [[ $ans == "n" ]]; then
			exit
        else
			rofi -theme ~/.config/rofi/themes/askpass.rasi -e "$_msg"
        fi
        ;;
    $reboot)
		ans=$($HOME/.config/rofi/bin/confirm &)
		if [[ $ans == "yes" ]] || [[ $ans == "YES" ]] || [[ $ans == "y" ]]; then
			systemctl reboot
		elif [[ $ans == "no" ]] || [[ $ans == "NO" ]] || [[ $ans == "n" ]]; then
			exit
        else
			rofi -theme ~/.config/rofi/themes/askpass.rasi -e "$_msg"
        fi
        ;;
    $lock)
        ~/.config/i3/bin/i3lock.sh
        ;;
    $suspend)
		ans=$($HOME/.config/rofi/bin/confirm &)
		if [[ $ans == "yes" ]] || [[ $ans == "YES" ]] || [[ $ans == "y" ]]; then
			mpc -q pause
			amixer set Master mute
			betterlockscreen --suspend
		elif [[ $ans == "no" ]] || [[ $ans == "NO" ]] || [[ $ans == "n" ]]; then
			exit
        else
			rofi -theme ~/.config/rofi/themes/askpass.rasi -e "$_msg"
        fi
        ;;
    $logout)
		ans=$($HOME/.config/rofi/bin/confirm &)
		if [[ $ans == "yes" ]] || [[ $ans == "YES" ]] || [[ $ans == "y" ]]; then
			i3-msg exit
		elif [[ $ans == "no" ]] || [[ $ans == "NO" ]] || [[ $ans == "n" ]]; then
			exit
        else
			rofi -theme ~/.config/rofi/themes/askpass.rasi -e "$_msg"
        fi
        ;;
esac

#+end_src

**** Screenshot

Bound in my =i3wm= configuration, this Rofi script launches a menu
window to the right of the screen to allow a selection of different
types of screenshots. The default option, in the center, allows
capturing an area directly to the clipboard for pasting.

#+begin_src sh :tangle ~/.config/rofi/bin/screenshot
DIR="$HOME/.config/rofi"

rofi_command="rofi -theme $DIR/themes/screenshot.rasi"

# Options
screen="î¦¢"
area="î¥"
window="î¦"

# Variable passed to rofi
options="$screen\n$area\n$window"

chosen="$(echo -e "$options" | $rofi_command -p 'Screenshot' -dmenu -selected-row 1)"
case $chosen in
    $screen)
        sleep 1; scrot 'Screenshot_%Y-%m-%d-%S_$wx$h.png' -e 'mv $f $$(xdg-user-dir PICTURES) ; viewnior $$(xdg-user-dir PICTURES)/$f'
        ;;
    $area)
	sleep 1; scrot -s ~/foo.png && xclip -selection clipboard -t image/png ~/foo.png ; sleep 2 ; rm ~/foo.png
        ;;
    $window)
        sleep 1; scrot -u 'Screenshot_%Y-%m-%d-%S_$wx$h.png' -e 'mv $f $$(xdg-user-dir PICTURES) ; viewnior $$(xdg-user-dir PICTURES)/$f'
        ;;
esac
#+end_src

**** Windows

This script launches a Rofi window that allows the browsing of
currently opened windows. It is bound to ~<Ctrl>~-~<Mod>~-~w~ in =i3wm='s
config.

#+begin_src sh :tangle ~/.config/rofi/bin/windows
DIR="$HOME/.config/rofi"

rofi -no-lazy-grab -show window -theme $DIR/themes/window.rasi
#+end_src

*** Theme(s)
**** Ask for Password

#+begin_src css :tangle ~/.config/rofi/themes/askpass.rasi
@import "colors.rasi"

,* {
  transparency: "real";
  background-color: @background;
  text-color: @foreground;
  font: "JetBrains Mono Medium 10";
}

#window {
  border: 2px;
  border-radius: 12px;
  border-color:	@selected;
  width: 300px;
  y-offset: -5%;
  padding: 20px;
}

#entry {
  expand: true;
  width: 150px;
  text-color: @urgent;
}
#+end_src

**** Colors
#+begin_src css :tangle ~/.config/rofi/themes/colors.rasi
,* {
  background:			#1e222a;
  background-alt:		#262A32;
  foreground:			#c8ccd4;
  selected:			#61afef;
  urgent:				#e06c75;
  on:					#98c379;
  off:				#e06c75;
}
#+end_src
**** Confirm
#+begin_src css :tangle ~/.config/rofi/themes/confirm.rasi
@import "colors.rasi"

,* {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  font:            				"JetBrains Mono Medium 10";
}

#window {
  border:							2px;
  border-radius:                  12px;
  border-color:					@selected;
  width:      					220px;
  y-offset: 						-5%;
  padding:    					20px;
}

#entry {
  expand: 						true;
  width: 							150px;
  text-color:						@urgent;
}
element-text {
    background-color: inherit;
    text-color:       inherit;
}
#+end_src

**** Launcher

#+begin_src scss :tangle ~/.config/rofi/themes/launcher.rasi
configuration {
  font: 				"JetBrains Mono Medium 10";
  // bw: 					0;
  location: 				0;
  // padding: 				0;
  fixed-num-lines: 			true;
  show-icons: 				false;
  sidebar-mode: 			true;
  // separator-style: 			"none";
  // hide-scrollbar: 			true;
  // fullscreen: 				false;
  // fake-transparency: 			false;
  scroll-method: 			1;
  window-format: 			"[{w}] Â·Â·Â· {c} Â·Â·Â·   {t}";
  click-to-exit: 			true;
  // show-match: 				false;
  combi-hide-mode-prefix: 		false;
  display-window: 			"ï©";
  display-windowcd: 			"ï";
  display-run: 				"ï¡";
  display-ssh: 				"ï";
  display-drun: 			"ï";
  display-combi: 			"ï";
}

@import "colors.rasi"

,* {
  background-color:             @background;
  text-color:                   @foreground;
}

window {
  border: 0px;
  border-color:	@selected;
  border-radius: 20px;
  padding: 30;
  width: 40%;
}

prompt {
  font: 							"Iosevka Nerd Font 12";
  spacing: 						0;
  border: 						0;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							" ";
  margin:							0px 4px 0px 0px;
  text-color: 					inherit;
}

entry {
  spacing:    					0;
  text-color: 					@foreground;
}

case-indicator {
  spacing:    					0;
  text-color: 					@foreground;
}

inputbar {
  spacing:    					0px;
  text-color: 					@foreground;
  padding:    					1px;
  children: 						[ prompt,textbox-prompt-colon,entry,case-indicator ];
}

mainbox {
  border: 						0px;
  border-color: 					@selected;
  padding: 						6;
}

listview {
  fixed-height: 					0;
  border: 						0px;
  border-color: 					@selected;
  spacing: 						4px;
  scrollbar: 						false;
  padding: 						5px 5px 0px 5px;
  lines:				10;
  columns:		                2;
}

element {
  border: 						0px;
  border-radius: 					10px;
  padding: 						5px;
}
element normal.normal {
  background-color: 				@background;
  text-color:       				@foreground;
}
element normal.urgent {
  background-color: 				@background;
  text-color:       				@red;
}
element normal.active {
  background-color: 				@on;
  text-color:       				@background;
}
element selected.normal {
  background-color: 				@selected;
  text-color:       				@background;
}
element selected.urgent {
  background-color: 				@background;
  text-color:       				@off;
}
element selected.active {
  background-color: 				@selected;
  text-color:       				@background;
}
element alternate.normal {
  background-color: 				@background;
  text-color:       				@foreground;
}
element alternate.urgent {
  background-color: 				@background;
  text-color:       				@foreground;
}
element alternate.active {
  background-color: 				@background;
  text-color:       				@foreground;
}

sidebar {
  border:       					0px;
  border-color: 					@selected;
  border-radius: 					0px;
}

button {
  font: 							"Iosevka Nerd Font 12";
  background-color:             	@off;
  margin: 						5px;
  padding: 						5px;
  text-color: 					@background;
  border: 						0px;
  border-radius: 					10px;
  border-color: 					@foreground;
}

button selected {
  font: 							"Iosevka Nerd Font 12";
  background-color:             	@on;
  text-color: 					@background;
  border: 						0px;
  border-radius: 					10px;
  border-color: 					@foreground;
}

scrollbar {
  width:        					4px;
  border:       					0px;
  handle-color: 					@foreground;
  handle-width: 					8px;
  padding:      					0;
}

message {
  border: 						0px;
  border-color: 					@selected;
  padding: 						1px;
}

textbox {
  text-color: 					@foreground;
}

element-text {
    background-color: inherit;
    text-color:       inherit;
}
#+end_src

**** Window

#+begin_src css :tangle ~/.config/rofi/themes/window.rasi
configuration {
    font:                           "JetBrains Mono Medium 10";
    show-icons:                     false;
	icon-theme: 					"Papirus";
    display-drun: 					":";
    drun-display-format:            "{name}";
    threads:                        0;
    scroll-method:                  0;
    disable-history:                false;
    fullscreen:                     false;
	hide-scrollbar: 				true;
	sidebar-mode: 					false;
}

@import "colors.rasi"

window {
    transparency:                   "real";
    background-color:               @background;
    text-color:                     @foreground;
    border:							0px;
    border-radius:                  12px;
    border-color:					@selected;
    width:                          500px;
    location:                       center;
    anchor:                         center;
    x-offset:                       0;
    y-offset:                       0;
    padding:                        20;
}

prompt {
    enabled: 						true;
	padding: 						4px 4px 6px 6px;
	background-color: 				@background;
	text-color: 					@foreground;
}

textbox-prompt-colon {
	expand: 						false;
	str: 							"î¥";
    background-color:               @background;
    text-color:                     @urgent;
    padding:                        5px 0px 0px 4px;
	font:							"feather 10";
}

inputbar {
	children: 						[ textbox-prompt-colon, prompt ];
    background-color:               @background;
    text-color:                     @foreground;
    expand:                         false;
    border:                  		0px 0px 0px 0px;
    border-radius:                  0px;
    border-color:                  	@selected;
    margin:                         0px 0px 0px 0px;
    padding:                        0px 0px 0px 0px;
    position:                       center;
}


entry {
    background-color:               @background;
    text-color:                     @foreground;
    placeholder-color:              @foreground;
    expand:                         true;
    horizontal-align:               0;
    placeholder:                    "Search";
    blink:                          true;
    padding:                        4px 0px 0px 0px;
}

case-indicator {
    background-color:               @background;
    text-color:                     @foreground;
    spacing:                        0;
}


listview {
    background-color:               @background;
    columns:                        1;
    lines:							8;
    spacing:                        5px;
    cycle:                          true;
    dynamic:                        true;
    layout:                         vertical;
}

mainbox {
    background-color:               @background;
    children:                       [ inputbar, listview ];
    spacing:                       	5px;
    padding:                        5px 5px 5px 5px;
}

element {
    background-color:               @background;
    text-color:                     @foreground;
    orientation:                    horizontal;
	border:							0px;
    border-radius:                  0px;
    border-color:					@selected;
    padding:                        5px 5px 5px 5px;
}

element-icon {
    size:                           24px;
    border:                         0px;
}

element-text {
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
  margin:                         2px 0px 2px 2px;
  background-color: inherit;
  text-color:       inherit;
}

element selected {
    background-color:               @selected;
    text-color:                     @background;
    border:                  		0px;
    border-radius:                  10px;
    border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
  border-radius: 10px;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src

**** Asroot

#+begin_src css :tangle ~/.config/rofi/themes/asroot.rasi

configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
}

@import "colors.rasi"

window {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          300px;
  location:                       center;
  anchor:                         center;
  x-offset:                       0;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"î¥¹";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 10";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							6;
  spacing:                        5px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         vertical;
}

mainbox {
  background-color:               @background;
  children:                       [ inputbar, listview ];
  spacing:                       	5px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background;
  text-color:                     @foreground;
  orientation:                    horizontal;
  border:							0px;
  border-radius:                  0px;
  border-color:					@selected;
  padding:                        5px 5px 5px 5px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
  margin:                         2px 0px 2px 2px;
  background-color: inherit;
  text-color: inherit;
}
element selected {
  background-color:               @selected;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  10px;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src

**** Network
#+begin_src css :tangle ~/.config/rofi/themes/network.rasi
configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
}

@import "colors.rasi"

window {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          435px;
  location:                       center;
  anchor:                         center;
  x-offset:                       0;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"î§";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 12";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							6;
  spacing:                        15px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         horizontal;
}

mainbox {
  background-color:               @background;
  children:                       [ inputbar, listview ];
  spacing:                       	10px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background-alt;
  text-color:                     @foreground;
  orientation:                    horizontal;
  font:							"feather 12";
  border:							0px;
  border-radius:                  100%;
  border-color:					@selected;
  padding:                        30px 30px 36px 30px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  font:							"feather 18";
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
  background-color: inherit;
  text-color:       inherit;
}

element selected {
  background-color:               @selected;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  100%;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src
**** Network Menu
#+begin_src css :tangle ~/.config/rofi/themes/networkmenu.rasi
configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
}

@import "colors.rasi"

window {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          500px;
  location:                       center;
  anchor:                         center;
  x-offset:                       0;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"î¨";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 10";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							8;
  spacing:                        5px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         vertical;
}

mainbox {
  background-color:               @background;
  children:                       [ inputbar, listview ];
  spacing:                       	5px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background;
  text-color:                     @foreground;
  orientation:                    horizontal;
  border:							0px;
  border-radius:                  0px;
  border-color:					@selected;
  padding:                        5px 5px 5px 5px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
  margin:                         2px 0px 2px 2px;
  background-color: inherit;
  text-color:       inherit;
}

element selected {
  background-color:               @selected;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  10px;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src
**** Network Menu Config
#+begin_src sh :tangle ~/.config/rofi/themes/networkmenu_config.ini
[dmenu]
dmenu_command = rofi -dmenu -theme ~/.config/rofi/themes/networkmenu.rasi
# # Note that dmenu_command can contain arguments as well like `rofi -width 30`
# # Rofi and dmenu are set to case insensitive by default `-i`
# l = number of lines to display, defaults to number of total network options
# fn = font string
# nb = normal background (name, #RGB, or #RRGGBB)
# nf = normal foreground
# sb = selected background
# sf = selected foreground
# b =  (just set to empty value and menu will appear at the bottom
# m = number of monitor to display on
# p = Custom Prompt for the networks menu
# pinentry = Pinentry command
# rofi_highlight = <True or False> # (Default: False) use rofi highlighting instead of '**'

# # override normal foreground and background colors (dmenu) or use the
# # -password option (rofi) to obscure passphrase entry
# [dmenu_passphrase]
# nf = #222222
# nb = #222222
# rofi_obscure = True

[editor]
terminal = termite
gui_if_available = True
# terminal = <name of terminal program>
# gui_if_available = <True or False>
#+end_src

**** MPD
#+begin_src css :tangle ~/.config/rofi/themes/mpd.rasi
configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
}

@import "colors.rasi"

window {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          630px;
  location:                       center;
  anchor:                         center;
  x-offset:                       0;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"î¦¨";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 12";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							6;
  spacing:                        15px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         horizontal;
}

mainbox {
  background-color:               @background;
  children:                       [ inputbar, listview ];
  spacing:                       	10px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background-alt;
  text-color:                     @foreground;
  orientation:                    horizontal;
  font:							"feather 12";
  border:							0px;
  border-radius:                  100%;
  border-color:					@selected;
  padding:                        30px 30px 36px 30px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  font:							"feather 18";
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
  background-color: inherit;
  text-color:       inherit;
}

element selected {
  background-color:               @selected;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  100%;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src

**** Power Menu
#+begin_src css :tangle ~/.config/rofi/themes/powermenu.rasi
configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
  location:                       4;
}

@import "colors.rasi"

window {
  transparency:                   "fake";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          160px;
  x-offset:                       -15;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"î§";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 12";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							5;
  spacing:                        15px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         vertical;
}

mainbox {
  background-color:               @background;
  children:                       [ listview ];
  spacing:                       	10px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background-alt;
  text-color:                     @foreground;
  orientation:                    vertical;
  font:							"feather 12";
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  padding:                        38px 0px 48px 38px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  font:							"feather 24";
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
  background-color: inherit;
  text-color:       inherit;
}

element selected {
  background-color:               @urgent;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  12px;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src
**** Screenshot
#+begin_src css :tangle ~/.config/rofi/themes/screenshot.rasi
configuration {
  font:                           "JetBrains Mono Medium 10";
  show-icons:                     false;
  icon-theme: 					"Papirus";
  display-drun: 					":";
  drun-display-format:            "{name}";
  threads:                        0;
  scroll-method:                  0;
  disable-history:                false;
  fullscreen:                     false;
  hide-scrollbar: 				true;
  sidebar-mode: 					false;
  location:                       4;
}

@import "colors.rasi"

window {
  transparency:                   "real";
  background-color:               @background;
  text-color:                     @foreground;
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  width:                          160px;
  x-offset:                       -15;
  y-offset:                       0;
  padding:                        20;
}

prompt {
  enabled: 						true;
  padding: 						4px 4px 6px 6px;
  background-color: 				@background;
  text-color: 					@foreground;
}

textbox-prompt-colon {
  expand: 						false;
  str: 							"î¦";
  background-color:               @background;
  text-color:                     @urgent;
  padding:                        5px 0px 0px 4px;
  font:							"feather 12";
}

inputbar {
  children: 						[ textbox-prompt-colon, prompt ];
  background-color:               @background;
  text-color:                     @foreground;
  expand:                         false;
  border:                  		0px 0px 0px 0px;
  border-radius:                  0px;
  border-color:                  	@selected;
  margin:                         0px 0px 0px 0px;
  padding:                        0px 0px 0px 0px;
  position:                       center;
}


entry {
  background-color:               @background;
  text-color:                     @foreground;
  placeholder-color:              @foreground;
  expand:                         true;
  horizontal-align:               0;
  placeholder:                    "Search";
  blink:                          true;
  padding:                        4px 0px 0px 0px;
}

case-indicator {
  background-color:               @background;
  text-color:                     @foreground;
  spacing:                        0;
}


listview {
  background-color:               @background;
  columns:                        1;
  lines:							3;
  spacing:                        15px;
  cycle:                          true;
  dynamic:                        true;
  layout:                         vertical;
}

mainbox {
  background-color:               @background;
  children:                       [ listview ];
  spacing:                       	10px;
  padding:                        5px 5px 5px 5px;
}

element {
  background-color:               @background-alt;
  text-color:                     @foreground;
  orientation:                    vertical;
  font:							"feather 12";
  border:							0px;
  border-radius:                  12px;
  border-color:					@selected;
  padding:                        38px 0px 48px 38px;
}

element-icon {
  size:                           24px;
  border:                         0px;
}

element-text {
  font:							"feather 24";
  expand:                         true;
  horizontal-align:               0;
  vertical-align:                 0;
  background-color: inherit;
  text-color:       inherit;
}

element selected {
  background-color:               @urgent;
  text-color:                     @background;
  border:                  		0px;
  border-radius:                  12px;
  border-color:                  	@selected;
}

element.active,
element.selected.urgent {
  background-color: @on;
  text-color: @background;
  border-color: @on;
}

element.selected.urgent {
  border-color: @urgent;
}

element.urgent,
element.selected.active {
  background-color: @off;
  text-color: @background;
  border-color: @off;
}

element.selected.active {
  border-color: @selected;
}
#+end_src

** Tmux

=Tmux= handles terminal multiplexing, much like =screen=. Because the
system uses =i3=, this isn't actually an extremely integral part of the
usual workflow, though it is useful to have configured for when its
needed.

@todo I think tmux now supports using XDG_CONFIG_HOME so it can be stored in ~/.config/tmux/.

The configuration starts by defining some simpler keybindings than
what =tmux= ships with. To do that, the default prefix of ~Ctrl-b~ is
unbound, and then set to ~Ctrl-a~. All =tmux= commands will begin with
that default prefix.

#+begin_src conf :noweb-ref tmux-config
unbind C-b
set -g prefix C-a
#+end_src

When using =tmux= sessions within other =tmux= sessions, things can get a
bit tricky with the key binds. This tells =tmux= to send the prefix into
the nested session if focused.

#+begin_src conf :noweb-ref tmux-config
bind C-a send-prefix
#+end_src

Define the keys to be used for navigating and splitting panes in
=tmux=. Keep in mind that all of the following keys are preceded by
the earlier defined default prefix.

 - ~|~ :: Split window horizontally
 - ~-~ :: Split window vertically
 - ~r~ :: Reload =tmux= configuration in place
 - ~hjkl~ :: Move around panes with ~hjkl~
 - ~HJKL~ :: Resize panes in corresponding ~hjkl~ directions
 - ~v~ :: Begin selection for copying to clipboard
 - ~y~ :: Copy selection to clipboard via ~xclip~.

#+begin_src conf :noweb-ref tmux-config
# Split windows horizontally with |
bind | split-window -h
# Split windows vertically with -
bind - split-window -v
# Reload configuration with 'r'
unbind r
bind r source-file ~/.tmux.conf
# Move around panes with hjkl
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# Resize panes with HJKL
bind-key H resize-pane -L 5
bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key L resize-pane -R 5
# Vim keystrokes for select and copy (yank) to clipboard.
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"
#+end_src

Configure general =tmux= settings:
 - Enable mouse usage to select and resize panes, etc...
 - Use ~vi~ mode
 - Start the window index at 1 instead of 0
 - Remove delay for an ~Esc~ key press
 - Add a 600ms delay for a repeated key press

#+begin_src conf :noweb-ref tmux-config
# Be colorful
set -g default-terminal "screen-256color"

# Enable the mouse
set-option -g mouse on

# Set the base index to 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1

# Use Vi mode
set -g status-keys vi
setw -g mode-keys vi
set-window-option -g mode-keys vi

# No delay for escape key press.
set -sg escape-time 0
# Set delay for repeat key press.
set -sg repeat-time 600
#+end_src

Set the =Tmux= colors and general theme.

#+begin_src conf :noweb-ref tmux-config
set -g status-bg colour236
set -g status-fg white
set -g status-justify centre
set-window-option -g window-status-current-style bg=colour167,fg=colour236,bold
set -g status-interval 60
set -g status-left-length 30
set -g status-left '#[fg=green](#S) #(whoami)'
set -g status-right '#[fg=yellow]#(curl "wttr.in/?format=3")#[default] #[fg=white]%H:%M#[default]'
#+end_src

** ranger

=Ranger= is a terminal based file browser, think of it like Thunar or
Nautilus, but available without a UI.

The default configuration and settings for =Ranger= are actually quite
good, so there's little need to customize it too much.

One of the nice features that =Ranger= provides is the ability to add your own commands, written in Python.

The following configuration defines:

| Command | Description                                                                        |
|---------+------------------------------------------------------------------------------------|
| ~:empty~  | Empties the ~/home/<user>/.Trash~ directory                                          |
| ~:moveit~ | An in-application wrapper for the ~mv~ command, without support for flags or options |

#+begin_src python :tangle ~/.config/ranger/commands.py :shebang #!/usr/bin/env python3
import os
from ranger.api.commands import Command

class empty(Command):
    """:empty
    Empties the trash directory ~/.Trash
    """

    def execute(self):
        self.fm.run("rm -rf ~/.Trash/{*,.[^.]*}")

class moveit(Command):
    """:moveit
    Moves stuff somewhere else
    """
    def execute(self):
        # reference to the currently selected file.
        target_filename = self.fm.thisfile.path
        self.fm.run("mv " + target_filename + ' ' + self.arg(1))
#+end_src

** mpv

=mpv= is a media player based on Mplayer and mplayer2. It replaces
=mplayer= in this system configuration.

/Note: Any references to ~mplayer~ in any of this repository's files are
legacy and should be updated to use ~mpv~ instead./

This configuration for =mpv= is somewhat simplistic but provides some
sane defaults that can be further customized as needed.

#+begin_src conf :noweb yes :tangle ~/.config/mpv/mpv.conf
<<mpv-config>>
#+end_src

*** Video Settings

Tell =mpv= not to start in fullscreen mode by default.

#+begin_src conf :noweb-ref mpv-config
fs=no
#+end_src

When starting, =mpv= should always attempt to center its window on the screen.

#+begin_src conf :noweb-ref mpv-config
geometry=50%:50%
#+end_src

Keep the =mpv= window open when a file has finished playing.

#+begin_src conf :noweb-ref mpv-config
keep-open=yes
#+end_src

It can be annoying to wait for a window to display when loading
=mpv=. By default the program waits until a video file has finished
loading before rendering the window which can sometimes lead users to
opening a video twice, assuming the first =mpv= invocation didn't work.

Set the =mpv= window to open immediately, whether or not the file has
finished loading.

One caveat of this configuration is that once a file has finished
loading, the =mpv= window will resize accordingly.

#+begin_src conf :noweb-ref mpv-config
force-window=immediate
#+end_src

Disable the On Screen Controller (OSC).

#+begin_src conf :noweb-ref mpv-config
osc=no
#+end_src

Keep the =mpv= player window on top of all other windows.

#+begin_src conf :noweb-ref mpv-config
ontop=yes
#+end_src

Specify high quality video rendering presets (for ~--vo=gpu~ only).

Note that this can cause performance issues with some drivers and
GPUs. If there are problems with =mpv=, commenting out this setting is a
good first step.

#+begin_src conf :noweb-ref mpv-config
profile=gpu-hq
#+end_src

Enable hardware decoding if available.

Often, this does not work with all video outputs, but should work well
with default settings on most systems. If performance or energy usage
become an issue, forcing the ~vdpau~ or ~vaapi~ VOs may or may not help.

#+begin_src conf :noweb-ref mpv-config
hwdec=auto
#+end_src

*** Audio Settings

Specify default audio device. You can list devices with:
~--audio-device=help~. The option takes the device string (the stuff
between the '...').

#+begin_src conf :noweb-ref mpv-config
audio-device=alsa/default
#+end_src

Do not filter audio to keep pitch when changing playback speed.

#+begin_src conf :noweb-ref mpv-config
audio-pitch-correction=no
#+end_src

Output 5.1 audio natively, and upmix/downmix audio with a different
format.

#+begin_src conf :noweb-ref mpv-config
audio-channels=5.1
#+end_src

Disable any automatic remix, _if_ the audio output accepts the audio format.
of the currently played file. See caveats mentioned in the manpage.

#+begin_src conf :noweb-ref mpv-config
audio-channels=auto
#+end_src

*** Other settings

Pretend to be a web browser. This might fix playback with some
streaming sites, but also will break with certain streams.

#+begin_src conf :noweb-ref mpv-config
user-agent="Mozilla/5.0"
#+end_src

** mpd

=mpd=, or Music player daemon, is the main back-end for music and
audio. For the most basic interaction, a front-end like =ncmpcpp= is
needed.

A typical usage of =mpd= with these dotfiles is to run the daemon via
=Systemd= as the logged in user.

#+begin_src conf :noweb yes :tangle ~/.config/mpd/mpd.conf
<<mpd-config>>
#+end_src

In this setup, =mpd='s main library is a directory mounted at
~/home/<user>/Audio/Music~ and all =mpd= related files are stored in the
~$XDG_CONFIG_HOME/mpd~ directory.

#+begin_src conf :noweb-ref mpd-config
music_directory  "~/Audio/Music"
playlist_directory  "~/.config/mpd/playlists"
db_file   "~/.config/mpd/database"
log_file   "syslog"
pid_file   "~/.config/mpd/pid"
state_file   "~/.config/mpd/state"
sticker_file   "~/.config/mpd/sticker.sql"
#+end_src

Bind =mpd= to the local system.

#+begin_src conf :noweb-ref mpd-config
bind_to_address  "0.0.0.0"
#+end_src

Automatically update the library, searching three levels deep in the
directory hierarchy for changes.

#+begin_src conf :noweb-ref mpd-config
auto_update "yes"
auto_update_depth "3"
#+end_src

Follow symbolic links in the library. This allows the library to be
located off-system and mounted somewhere that isn't the user's home
directory.

#+begin_src conf :noweb-ref mpd-config
follow_outside_symlinks "yes"
follow_inside_symlinks  "yes"
#+end_src

Use ~curl~ for Input, see manpage.

#+begin_src conf :noweb-ref mpd-config
input {
        plugin "curl"
}
#+end_src

The rest of =mpd='s configuration can be left to its default values.

On a new system, the playlists directory will need to be created
before =mpd= can use it.

#+begin_src sh :noweb-ref create-mpd-dirs
mkdir -p ~/.config/mpd/playlists
#+end_src

** ncmpcpp

Configure the =ncmpcpp= music library front-end for =mpd=.

#+begin_src emacs-lisp :noweb yes :tangle ~/.config/ncmpcpp/config
<<ncmpcpp-config>>
#+end_src

#+begin_src conf :noweb-ref ncmpcpp-config
mpd_host = 127.0.0.1
mpd_port = 6600

browser_sort_mode = name
browser_sort_format = {%A - }{%t}|{%f} {(%l)}
song_columns_list_format = (6f)[green]{NE} (30)[]{a} (30)[white]{t} (30)[cyan]{b} (7f)[magenta]{l}

playlist_show_remaining_time = yes
playlist_shorten_total_times = yes
playlist_separate_albums = yes

browser_display_mode = columns
search_engine_display_mode = columns
playlist_editor_display_mode = columns

autocenter_mode = yes
centered_cursor = yes

default_place_to_search_in = database
user_interface = alternative

media_library_primary_tag = album_artist
cyclic_scrolling = yes

allow_for_physical_item_deletion = no

startup_screen = "playlist"
startup_slave_screen = "playlist"

locked_screen_width_part = 20
ask_for_locked_screen_width_part = no

clock_display_seconds = yes
display_volume_level = yes
display_bitrate = yes
display_remaining_time = yes

ignore_leading_the = yes
media_library_sort_by_mtime = no

enable_window_title = yes

external_editor = vim
use_console_editor = yes
# execute_on_song_change = "~/.config/ncmpcpp/art.sh"
#+end_src

** vim

=Vim= configuration. Ol' trusty.

#+begin_src emacs-lisp :noweb yes :tangle ~/.vimrc
<<vim-config>>
#+end_src

First, setup plugin management for =Vim= using =plug.vim=. A lot of =vim=
functionality is pulled in via plugins.

Check for a plugin manager, and, if it doesn't exist, go get it.

#+begin_src conf :noweb-ref vim-config
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
#+end_src

Call the plugin manager when =Vim= starts and define the remote plugins
to be installed.

#+begin_src conf :noweb-ref vim-config
call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'plasticboy/vim-markdown'
Plug 'pangloss/vim-javascript'
Plug 'cakebaker/scss-syntax.vim'
Plug 'evidens/vim-twig'
Plug 'morhetz/gruvbox', { 'as': 'gruvbox' }

" call these on-demand
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }

call plug#end()
#+end_src

Set =Vim= to close if the ~nerdtree~ plugin window is the only window left
open.

#+begin_src conf :noweb-ref vim-config
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
#+end_src

Disable folding in the ~vim-markdown~ plugin.

#+begin_src conf :noweb-ref vim-config
let g:vim_markdown_folding_disabled = 1
#+end_src

Setup the color scheme for the ~lightline~ plugin.

#+begin_src conf :noweb-ref vim-config
let g:lightline = {
  \ 'colorscheme': 'seoul256',
  \ }
#+end_src

Set up customization of =vim='s key mapping.

| Key(s)     | Description                                                          |
|------------+----------------------------------------------------------------------|
| ~,~          | Leader key                                                           |
| ~kj~         | An extra ~Esc~                                                         |
| <leader>ww | Fast save a buffer                                                   |
| <C-n>      | Toggle the ~NerdTree~ plugin window                                    |
| <leader>wq | Fast save and quit a buffer                                          |
| <leader>tn | New tab                                                              |
| <leader>tm | Move tab                                                             |
| <leader>.  | Next tab                                                             |
| <leader>'  | Previous tab                                                         |
| <leader>p  | Toggle Paste mode                                                    |
| <leader>ss | Strip spaces (custom function)                                       |
| <C-T>      | Toggle transparency (custom function)                                |
| <C-L>      | Redraw the screen and turn off search highlighting until next search |

#+begin_src conf :noweb-ref vim-config
:let mapleader = ","
inoremap kj <c-c>`^
map <C-n> :NERDTreeToggle<CR>
nmap <leader>ww :w!<cr>
nmap <leader>wq :wq!<cr>
nmap <leader>q :q!<cr>
map <leader>tn :tabnew<cr> " Tab only map <leader>to :tabonly<cr>
map <leader>tm :tabmove<cr>
nnoremap <leader>. :tabnext<CR>
nnoremap <leader>' :tabprevious<CR>
set pastetoggle=<leader>p
map <leader>p :set invpaste paste?<CR>
nnoremap <leader>ss :call StripWhitespace()<CR>
nnoremap <C-T> :call ToggleTransparent()<CR>
nnoremap <C-L> :nohl<CR><C-L>
#+end_src

Define general =Vim= settings.

#+begin_src conf :noweb-ref vim-config
set background=dark
"colorscheme gruvbox
"let g:colors_name='gruvbox'
set t_Co=256
syntax on
set autoindent " When opening a new line and no filetype-specific indenting is enabled, keep same indent.
set backspace=indent,eol,start " Allow backspacing over auto-indents, line breaks, and start of insert action
set colorcolumn=+1 " Highlight the column width border (+1 means highlight line 81 if textwidth is 80).
set confirm " Raise a dialog asking to save changed files.
set cursorline " Highlight the cursor line.
set encoding=utf-8 nobomb " Set encoding without BOM
set expandtab " Expand tabs into spaces.
set foldcolumn=4 " Indicate a fold with 4 columns.
set foldenable " Enable folds.
set foldlevel=2 " Fold / unfold this many.
set foldmethod=syntax " Set the fold method, see :help foldmethod.
set foldminlines=0 " Set a minimum value for closed folds.
set foldnestmax=3 " Set maximum nesting of folds for syntax method.
set history=1000 " Remember this many lines for the five history tables.
set hlsearch " Highlight searches (<C-L> to toggle).
set ignorecase " Use case insensitive search.
set incsearch " Highlight incrementally as search is typed.
set laststatus=2 " Always display the status line.
set magic " Enable extended regexes.
set mouse=a " Enable use of the mouse.
set noerrorbells " Don't make noises when doing bad things.
set nojoinspaces " Only insert single space after a '.', '?', and '!' with a join command.
set nostartofline " Don't reset cursor when moving around.
set notimeout ttimeout ttimeoutlen=200 " Quickly time out on keycodes, but never on mappings.
set nowrap " No visual wrapping.
set number " Display line numbers.
set scrolloff=3 " Keep this many lines above/below the cursor for context.
set shiftwidth=2 " Define columns to use for indenting (>> and <<).
set showcmd " Show partial commands in the last line of the screen.
set showmode " Show the current mode in the last line.
set showtabline=2 " Always display the tabline up top.
set smartcase " Use case sensitive search when using capitals.
set smartindent " Indent new lines intelligently.
set softtabstop=2 " Move the cursor two characters when typing Tab in insert mode.
set suffixes=.bak,.swp,.swo,.info,.aux,.log,.pdf,.bin,.dmg,.exe,.out,.inc,.pyd,.pyc,.dll " Ignore these extensions when completing filenames and encountering multiple matches.
set tabstop=2 " Define how many columns a Tab counts for.
set title " Set the window title to the filename.
set ttyfast " Improve redrawing.
set textwidth=80 " Set the max columns for text before breaking to a new line.
set undofile " Persistent undo.
set wildmenu " Better command-line completion.
set wrapscan " Searches wrap around end of file.

" Highlight redundant whitespace.
highlight RedundantSpaces ctermbg=red guibg=black
match RedundantSpaces /\s\+$\| \+\ze\t\|\t/

" Change the colorcolumn color.
highlight ColorColumn ctermbg=236
#+end_src

Configure the local directories that =Vim= should use.

#+begin_src conf :noweb-ref vim-config
" Local directories
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
set undodir=~/.vim/undo
#+end_src

Define the syntax highlighting settings for various languages and file
types.

#+begin_src conf :noweb-ref vim-config
" HTML
let g:html_indent_tags = 'li\|p' " <li> and <p> tags are block elements

" ZSH
au BufRead,BufNewFile .zsh_rc,.functions,.commonrc set ft=zsh

" Sass
au BufRead,BufNewFile *.scss set filetype=scss.css
autocmd FileType scss set iskeyword+=-

" Make
autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0

" Markdown
au BufRead,BufNewFile *.m*down setlocal filetype=markdown
au BufRead,BufNewFile *.md setlocal textwidth=80
au BufRead,BufNewFile *.md setlocal spell

" Drupal
au BufRead,BufNewFile *.module set filetype=php
au BufRead,BufNewFile *.install set filetype=php
au BufRead,BufNewFile *.test set filetype=php
au BufRead,BufNewFile *.inc set filetype=php
au BufRead,BufNewFile *.profile set filetype=php
au BufRead,BufNewFile *.view set filetype=php
au BufRead,BufNewFile *.theme set filetype=php

" PHP
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
#+end_src

As mentioned earlier when defining the key binding customization,
there are a couple of custom functions that make life a little bit
easier when using =Vim=.

#+begin_src vimrc :noweb-ref vim-config
" Strip trailing whitespace
function! StripWhitespace ()
  let save_cursor = getpos('.')
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

" Toggle Transparency
let t:is_transparent = 1
function! ToggleTransparent()
  if t:is_transparent == 0
    hi Normal guibg=NONE ctermbg=NONE
    let t:is_transparent = 1
  else
    hi Normal guibg=#000000 ctermbg=16
    let t:is_transparent = 0
  endif
endfunction
#+end_src

On a new system, before =vim= is run, the directories to which the
configuration points to should be created.

#+begin_src sh :noweb-ref create-vim-dirs
mkdir -p ~/.vim/undo
mkdir -p ~/.vim/backups
mkdir -p ~/.vim/swaps
#+end_src

Before this configuration file can be useful some directories and the
=vim-plugin= manager needs to be put in the autoload directory.

#+begin_src sh :noweb-ref get-vim-extras
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
#+end_src

** Firefox

Firefox and dark mode generally place well together, but when transitioning between pages, Firefox likes to flash a horrible full-white page that temporarily blinds anyone who gazes upon it. These tweaks solve that, but need to be generalized.

Before any of these tweaks will work, the setting =toolkit.legacyUserProfileCustomizations.stylesheets = true= must be set in =about:config=.

#+begin_src emacs-lisp
(defun cy/firefox-profile-dir ()
  (concat "~/.mozilla/firefox/" "8zl2ickg.default-release"))
#+end_src
*** userChrome.css

#+begin_src css :tangle ~/.mozilla/firefox/8zl2ickg.default-release/chrome/userChrome.css
@-moz-document url(chrome://browser/content/browser.xhtml)
{
  #main-window,
  browser[type="content-primary"],
  browser[type="content"],
  tabbrowser#content,
  #content,
  browser[type="content"] > html
  {
     background: #323234 !important;
  }

}
#+end_src

*** userContent.css

#+begin_src css :tangle ~/.mozilla/firefox/8zl2ickg.default-release/chrome/userContent.css
@charset "utf-8";
/* CSS Document */

@-moz-document url("about:newtab") {
body { background-color: #011326 !important;}
}

@-moz-document url(chrome://browser/content/browser.xhtml) {
browser[type="content-primary"] {background: #011326 !important}
}

#+end_src


* Systemd Scripts

This section is for storing all of my =Systemd= configurations and
timers. Org will tangle these out, but they won't be enabled or run
without intervention or some kind of post-save Emacs hook.

User level =Systemd= configurations live in =~/.config/systemd/user/=

** Random Wallpaper Timer

This systemd service sets a random desktop wallpaper fifteen minutes
after boot (when enabled) or whenever run.

#+begin_src sh :tangle ~/.config/systemd/user/wallpaper-changer.service
[Unit]
Description=Choose a random desktop wallpaper

[Service]
ExecStart=feh --bg-fill --randomize --recursive /home/narwic/Pictures/Wallpaper/big

[Install]
WantedBy=default.target
#+end_src

This systemd timer can be enabled to automatically change the random
wallpaper at a given interval.

#+begin_src sh :tangle ~/.config/systemd/user/wallpaper-changer.timer
#/etc/systemd/system/foo.timer
[Unit]
Description=Change the desktop wallpaper periodically

[Timer]
OnBootSec=15min
OnUnitActiveSec=15min

[Install]
WantedBy=timers.target
#+end_src

** Emacs

Emacs ships with a systemd unit (at least in Arch), so there's really
not much to tangle out. On a fresh system, one need simply enable the
service and start it.

#+begin_src sh :noweb-ref systemd-enable-emacs
systemctl --user enable --now emacs
# systemctl --user start emacs
#+end_src


* Post-tangle Targets

This section is used to output the collections of noweb-ref references
to shell scripts and run them.

Each of these blocks should be executed as a first step on any new
system. This can be done in Emacs via ~C-c C-c~.

** Packages

Install system packages and such.

@todo: This section requires a password to be read as it is likely the
commands are being executed by a non-root user. I don't have a great
way around this at the moment.

#+begin_src sh :noweb yes :shebang #!/bin/bash :output both :results verbatim
<<pacman-install>>
<<arch-install-yay>>
<<yay-install>>
<<get-preferred-fonts>>
#+end_src

** Environment

Get all the prerequisites necessary for setting up the environment.

#+begin_src sh :noweb yes :shebang #!/bin/bash :output both :results verbatim
<<zsh-downloads>>
<<zsh-post-tangle>>
<<update-xdg-user-dirs>>
<<source-xresources>>
#+end_src

** System

Handle all the bits and bobs needed for setting up the system itself.

#+begin_src sh :noweb yes :shebang #!/bin/bash :output both :results verbatim
<<i3-post-tangle>>
#+end_src

** Applications

Create directories referenced by various application configurations
and download any dependencies.

#+begin_src sh :noweb yes :shebang #!/bin/bash :output both :results verbatim
<<create-vim-dirs>>
<<get-vim-extras>>
<<create-mpd-dirs>>
#+end_src

** Emacs-centric

#+begin_src sh :noweb yes :shebang #!/bin/bash :output both :results verbatim
<<systemd-enable-emacs>>
#+end_src

* General @TODOs

 - The post tangle stuff around package installation doesn't really work
 - Syncthing isn't documented, though it's extremely required.
 - I should add a section for all the user-level systemd stuff currently in use
 - Need to add something for sshfs mounted remote volumes like ~/Audio
 - Nothing about the quirks and installation of Yubikey is present
 - Needs a bitwarden section maybe, though there's really not much to it
 - Missing ibus / anthy setup documentation
 - Nothing in here about GPG usage
 - circleci / aws config?
 - Ngrok config?
 - ~pass~ documentation
 - ~nvm / rvm~ installation. Am I just using aur packages?
 - anything for docker / kubernetes?
 - Rust / rustup?
