#+title: Emacs Configuration
#+author: Carwin Young
#+email: emacs@carw.in
#+property: header-args:emacs-lisp :noweb yes :mkdirp yes

This is Carwin's Emacs configuration. The goal is that it's portable
enough to be moved around between machines.

To begin, the most important things are Evil, Org, and Org roam.
Everything else is secondary.

* Principles and organization

1. Each section that loads a package or (other elisp) file should document the package in a table at
   the beginning of the sub-tree.
2. Only the first word in a heading should be capitalized unless the word is a proper noun.
3. Emacs package names, modes, system packages, and file names, when they appear in paragraphs,
   lists, tables, etc... should be written as =verbatim= text.
4. System paths, function names, variables names, system commands, etc... should be written as ~code~
   text.
5. Section blocks should be tangled together using =org-babel='s ~:noweb~ and ~:noweb-ref~ features to
   facilitate load order control and feature disabling via comments. Collection blocks should appear
   at the beginning of their respective sections.
6. Significantly sized custom configurations should be split into individual files.  =Workflow.org=,
   =Mail.org=, etc... are simple examples of this.
7. Individual packages or extensions which require significant configuration should tangle out into
   individual lisp files. The literate configuration for such configurations may optionally be
   separated according to rule #5.
8. Tangled files follow the following pattern:
   - Files which extend a specific package are prefixed with ~+~.
   - Files which contain configurations for a specific concept, with customizations spanning
     multiple packages are prefixed with ~~~.
		 - e.g.:
			 + =~mail.el=
			 + =+org-roam.el=

** Files
 - =Emacs.org=: The primary configuration entry point (this file!)
 - =Mail.org=: Configuration for managing and sending Email in Emacs.
 - =Workflow.org=: Tasks, agenda, effort, etc... Day to day activities.
 - =Notes.org=: Configurations and customizations for note taking.
 - =Calendar.org=: Calendar configuration and integration settings.

* Bootstrap

Emacs 27.1 introduced =early-init.el=, which is run before =init.el=, before package and UI
initialization happens, and before site files are loaded.

#+begin_src emacs-lisp :noweb yes :tangle (expand-file-name "early-init.el" user-emacs-directory)
;; early-init.el --- The earliest bootstrap this side of the Mississippi -*- lexical-binding: t; -*-

;; Author: Carwin Young <emacs@carw.in>
;; This file is not part of GNU Emacs.
;; This file is free software…

;;; Commentary
;; This file is automatically generated via Org Mode's
;; `org-babel-tangle' feature. The original literate configuration can be
;; found in the source repository's Emacs.org file.

;;; Code:
<<bootstrap-garbage>>
<<bootstrap-gccemacs>>
<<bootstrap-lang-env>>
<<bootstrap-default-input>>
<<bootstrap-defs>>
<<bootstrap-window-chrome>>
<<bootstrap-behaviors>>
<<bootstrap-load-path>>

;; @todo get these out of the real env, Emacs isn't reading .profile
(setenv "XDG_CACHE_HOME" (string-trim (shell-command-to-string "bash -c \"echo $XDG_CACHE_HOME\"")))

;;; early-init.el ends here
#+end_src

A big contributor to startup times is garbage collection. We up the gc threshold to temporarily
prevent it from running, then reset it later by enabling =gcmh-mode=. Not resetting it will cause
stuttering and freezes.

#+begin_src emacs-lisp :noweb-ref bootstrap-garbage
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

Prevent unwanted runtime compilation for =gccemacs= (native-comp) users. Packages are compiled
ahead-of-time when they are installed and site files are compiled when =gccemacs= is installed.

#+begin_src emacs-lisp :noweb-ref bootstrap-gccemacs
(setq native-comp-deferred-compilation nil)
#+end_src

Contrary to what many Emacs users have in their configs, there's no need for more than this to make
UTF-8 the default coding system:

#+begin_src emacs-lisp :noweb-ref bootstrap-lang-env
(set-language-environment "UTF-8")
#+end_src

~set-language-environment~ sets ~default-input-method~, which is unwanted.

#+begin_src emacs-lisp :noweb-ref bootstrap-default-input :tangle no
(setq default-input-method nil)
#+end_src

Ensure the window chrome is set the preferred way when Emacs starts up.

#+begin_src emacs-lisp :noweb-ref bootstrap-window-chrome :tangle no
(scroll-bar-mode -1)        ; Disable scroll bar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(menu-bar-mode -1)          ; Disable the menu bar
#+end_src

Configure other default UI effects and behaviors which should be set
before any packages get installed or configured.

#+begin_src emacs-lisp :noweb-ref bootstrap-behaviors :tangle no
(setq inhibit-startup-screen             t           ; Disable the startup screen
      visible-bell                       1           ; Silence Emacs
      warning-minimum-level              :emergency  ; Only warn about real problems
      vc-follow-symlinks                 t           ; Don't warn about following symlinks
      large-file-warning-threshold       nil         ; Don't warn about large files
      ad-redefinition-action 'accept                 ; Silence warnings for advice redefinition
      auto-save-default                  nil)        ; Disable auto saving, prefer something like the super-saver package
#+end_src

Define custom variables, constants, and groups.

#+begin_src emacs-lisp :noweb-ref bootstrap-defs
(defgroup ~eusr-paths nil
  "Custom settings related to the system paths of the Emacs user."
  :version "27.2")

(defcustom ~eusr-cache-directory nil
  "The directory in which Emacs should store cache related files."
  :tag "Cache Files Directory"
  :group '~eusr-paths)

(defcustom ~eusr-custom-lisp-directory nil
  "The directory in which custom user scripts should tangle out to by default."
  :tag "Custom Lisp Directory"
  :group '~eusr-paths)

(setq ~eusr-custom-lisp-directory (expand-file-name "user-lisp" user-emacs-directory))
#+end_src

Adjust the paths which Emacs will scan for lisp files.

#+begin_src emacs-lisp :noweb-ref bootstrap-load-path :tangle no
  ;; (push (expand-file-name "user-lisp" user-emacs-directory) load-path)
(push ~eusr-custom-lisp-directory load-path)
#+end_src

* Initialization

After =early-init.el= prepares the low-level configurations the Emacs initialization kicks off
(=init.el=).

Importantly, because this configuration always uses the latest version of [[https://orgmode.org/][Org Mode]], it's necessary
to install it early. Otherwise, the first usage of an =org-mode= function will trigger the loading of
Emacs' built-in =org-mode=.

#+begin_src emacs-lisp :noweb yes :tangle (expand-file-name "init.el" user-emacs-directory)
;;; init.el --- The primary configuration entrypoint -*- lexical-binding: t; -*-

;; Author: Carwin Young <emacs@carw.in>
;; This file is not part of GNU Emacs.
;; This file is free software…

;;; Commentary
;; This file is automatically generated via Org Mode's
;; `org-babel-tangle' feature. The original literate configuration can be
;; found in the source repository's Emacs.org file.

;;; Code:
<<init-package-archives>>
<<init-package-manager>>
<<init-straight-always>>
<<init-straight-helper>>
<<pkg-use-package-ensure-system-package>>
<<pkg-exec-path-from-shell>>
<<init-cache>>
<<init-garbage>>
<<init-backups>>
<<pkg-password-store>>
<<init-remote-editing>>
;; Install latest Org Mode early on in the initialization process.
<<pkg-org>>
;;; init.el ends here
#+end_src

Use =straight.el= to manage packages.

#+begin_src emacs-lisp :noweb-ref init-package-manager
(setq straight-base-dir "~/.local/share/emacspkgs/")

(unless (featurep 'straight)
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
				 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
				(bootstrap-version 5))
		(unless (file-exists-p bootstrap-file)
			(with-current-buffer
					(url-retrieve-synchronously
					 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
					 'silent 'inhibit-cookies)
				(goto-char (point-max))
				(eval-print-last-sexp)))
		(load bootstrap-file nil 'nomessage)))

;; Use straight.el for use-package expressions
(straight-use-package 'use-package)
#+end_src

When packages are removed, the files can be cleaned up with ~straight-remove-unused-repos~.

#+begin_src emacs-lisp :noweb-ref init-straight-always
(setq straight-use-package-by-default (not (eq system-type 'gnu/linux)))
#+end_src

Load =straight.el='s helper package to make commands like
~straight-x-clean-unused-repos~ available to the user.

#+begin_src emacs-lisp :noweb-ref init-straight-helper
(require 'straight-x)
#+end_src

Define the ~package-archives~ list which the package manager will use to search for package details.

#+begin_src emacs-lisp :noweb-ref init-package-archives
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("nongnu-elpa" . "https://elpa.nongnu.org/nongnu/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src

Allow /ensuring/ of system packages.

#+begin_src emacs-lisp :noweb-ref pkg-use-package-ensure-system-package
(use-package use-package-ensure-system-package)
#+end_src

Sync the system environment shell's =$PATH= with Emacs' path.

#+begin_src emacs-lisp :noweb-ref pkg-exec-path-from-shell
(use-package exec-path-from-shell
  :config
  (when (daemonp)
    (exec-path-from-shell-initialize))
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

** Caching

Use ~~/.cache/~ or =$XDG_CACHE_HOME=, if set, to contain local data and avoid cluttering the Emacs
directory.

#+begin_src emacs-lisp :noweb yes :noweb-ref init-cache
<<cache-functions>>
<<cache-settings>>
#+end_src

This custom ~~cache-concat~ function simplifies concatenating filenames onto the configured cache
path.

#+begin_src emacs-lisp :noweb-ref cache-functions
(defun ~cache-concat (name)
  "Return the absolute path of NAME under `~eusr-cache-directory'."
  (let* ((directory (file-name-as-directory ~eusr-cache-directory))
         (path (convert-standard-filename (concat directory name))))
    (make-directory (file-name-directory path) t)
    path))
#+end_src

Below the user cache directory variable is set based on whether or not the environment variable
=$XDG_CACHE_HOME= is available to Emacs.

Additionally a number of other cacheable variables are set after the appropriate, mostly built-in,
packages are loaded.

#+begin_src emacs-lisp :noweb-ref cache-settings
(setq ~eusr-cache-directory (if (not (eq (getenv "XDG_CACHE_HOME") ""))
																(expand-file-name "emacs" (getenv "XDG_CACHE_HOME"))
															(expand-file-name "~/.cache/emacs")))
(with-eval-after-load 'request
  (setq request-storage-directory (~cache-concat "request/")))
(with-eval-after-load 'tramp
  (setq tramp-persistency-file-name (~cache-concat "tramp.eld")))
(with-eval-after-load 'url
  (setq url-configuration-directory (~cache-concat "url/")))
#+end_src

** Garbage collection

Run garbage collection on focus-out. Emacs /should/ feel snappier overall.

#+begin_src emacs-lisp :noweb-ref init-garbage
(add-function :after after-focus-change-function
  (defun ~garbage-collect-maybe ()
    (unless (frame-focus-state)
      (garbage-collect))))
#+end_src

** Backup files

Avoid creating backup files. Don't regret this later.

#+begin_src emacs-lisp :noweb-ref init-backup-files
;; Avoid #file.org#
;; (auto-save-visited-mode)
(setq create-lockfiles nil)
;; Avoid filename.ext~
(setq make-backup-files nil)
#+end_src

** Secrets Management

[[https://www.passwordstore.org/][pass]] is used to manage local passwords which Emacs needs access to. +Additionally, use
[[https://github.com/DamienCassou/auth-password-store][auth-source-pass]] as the primary =auth-source= provider so+ +that all passwords are stored in a single
place+.

#+begin_comment
Actually, I use BitWarden, but =pass= and gnupg are a good alternative because I haven't figured out a
way to consistently get BitWarden involved with Emacs. So for the passwords this config needs (like
=org-gcal=) =pass= stores copies of passwords so Emacs can use 'em.
#+end_comment

#+begin_src emacs-lisp :noweb-ref pkg-password-store
(use-package password-store
  :straight t
  :config
  (setq password-store-password-length 14
				epg-pinentry-mode 'loopback))
#+end_src

** Remote Editing

Emacs comes with Tramp which handles remote editing pretty well.

#+begin_src emacs-lisp :noweb-ref init-remote-editing
(setq tramp-default-method "ssh")
#+end_src

* Keybinding

#+begin_src emacs-lisp :noweb yes :tangle (expand-file-name "init.el" user-emacs-directory)
;;; Keybinding
<<keybind-utilities>>
<<keybind-leader-key>>
<<keybind-leader-categories>>
<<keybind-global-escape>>
<<keybind-universal-argument>>
<<keybind-evil-config>>
<<keybind-chording>>
#+end_src

** Keybinding utilities

#+begin_src emacs-lisp :noweb yes :noweb-ref keybind-utilities
<<pkg-which-key>>
<<pkg-free-keys>>
<<pkg-hydra>>
#+end_src

The generic =key-settings= section contains the settings for =which-key=, =hydra= and =free-keys=. These are
all packages which provide /information/ about keybindings, either those that are currently bound, in
the case of =which-key= and =hydra= or those which have yet to be bound, in the case of =free-keys=.

#+begin_src emacs-lisp :noweb-ref pkg-which-key
(use-package which-key
  :after diminish
  :diminish which-key-mode
  :config
  (setq which-key-separator " "
	which-key-prefix "+"
	which-key-idle-delay 0.2)
  (which-key-mode))
#+end_src

#+begin_src emacs-lisp :noweb-ref pkg-free-keys
(use-package free-keys)
#+end_src

Stateful keymaps with =hydra=.

#+begin_src emacs-lisp :noweb-ref pkg-hydra
(use-package hydra
  :defer t)
#+end_src

** Escape everything

#+begin_src emacs-lisp :noweb-ref keybind-global-escape
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Rebind ~<C-u>~ and remap ~'universal argument~

=evil-mode= takes over ~<C-u>~ (originally the /universal argument/) for buffer scrolling. Thus, /universal
argument/ needs to be rebound to another key sequence. This configuration uses ~<C-\>~ as the
replacement.

#+begin_src emacs-lisp :noweb-ref keybind-universal-argument
(global-set-key (kbd "C-\\") 'universal-argument)
#+end_src

** Unified general keybinding

=general.el= provides a common, unified way to bind keys in Emacs. Additionally, and possibly more
importantly, =general.el= provides a way to mirror Vim's concept of a "leader" key, from which
successive, named sequences of inputs may be bound.

As the package's README points out:

#+begin_quote
One advantage of using general-define-key (or a wrapper for it) even in cases where its extra
functionality isn’t necessary and doesn’t significantly improve brevity is that all keybindings are
recorded and can be displayed later with general-describe-keybindings.
#+end_quote

This config sets ~<,>~ as the ~<leader>~ key with with. The ~<leader>~ will act as a launchpad for
keystroke combination based commands. This is another valuable relic from =vim=.

First, a definer function is created that can be used throughout the document to create new bindings
off of ~<leader>~.

#+begin_src emacs-lisp :noweb-ref keybind-leader-key
(use-package general
  :straight t
  :init
  (defconst ~:general:leader-key ",")
  ;; Convenience aliases
  (defalias 'define-key! #'general-def)
  (defalias 'undefine-key! #'general-unbind)
  :config
  (general-create-definer ~leader-bind
    :keymaps '(normal insert visual emacs org org-roam org-agenda term)
    :prefix ~:general:leader-key
    :global-prefix "C-,"))
#+end_src

** =<leader>= bind categories

Generally speaking, keybindings are scattered, not only throughout this file, but across any number
of imported sibling files. This section defines the beginning, or "top-level," of the sequence
definitions sprinkled across the digital brownie tray of this configuration.

#+begin_src emacs-lisp :noweb-ref keybind-leader-categories
(~leader-bind
  "b"  '(:ignore t :which-key "buffer")
  "c"  '(:ignore t :which-key "capture")
  "C"  '(:ignore t :which-key "Calendar")
  "d"  '(:ignore t :which-key "dired")
  "e"  '(:ignore t :which-key "evaluate")
  "o"  '(:ignore t :which-key "org")
  "or" '(:ignore t :which-key "roam")
  "t"  '(:ignore t :which-key "toggle")
  "u"  '(:ignore t :which-key "update"))
#+end_src

** Evil

This is possibly the most important section. One of the major principles here was originally that it
should closely mimic the way I used to work in Vim. As I've become more accustomed to Emacs over the
years, that specific goal has become much less important.

In Emacs, I still find =Evil= to be the most efficient way to move around and modify documents of
text, and in general I think Vim does it better. Emacs' other features make it worth sticking
around.

#+begin_src emacs-lisp :noweb-ref pkg-evil
(use-package evil
  :straight t
  :init
  (setq evil-want-integration t)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-want-keybinding nil)
  ;; evil-undo-system 'undo-fu
  ;; :bind (:map evil-insert-state-map
  ;;             ("C-i" . nil))
  :config
  (evil-mode 1)
  (setq evil-want-C-i-jump nil
				;; Focus new windows after splitting
				evil-split-window-below t
				evil-vsplit-window-right t)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  ;; Tweak up and down just a little to handle wrapped lines better.
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-insert-state-map (kbd "C-e") 'end-of-line)
  (setq-default evil-cross-lines t
                sentence-end-double-space nil
                evil-default-state 'normal
								evil-ex-substitute-global t) ; Implicit /g flag on evil ex substitution, the most common usage.
  ;; Make sure we're in normal mode, not insert mode when we are in these Emacs modes.
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

Add keybindings for bits of Emacs which are not properly covered by =evil-mode= using the
=evil-collection= package.

#+begin_src emacs-lisp :noweb-ref pkg-evil-collection
(use-package evil-collection
  :after evil
  :init
  (setq evil-collection-company-use-tng nil)
  :custom
  (setq evil-collection-outline-bind-tab-p nil)
  :config
  (evil-collection-init))
#+end_src

Add another collection of =evil= configurations specifically for navigating some =org-mode= areas like
the Agenda.

#+begin_src emacs-lisp :noweb-ref pkg-evil-org
(use-package evil-org
  :after evil
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

Rebind =evil='s ~q~ to have it quit the current buffer instead of exiting Emacs. To quit Emacs, use
~:quit~.

#+begin_src emacs-lisp :noweb-ref evil-custom-commands
(defun +evil-ex-kill-buffer-and-close ()
  (interactive)
  (unless (char-equal (elt (buffer-name) 0) ?*)
    (kill-this-buffer)))

(defun +evil-ex-save-kill-buffer-and-close ()
  (interactive)
  (save-buffer)
  (kill-this-buffer))

(evil-ex-define-cmd "q" '+evil-ex-kill-buffer-and-close)
(evil-ex-define-cmd "wq" '+evil-ex-save-kill-buffer-and-close)
(evil-ex-define-cmd "quit" 'evil-quit)
#+end_src

Emulate =vim-surround= to take actions with surrounding pairs.

The functionality I use the most is, when in =[Normal]= mode, finding a word or function and typing
~ysw~ and then the character I want to surround the target with. I've always remembered this keystroke
from an older =vim= package called YouSurroundWith (I think).

Another way to surround text is in =[Visual]= mode. The primary difference in usage between it and
[Normal] mode is that instead of the ~ysw~ train, simply use ~S~.

#+begin_src emacs-lisp :noweb-ref pkg-evil-surround
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src

Bind ~<C-/>~ to comment lines in a much better way than Emacs' default ~comment-dwim~ (bound to ~<M-;>~).

#+begin_src emacs-lisp :noweb-ref pkg-evil-nerd-commenter
(use-package evil-nerd-commenter
  :bind ("C-/" . evilnc-comment-or-uncomment-lines))
#+end_src

The =evil= configuration blocks are collected and sorted here for convenience.

#+begin_src emacs-lisp :noweb yes :noweb-ref keybind-evil-config
<<pkg-evil>>
<<pkg-evil-collection>>
<<pkg-evil-org>>
<<evil-custom-commands>>
<<pkg-evil-surround>>
<<pkg-evil-nerd-commenter>>
#+end_src

** Key Chording

The =key-chord= package adds a way to map a pair of simultaneously, or /nearly/ simultaneously, pressed
keys to a command. This allows the binding of a command to multiple presses of the same key or
multiple keys pressed rapidly in succession.

This block sets the ~kj~ /chord/ to =escape= out of insert mode.

#+begin_src emacs-lisp :noweb-ref keybind-chording
(use-package key-chord
  :straight t
  :config
  (key-chord-define evil-insert-state-map "kj" 'evil-normal-state) ;; No need for other setups.
  (key-chord-mode 1))
#+end_src

* User Interface

| =doom-themes=         | https://github.com/doomemacs/themes            |
| =rainbow-mode=        | Built-in                                       |
| =paren=               | Built-in                                       |
| =rainbow-delimiters=  | https://github.com/Fanael/rainbow-delimiters   |
| =unicode-fonts=       | https://github.com/rolandwalker/unicode-fonts  |
| =all-the-icons=       | https://github.com/domtronn/all-the-icons.el   |
| =all-the-icons-dired= | https://github.com/wyuenho/all-the-icons-dired |
| =emojify=             | https://github.com/iqbalansari/emacs-emojify   |
| =fontawesome=         | https://github.com/emacsorphanage/fontawesome  |
| =doom-modeline=       | https://github.com/seagle0128/doom-modeline    |
| =minions=             | https://github.com/tarsius/minions             |
| =diminish=            | https://github.com/myrjola/diminish.el         |
| =eldoc=               | Built-in                                       |
| =vi-tilde-fringe=     | https://github.com/syl20bnr/vi-tilde-fringe    |
| =smooth-scroll=       | https://github.com/k-talo/smooth-scroll.el/    |

#+begin_src emacs-lisp :noweb yes :tangle (expand-file-name "init.el" user-emacs-directory)
<<ui-time>>
<<ui-modeline>>
<<ui-theme>>
<<pkg-rainbow-mode>>
<<ui-icons>>
<<ui-fringe>>
<<ui-highlighting>>
<<ui-scrolling>>
<<ui-help>>
<<ui-window-title>>
#+end_src

** Time

#+begin_src emacs-lisp :noweb-ref ui-time
(setq display-time-format "%l:%M %p %b %y"     ; Set a nice display time format
      display-time-default-load-average nil)   ; Don't show the load time avg.
#+end_src

This configuration uses the =doom-themes= package to get some very nice themes. Some of these themes
need explicit bold / italic display support turned on as part of the package's configuration.

#+begin_src emacs-lisp :noweb-ref ui-theme
(use-package doom-themes
  :init
  (setq doom-themes-enable-bold t
				doom-themes-enable-italic t)
  :config
  (load-theme 'doom-snazzy t)
  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config)
  (doom-themes-org-config))
#+end_src

** Highlighting

Set the background of HTML color strings in buffers to the color they represent.

#+begin_src emacs-lisp :noweb-ref pkg-rainbow-mode
(use-package rainbow-mode
  :defer t
  :hook (org-mode
         emacs-lisp-mode
         web-mode
         typescript-mode
         js2-mode))
#+end_src

Highlight matching parens, braces, and brackets in text.

#+begin_src emacs-lisp :noweb-ref ui-highlighting
(use-package paren
  :config
  (set-face-attribute 'show-paren-match-expression nil :background "#363e4a") ; Give an unmatched item a gray background.
  (show-paren-mode 1))
#+end_src

Colorize nested parens/braces/brackets according to nesting depth.

#+begin_src emacs-lisp :noweb-ref ui-highlighting
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Icons

#+begin_src emacs-lisp :noweb yes :noweb-ref ui-icons
<<pkg-unicode-fonts>>
<<pkg-all-the-icons>>
<<pkg-all-the-icons-dired>>
<<pkg-emojify>>
<<pkg-fontawesome>>
<<icons-other-symbols>>
#+end_src
  
#+begin_src emacs-lisp :noweb-ref pkg-unicode-fonts
(use-package unicode-fonts)
#+end_src
    
#+begin_src emacs-lisp :noweb-ref pkg-all-the-icons
(use-package all-the-icons)
#+end_src

#+begin_src emacs-lisp :noweb-ref pkg-all-the-icons-dired
(use-package all-the-icons-dired)
#+end_src

#+begin_src emacs-lisp :noweb-ref icons-other-symbols
;; フォント設定
;;
;; abcdefghik
;; 0123456789
;; あいうえお
(let* ((family "Cica")
       (fontspec (font-spec :family family :weight 'normal)))
  ;;(set-face-attribute 'default nil :family family :height (cy:system-settings-get 'emacs/default-face-size))
  (set-fontset-font nil 'ascii fontspec nil 'append)
  (set-fontset-font nil 'japanese-jisx0208 fontspec nil 'append))

(add-to-list 'face-font-rescale-alist '(".*icons.*" . 0.9))
(add-to-list 'face-font-rescale-alist '(".*FontAwesome.*" . 0.9))
#+end_src

Allow Emojis. This is useful for Calendar entries, where the use of
emojis is becoming increasingly common.
  
#+begin_src emacs-lisp :noweb yes :noweb-ref pkg-emojify
(use-package emojify
  :straight t
  :hook (after-init . global-emojify-mode))

#+end_src

#+begin_src emacs-lisp :noweb-ref pkg-fontawesome
(use-package fontawesome)
#+end_src

** Modeline

This configuration outsources most of its modeline customizations to the =doom-emacs= package.

#+begin_src emacs-lisp :noweb yes :noweb-ref ui-modeline
<<pkg-doom-modeline>>
<<pkg-minions>>
<<pkg-diminish>>
<<pkg-eldoc>>
#+end_src

#+begin_src emacs-lisp :noweb-ref pkg-doom-modeline
(use-package doom-modeline
  :straight t
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-buffer-modification-icon t)
  (setq doom-modeline-modal-icon               t)
  (setq doom-modeline-buffer-file-name-style   'truncate-with-project)
  (setq doom-modeline-major-mode-icon        t)
  (setq doom-modeline-bar-width              3)
  (setq doom-modeline-height                 15)
  (setq doom-modeline-major-mode-color-icon  t)
  (setq doom-modeline-minor-modes            t)
  (setq doom-modeline-lsp                    t)
  (setq doom-modeline-mu4e                   t)
  (setq doom-modeline-persp-name             t)
  (setq doom-modeline-github                 t)
	(setq display-time-default-load-average    nil)    ; Don't display load average time in the modeline
  (custom-set-faces '(mode-line ((t (:height 1.00))))
		    '(mode-line-inactive ((t (:height 1.00))))))
#+end_src

The =minions= package creates a handy little menu in the minibuffer for when things get wacky and the
user needs to use a mouse.

#+begin_src emacs-lisp :noweb-ref pkg-minions
(use-package minions
  :disabled t
  :config
  (minions-mode t))
#+end_src

Through the =diminish= package, mode's may be removed from the modeline.

#+begin_src emacs-lisp :noweb-ref pkg-diminish
(use-package diminish)
#+end_src

Display documentation hints in the modeline about what is being written in the buffer.

#+begin_src emacs-lisp :noweb-ref pkg-eldoc
(use-package eldoc
  :straight (:type built-in)
  :diminish eldoc-mode)
#+end_src

** Fringe

Put nice little tilde characters in the fringe to mimic the Vim experience.

#+begin_src emacs-lisp :noweb-ref ui-fringe
(use-package vi-tilde-fringe
  :functions vi-tilde-fringe-mode
  :diminish vi-tilde-fringe-mode
  :config
  (global-vi-tilde-fringe-mode))
#+end_src

** Scrolling

Scroll so smooth for real.

#+begin_src emacs-lisp :noweb-ref ui-scrolling
(use-package smooth-scroll
  :ensure t
  :diminish smooth-scroll-mode
  :config
  (smooth-scroll-mode t))
#+end_src

** Improved help interface

Configure Emacs’ help-mode which provides some really useful content about all kinds of Emacs
topics. By default, this is bound to =<C-h>= which is just fine. The help window should also be
focused when it opens by default, though this can easily be toggled off by changing
=help-window-select= to ~nil~.

#+begin_src emacs-lisp :noweb-ref ui-help
(use-package helpful
  ;; :doc "A better Emacs *help* buffer."
  ;; :url "https://github.com/Wilfred/helpful"
  ;; :tag "help" "lisp"
  :straight t
  :custom
  (help-window-select t)
  ;; Remap whatever key is bound to these functions to go to these others instead.
  ;; This doesn't change the keybinding itself, only its target.
  :bind (("C-c d" . helpful-at-point)
         ([remap describe-function]   . helpful-callable)
         ([remap describe-variable]   . helpful-variable)
         ([remap describe-command]    . helpful-command)
         ([remap describe-key]        . helpful-key)))
#+end_src

** Window title

#+begin_src emacs-lisp :noweb-ref ui-window-title
(setq frame-title-format
      '("emacs@" (:eval (system-name)) ": "(:eval (if (buffer-file-name)
                                                      (abbreviate-file-name (buffer-file-name))
                                                    "%b")) " [%*]"))
#+end_src

* Editing

| =visual-line-mode=   | Built-in                                             |
| =visual-fill-column= | https://codeberg.org/joostkremers/visual-fill-column |
| =auto-fill=          | Built-in                                             |
| =recentf=            | Built-in                                             |
| =smartparens=        | https://github.com/Fuco1/smartparens                 |
| =ws-butler=          | https://github.com/lewang/ws-butler                  |

#+begin_src emacs-lisp :noweb yes :tangle (expand-file-name "init.el" user-emacs-directory)
<<editing-wrapping>>
<<editing-indentation>>
<<editing-buffers>>
<<pkg-smartparens>>
<<editing-whitespace>>
#+end_src

** Line wrapping

#+begin_src emacs-lisp :noweb yes :noweb-ref editing-wrapping
<<visual-line-mode-off>>
<<pkg-visual-fill-column>>
<<auto-fill>>
#+end_src

*** Visual lines

#+begin_src emacs-lisp :noweb-ref visual-line-mode-off
(setq global-visual-line-mode -1)
#+end_src

*** Visual fill

=visual-fill-column= wraps (and optionally centers) buffers without actually modifying files. Editing
a file in a buffer will appear to have its wrapped text on a newline, leaving the output alone.

This is enabled by default for =markdown-mode=, otherwise, this configuration prefers real newlines.

#+begin_comment
For some reason this gets enabled for absolutely every mode, globally. So until that gets figured
out, it'll stay disabled.
#+end_comment

#+begin_src emacs-lisp :noweb-ref pkg-visual-fill-column
(use-package visual-fill-column
  :straight t
  :disabled t
  :hook
  ((org-mode markdown-mode) . visual-fill-column-mode)
  :config
  (setq visual-fill-column-mode nil
        visual-fill-column-width 158
        visual-fill-column-center-text t))
#+end_src

*** Auto fill

As mentioned previously, this configuration prefers hard line wraps. Moreover, it also assumes a
preference for /ye olden times/ when things were wrapped to 80 columns. But, because this is the
future 80 columns is expanded to the futuristic *100* columns. How futuristic!

#+begin_src emacs-lisp :noweb-ref auto-fill
;; auto-fill is enabled as an org-mode hook in the org-mode section.
;; (setq auto-fill-mode 1)
(setq fill-column 100)
#+end_src

** Indentation
#+begin_src emacs-lisp :noweb yes :noweb-ref editing-indentation
(setq indent-tabs-mode nil)
(progn                            ; Force the tabs issue
  ;; make indent commands use space only (never the tab character)
  ;; emacs 23.1 to 26, default to t
  ;; if indent-tabs-mode is t, it means it may use tab, resulting mixed space and tab
  (setq-default indent-tabs-mode nil))
#+end_src

Indenting with spaces should always use 2 spaces per level of
indention.

#+begin_src emacs-lisp :noweb-ref editing-indentation
(put 'add-function 'lisp-indent-function 2)
(put 'advice-add 'lisp-indent-function 2)
(put 'plist-put 'lisp-indent-function 2)
#+end_src

When rendering a file with =<TAB>= characters, show each =<TAB>= with a
width of two characters instead of the default (four).

#+begin_src emacs-lisp :noweb-ref editing-indentation
(setq-default tab-width 2
              evil-shift-width tab-width)
#+end_src

** Buffers

#+begin_src emacs-lisp :noweb yes :noweb-ref editing-buffers
<<buffers-recent>>
<<buffers-keybinding>>
#+end_src

*** Recent buffers in new sessions

#+begin_src emacs-lisp :noweb-ref buffers-recent
(use-package recentf
  :config
  (setq recentf-auto-cleanup 'never
        recentf-max-saved-items 1000
				recentf-save-file (expand-file-name ".recentf" ~eusr-cache-directory))
  (recentf-mode t)
  :diminish nil)
#+end_src

*** Buffer switching

Add a ~<leader>~ binding to switch buffers.

#+begin_src emacs-lisp :noweb-ref buffers-keybinding
(~leader-bind
  "bs" '(consult-buffer :which-key "switch"))
#+end_src


** Parenthesis matching

#+begin_src emacs-lisp :noweb-ref pkg-smartparens
(use-package smartparens 
  :diminish smartparens-mode
  :hook
  (prog-mode . turn-on-smartparens-mode)
  :config
  (show-smartparens-global-mode t))
#+end_src

** Whitespace

Using the =ws-butler= package, automatically remove trailing whitespace.

#+begin_src emacs-lisp :noweb-ref editing-whitespace
(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
  (prog-mode . ws-butler-mode)))
#+end_src

* Features

| =aggressive-indent=   | https://github.com/Malabarba/aggressive-indent-mode/ |
| =flyspell=            | Built-in                                             |
| =flyspell-correct=    | https://github.com/d12frosted/flyspell-correct       |
|                     | - =flyspell-correct-popup=                             |
| =google-translate=    | https://github.com/atykhonov/google-translate        |
| =vertico=             | https://github.com/minad/vertico                     |
| =marginalia=          | https://github.com/minad/marginalia                  |
| =corfu=               | https://github.com/minad/corfu                       |
| =consult=             | https://github.com/minad/consult                     |
| =autorevert=          | Built-in                                             |
| =treemacs=            | https://github.com/Alexander-Miller/treemacs         |
| treemacs-evil       |                                                      |
| treemacs-projectile |                                                      |
| treemacs-magit      |                                                      |
| =codic=               | https://github.com/emacsorphanage/codic              |

#+begin_src emacs-lisp :noweb yes :tangle (expand-file-name "init.el" user-emacs-directory)
<<ui-func-zoom>>
<<ui-feat-toggle-transparent>>
<<ui-feat-toggle-transparent-binding>>
<<ui-feat-toggle-theme>>
<<ui-feat-tab-bar-binding>>
<<ui-feat-code-eval-binding>>
<<ui-feat-completion>>
<<feat-spell-check>>
<<ui-feat-aggressive-indent>>
<<ui-feat-lang-translation>>
<<feat-auto-tangle>>
<<feat-auto-revert>>
<<feat-sidebar>>
<<pkg-codic>>
#+end_src

** Zoom

#+begin_src emacs-lisp :noweb-ref ui-func-zoom
(defhydra ~hydra-zoom (global-map "<f2>")
  "Zoom the UI."
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out")
  ("r" (text-scale-set 0) "reset")
  ("0" (text-scale-set 0) :bind nil :exit t))
#+end_src

** Aggressive indentation

#+begin_src emacs-lisp :noweb-ref ui-feat-aggressive-indent
(use-package aggressive-indent
  :hook '((css-mode . aggressive-indent-mode)
          (js2-mode . aggressive-indent-mode)
          (typescript-mode . aggressive-indent-mode)
          (lisp-mode . aggressive-indent-mode)
          (emacs-lisp-mode . aggressive-indent-mode)))
#+end_src

** UI Toggles

*** Choose theme

Brings up a list of themes that have been loaded and allows the user to preview them in the current
frame.

#+begin_src emacs-lisp :noweb-ref ui-feat-toggle-theme
(~leader-bind
  "tc" '(consult-theme :which-key "choose theme"))
#+end_src

*** Toggle transparency

Define a toggle function that can be called to turn transparency on and off.

#+begin_src emacs-lisp :noweb-ref ui-feat-toggle-transparent
(defun ~toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(95 . 95) '(100 . 100)))))

(global-set-key (kbd "C-c t") 'cy:toggle-transparency)

#+end_src

Bind the transparency toggle to the toggle parent of the <leader> key.

#+begin_src emacs-lisp :noweb-ref ui-feat-toggle-transparent-binding
(~leader-bind
  "tT" '(~toggle-transparency :which-key "transparency"))
#+end_src

** Emacs Tabs
Provide leader based key bindings for Emacs 27+'s tab bar feature. Use =,-.= to move to the next tab
and =,-'= to move the the previous tab.

#+begin_src emacs-lisp :noweb-ref ui-feat-tab-bar-binding
(~leader-bind
  "." '(tab-bar-switch-to-next-tab :which-key "next tab")
  "'" '(tab-bar-switch-to-prev-tab :which-key "prev tab"))
#+end_src

** Code Evaluation

#+begin_src emacs-lisp :noweb-ref ui-feat-code-eval-binding
(~leader-bind
  "eh"  '(eval-last-sexp :which-key "here")
  "eb"  '(eval-buffer :which-key "buffer")
  "er"  '(eval-region :which-key "region"))
#+end_src

** Completion System

Set core completion system settings.

#+begin_src emacs-lisp :noweb yes :noweb-ref ui-feat-completion
(setq tab-always-indent           'complete     ; Tab always completes
      completion-cycle-threshold  1)            ; Don't start completing until this threshold of characters is met

<<completion-minibuffer>>
<<completion-region>>
<<completion-filtering>>
<<completion-commands>>
<<completion-annotations>>
#+end_src

*** Completions in the minibuffer

#+begin_src emacs-lisp :noweb-ref completion-minibuffer
(use-package vertico
  :init
  (vertico-mode)
  (setq vertico-resize t)
  (setq vertico-cycle t)
  :bind
  (:map vertico-map
	      ("C-j" . vertico-next)
	      ("C-k" . vertico-previous)))
#+end_src

*** Completions in regions

=corfu= (Completion Overlay Region FUnction) enhances the default completion in region function with a
completion overlay. It builds on the default completion in region functions with an overlay / popup.
The package is lightweight and is complatible with both =eglot= and =lsp-mode=.

#+begin_src emacs-lisp :noweb-ref completion-region
(use-package corfu
  :straight t
  :disabled t
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-quit-no-match t)
  (corfu-quit-at-boundary t)
  (corfu-preselect-first t)
  (corfu-commit-predicate nil)
  (corfu-auto-delay 0)
  (corfu-auto-prefix 2)
  (corfu-echo-documentation 1)
  :bind
  (:map corfu-map
	      ("C-j" . corfu-next)
	      ("C-k" . corfu-previous))
  :config
  (corfu-global-mode)
  ;; Fixes conflict with evil's key binds, via: https://github.com/minad/corfu/issues/12
  (advice-add 'corfu--setup :after 'evil-normalize-keymaps)
  (advice-add 'corfu--teardown :after 'evil-normalize-keymaps)
  (evil-make-overriding-map corfu-map))
#+end_src

#+begin_comment
=corfu= and =company= do the same thing, but =company= is a bit more feature
rich, particularly when it comes to integrations with other packages
like =bbdb=.
#+end_comment

#+begin_src emacs-lisp :noweb-ref completion-region
(use-package company
  :hook (prog-mode . company-mode))
#+end_src

*** Completion candidate filtering

The =orderless= package provides an /orderless/ completion style that divides the pattern into
space-separated components, and matches candidates that match all of the components in any order.
Each component can match in any one of several ways: literally, as a regexp, as an initialism, in
the flex style, or as multiple word prefixes. By default, regexp and literal matches are enabled.

https://github.com/oantolin/orderless

#+begin_src emacs-lisp :noweb-ref completion-filtering
(use-package orderless
  :custom
  (completion-styles '(orderless))
  (orderless-component-separator 'orderless-escapable-split-on-space))
#+end_src

*** Completion commands

=consult= is a companion completing-read package by =minad=. A simpler, lighterweight alternative to
Ivy's =counsel=.

#+begin_src emacs-lisp :noweb-ref completion-commands
(use-package consult
  ;; :doc "consult.el - Consulting completing-read"
  ;; :url "https://github.com/minad/consult"
  ;; :tag "extensions"
  :after evil vertico
  :bind
  (([remap switch-to-buffer]               . consult-buffer)
   ([remap switch-to-buffer-other-window]  . consult-buffer-other-window)
   ([remap switch-to-buffer-other-frame]   . consult-buffer-other-frame)
   ([remap apropos]             . consult-apropos)
   ([remap bookmark-jump]       . consult-bookmark)
   ([remap goto-line]           . consult-goto-line)
   ([remap imenu]               . consult-imenu)
   ([remap multi-occur]         . consult-multi-occur)
   ([remap recentf-open-files]  . consult-recent-file)
   ([remap yank-pop]            . consult-yank-replace)
   ("C-s" . consult-line)
   ("C-M-l" . consult-imenu)
   ("C-M-j" . persp-switch-to-buffer*)
   :map minibuffer-local-map
   ("C-r" . consult-history))
  :config
  (evil-global-set-key 'motion "gm" 'consult-mark)
  (evil-global-set-key 'motion "gM" 'consult-imenu)
  (evil-global-set-key 'motion "go" 'consult-outline)
  ;; (consult-customize
  ;;  consult-ripgrep consult-git-grep consult-grep consult-bookmark consult-recent-file
  ;;  consult--source-file consult--source-project-file consult--source-bookmark
  ;;  consult-buffer
  ;;  :preview-key (kbd "M-."))
  :custom
  (defun cy:consult-line-symbol-at-point ()
    (interactive)
    (consult-line (thing-at-point 'symbol))))
#+end_src

*** Completion annotations

As the name implies, =marginalia= shows marginalia in the minibuffer.

#+begin_src emacs-lisp :noweb-ref completion-annotations
(use-package marginalia
  ;; :doc "marginalia.el - Marginalia in the minibuffer."
  ;; :url "https://github.com/minad/marginalia"
  ;; :tag "extensions"
  :after vertico
  :bind
  (:map minibuffer-local-map
	("M-a" . marginalia-cycle))
  :custom
  (marginalia-annotators . '(marginalia-annotators-heavy
                             marginalia-annotators-light
                             nil))
  :init
  (marginalia-mode 1))
;; :advice (:after marginalia-cycle
;;                 (lambda ()
;;                   (when (bound-and-true-p vertico-mode)
;;                     (vertico-exhibit)))))
#+end_src

** Spell-Checking

Set up spell checking using the system's =aspell= command.

#+begin_src emacs-lisp :noweb-ref pkg-flyspell
(use-package flyspell
  :init
  (flyspell-mode 1)
  :config
  (setq ispell-program-name "aspell"
	ispell-list-command "aspell --list"))
#+end_src

#+begin_src emacs-lisp :noweb-ref pkg-flyspell-correct
(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
#+end_src

Use the =flyspell-correct-popup= package to provide a spell correction
interface for =flyspell-correct= similar to =corfu=.

#+begin_src emacs-lisp :noweb-ref pkg-flyspell-correct-popup
(use-package flyspell-correct-popup
  :after flyspell)
#+end_src

Collect and organize the loading of spell-checking features.

#+begin_src emacs-lisp :noweb yes :noweb-ref feat-spell-check 
<<pkg-flyspell>>
<<pkg-flyspell-correct>>
<<pkg-flyspell-correct-popup>>
#+end_src

** Translation
#+begin_src emacs-lisp :noweb yes :noweb-ref ui-feat-lang-translation
<<pkg-google-translate>>
(~leader-bind
  "T" '(~google-translate-at-point :which-key "Translate"))
#+end_src

*** Google Translate @TODO

Language learning happens everywhere and never really ends, so its very handy to have quick
translations available at your fingertips. While there are some quirks with this package, it's
pretty much the best out there.

This particular configuration defaults to translating English to Japanese, though this is easily
editable using the variables ~google-translate-default-target-language~ and
~google-translate-default-source-language~.

The ~<leader>-T~ combination will run translation on a given point and ~C-j~ will pull up the main
selection interface.

#+begin_src emacs-lisp :noweb-ref pkg-google-translate
(use-package google-translate
  :straight t
  :init
  :config ;; workaround for failed search
  (setq google-translate-translation-directions-alist
	      '(("en" . "ja")("ja" . "en") ))
  (google-translate-backend-method 'curl)
  (google-translate-default-target-language "en")
  (google-translate-default-source-language "ja")
  (defun google-translate--search-tkk ()
    "Search TKK."
    (list 430675 2721866130))
  (defun ~google-translate-at-point ()
    "Reverse translate if prefixed"
    (interactive)
    (if current-prefix-arg
	      (google-translate-at-point)
      (google-translate-at-point-reverse)))
  (require 'google-translate-smooth-ui)
  :bind ("C-j" . google-translate-next-translation-direction))

#+end_src
** Automatic Revert

Automatically revert files when they are changed externally.

#+begin_src emacs-lisp :noweb-ref feat-auto-revert
(use-package autorevert
  :straight nil
  :ensure nil
  :diminish auto-revert-mode
  :config
  (global-auto-revert-mode t))
#+end_src

** Automatic Tangle

Automatically tangle when saved without having to worry about =org-confirm-babel-evaluate-all=.
Instead, do it some time around the =after-save= hook.

#+begin_src emacs-lisp :noweb-ref feat-auto-tangle
(defun ~org-babel-tangle-dont-ask ()
  ;; Dynamic scoping to the rescue
  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle)))
#+end_src

** Contextual file sidebar

=treemacs=. Like =neotree=, =treemacs= is a file browser, but with better integration with other plugins
like =projectile=. It also provides a number of interesting functionalities like swapping workspaces.

#+begin_src emacs-lisp :noweb-ref feat-sidebar
(use-package treemacs
  ;; :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winup-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	        treemacs-deferred-git-apply-delay        0.5
	        treemacs-directory-name-transformer      #'identity
	        treemacs-display-in-side-window          t
	        treemacs-eldoc-display                   t
	        treemacs-file-event-delay                2000
	        treemacs-file-extension-regex            treemacs-last-period-regex-value
	        treemacs-file-follow-delay               0.2
	        treemacs-file-name-transformer           #'identity
	        treemacs-follow-after-init               t
	        treemacs-expand-after-init               t
	        treemacs-git-command-pipe                ""
	        treemacs-goto-tag-strategy               'refetch-index
	        treemacs-indentation                     2
	        treemacs-indentation-string              " "
	        treemacs-is-never-other-window           nil
	        treemacs-max-git-entries                 5000
	        treemacs-missing-project-action          'ask
	        treemacs-move-forward-on-expand          nil
	        treemacs-no-png-images                   nil
	        treemacs-no-delete-other-windows         t
	        treemacs-project-follow-cleanup          nil
	        treemacs-persist-file                    (cy/cache-concat "treemacs-persist")
	        treemacs-position                        'left
	        treemacs-read-string-input               'from-child-frame
	        treemacs-recenter-distance               0.1
	        treemacs-recenter-after-file-follow      nil
	        treemacs-recenter-after-tag-follow       nil
	        treemacs-recenter-after-project-jump     'always
	        treemacs-recenter-after-project-expand   'on-distance
	        treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	        treemacs-show-cursor                     nil
	        treemacs-show-hidden-files               t
	        treemacs-silent-filewatch                nil
	        treemacs-silent-refresh                  nil
	        treemacs-sorting                         'alphabetic-asc
	        treemacs-space-between-root-nodes        t
	        treemacs-tag-follow-cleanup              t
	        treemacs-tag-follow-delay                0.5
	        treemacs-user-mode-line-format           nil
	        treemacs-user-header-line-format         nil
	        treemacs-width                           40
	        treemacs-width-is-initially-locked       t
	        treemacs-workspace-switch-cleanup        nil)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (pcase (cons (not (null (executable-find "git")))
		             (not (null treemacs-python-executable)))
	    (`(t . t)
	     (treemacs-git-mode 'deferred))
	    (`(t . _)
	     (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
	      ("M-0"        . treemacs-select-window)
	      ("C-x t 1"    . treemacs-delete-other-windows)
	      ("C-x t t"    . treemacs)                      ; @TODO: Overridden by some tab feature
	      ("C-x t B"    . treemacs-bookmark)
	      ("C-x t C-t"  . treemacs-find-file)
	      ("C-x t M-t"  . treemacs-find-tag)))

#+end_src

There are a many packages that'll enhance =treemacs=' functionality, those most relevant to this
configuration are called below.

#+begin_src emacs-lisp :noweb-ref feat-sidebar
(use-package treemacs-evil
  :after (treemacs evil))

(use-package treemacs-projectile
  :requires (treemacs projectile))

(use-package treemacs-icons-dired
  :after (treemacs dired)
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :requires (treemacs magit))

;; Set leader based keybindings for =neotree=. The key should be a sub-key of the general UI Toggles
;; binding of =<leader>-t=, i.e.: /toggle/-> /tree/.

(~leader-bind
  "tt" '(treemacs :which-key "tree"))
#+end_src

** Naming dictionary service

Codic is a weird thing I know about.

#+begin_src emacs-lisp :noweb-ref pkg-codic
(use-package codic
  :defer t)
#+end_src

* File Management

| =dired= | Built-in                         |
| =deft=  | https://github.com/jrblevin/deft |

#+begin_src emacs-lisp :noweb yes :tangle (expand-file-name "init.el" user-emacs-directory)
<<dired-config>>
<<deft-config>>
#+end_src

** Browsing files with =dired=

=dired= is a built-in function in Emacs.

#+begin_src emacs-lisp :noweb yes :noweb-ref dired-config
<<pkg-dired>>
<<pkg-dired-single>>
<<pkg-dired-ranger>>
<<pkg-dired-collapse>>
<<dired-custom-functions>>
<<dired-keybinding>>
#+end_src

#+begin_src emacs-lisp :noweb-ref pkg-dired
(use-package dired
  :ensure nil
  :straight nil
  :defer 1
  :functions (dired dired-jump)
  :hook (dired-load . (lambda ()
			                  (interactive)
			                  (dired-collapse)))
  :config
  (setq dired-listing-switches "-agho --group-directories-first"          ; Which flags should be sent with the `ls' command
	      insert-directory-program "/usr/local/bin/gls"                     ; The location of the `ls' binary to use (important for macOS)
	      ;; insert-directory-program (cy:system-settings-get 'user/lsbin)  ; The location of the `ls' binary to use (important for macOS)
	      ;; insert-directory-program (let (lspath `(,(string-trim (shell-command-to-string "bash -c \"which gls\""))))
	      ;; 				 (if (eq lspath "/bin/ls")
	      ;; 				     "/bin/ls"
	      ;; 				   "/usr/local/bin")) ; The location of the `ls' binary to use (important for macOS)
	      dired-omit-files "^\\.[^.].*"                                     ; Regular expression match for files to exclude from listings
	      dired-omit-verbose nil                                            ; Verbose omission, just stay quiet
	      dired-hide-details-hide-symlink-targets nil                       ; Don't pretend symlinks aren't symlinks, we can handle it
	      delete-by-moving-to-trash t)                                      ; Avoid instant `rm'

  (autoload 'dired-omit-mode "dired-x"))
#+end_src

#+begin_src emacs-lisp :noweb-ref pkg-dired-single
(use-package dired-single
  :defer t)
#+end_src

#+begin_src emacs-lisp :noweb-ref pkg-dired-ranger
(use-package dired-ranger
  :defer t)
#+end_src

#+begin_src emacs-lisp :noweb-ref pkg-dired-collapse
(use-package dired-collapse
  :defer t)
#+end_src

#+begin_src emacs-lisp :noweb-ref dired-custom-functions
(defun ~dired-link (path)
  (lexical-let ((target path))
    (lambda ()
      (interactive)
      (message "Path: %s" target)
      (dired target))))
#+end_src

Global, Evil, and =<leader>= key bindings for =dired=.

#+begin_src emacs-lisp :noweb-ref dired-keybinding
(evil-collection-define-key 'normal 'dired-mode-map
  "h" 'dired-single-up-directory
  "H" 'dired-omit-mode
  "l" 'dired-single-buffer
  "y" 'dired-ranger-copy
  "X" 'dired-ranger-move
  "p" 'dired-ranger-paste)

(~leader-bind
  "d." `(,(~dired-link (concat (getenv "HOME") "/Projects/_custom/dots/")) :which-key "dotfiles")
  ;; "db" `(,((lambda () (find-file (concat (getenv "HOME") "/Notes/Bookmarks.org")))) :which-key "Bookmarks")
  "dd" `(,(~dired-link (concat (getenv "HOME") "/Documents")) :which-key "Documents")
  "dh" `(,(~dired-link (getenv "HOME")) :which-key "Home")
  "dn" `(,(~dired-link (concat (getenv "HOME") "/Notes")) :which-key "Notes")
  "dp" `(,(~dired-link (concat (getenv "HOME") "/Projects")) :which-key "Projects")
  "dP" `(,(~dired-link (concat (getenv "HOME") "/Partners")) :which-key "Partners"))
;; "d." `(,(~dired-link (cy:system-settings-get 'user/dots)) :which-key "dotfiles"))
#+end_src

** Quick file browsing via =deft=

=deft= is a great package for quickly interacting with plain text files, reminiscent of the
Notational Velocity application for macOS.

#+begin_src emacs-lisp :noweb-ref deft-config
(use-package deft
	:straight t
	:config
	(defun +deft-parse-title (file contents)
    "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
    (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
      (if begin
					(string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
				(deft-base-filename file))))

  (advice-add 'deft-parse-title :override #'+deft-parse-title)

  (setq deft-strip-summary-regexp
				(concat "\\("
								"[\n\t]" ;; blank
								"\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
								"\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
								"\\)"))

  (setq deft-default-extension "org"
        deft-extensions '("org")
        deft-recursive t
        deft-use-filename-as-title nil
        deft-use-filter-string-for-filename t
        deft-file-naming-rules '((noslash . "-")
                                 (nospace . "-")
                                 (case-fn . downcase))
        ;; deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
        deft-strip-summary-regexp (concat "\\("
																					"^:.+:.*\n" ; any line with a :SOMETHING:
																					"\\|^#\\+.*\n" ; anyline starting with a #+
																					"\\|^\\*.+.*\n" ; anyline where an asterisk starts the line
																					"\\)")
        deft-text-mode 'org-mode))
#+end_src

* Languages

| =org=             | https://orgmode.org                               |
| =org-contrib=     | https://git.sr.ht/~bzg/org-contrib                |
|                 | - =org-checklist=                                   |
|                 | - =org-learn=                                       |
|                 | - =org-tempo=                                       |
| =toc-org=         | https://github.com/snosov1/toc-org                |
| =lisp-mode=       | Built-in                                          |
| =web-mode=        | https://web-mode.org/                             |
| =emmet-mode=      | https://github.com/smihica/emmet-mode             |
| =typescript-mode= | https://github.com/emacs-typescript/typescript.el |
| =python-mode=     | https://gitlab.com/python-mode-devs/python-mode   |
| =yaml-mode=       | https://github.com/yoshiki/yaml-mode              |
| =dockerfile-mode= | https://github.com/spotify/dockerfile-mode        |
| =markdown-mode=   | https://github.com/jrblevin/markdown-mode         |

#+begin_src emacs-lisp :noweb yes :tangle (expand-file-name "init.el" user-emacs-directory)
<<lang-lisp>>
<<lang-org>>
<<lang-web>>
<<lang-typescript>>
<<lang-python>>
<<lang-yaml>>
<<lang-dockerfile>>
<<lang-markdown>>
#+end_src

** Lisp

When writing lisp, use two spaces rather than tabs, which default to
four spaces.

#+begin_src emacs-lisp :noweb-ref lang-lisp
(put 'add-function 'lisp-indent-function 2)
(put 'advice-add 'lisp-indent-function 2)
(put 'plist-put 'lisp-indent-function 2)
#+end_src

** Org

#+begin_src emacs-lisp :noweb yes :noweb-ref lang-org
<<org-contribs>>
<<pkg-org-tempo>>
#+end_src

#+begin_src emacs-lisp :noweb-ref pkg-org
(setq org-directory                            "~/Notes/")
(use-package org
  :straight t
  :ensure nil
  :defer t
  :pin nongnu-elpa
  ;; :hook ((org-mode . (lambda ()
  ;;                           (progn
  ;;                             (global-visual-line-mode -1)
  ;;                             (visual-line-mode -1)
  ;;                             (auto-fill-mode 1))))
  ;;        (org-mode . (lambda () (add-hook 'after-save-hook #'~org-babel-tangle-dont-ask
  ;;                                             'run-at-end 'only-in-org-mode))))
  :mode ("\\.org$'" . org-mode)
  ;; :use-package-defer t
  :bind (("C-c c" . org-capture)
	       ("C-c a" . org-agenda)
	       :map org-mode-map
	       ("C-c C-;" . org-edit-special)
	       :map org-src-mode-map
	       ("C-c C-;" . org-edit-src-exit)
	       :map evil-normal-state-map
	       ("TAB" . nil)
	       :map evil-insert-state-map
	       ("TAB" . org-cycle))
  :custom
  (org-log-done 'time)
  (org-clock-persist t)
  (org-clock-out-when-done t)
  :config
  (setq evil-auto-indent                         nil
	      org-indent-mode                          nil
	      variable-pitch-mode                      1
	      org-descriptive-links                    t
	      org-element-use-cache                    nil
	      org-edit-src-content-indentation         0
	      org-edit-src-persistent-message          nil
	      org-fontify-done-headline                t
	      org-fontify-quote-and-verse-blocks       t ; Relates to Tab in source block edit mode(s)
	      org-image-actual-width                   nil ; Useful for inline images that are huge
	      org-return-follows-link                  t ; @TODO - this only sort of works with evil, and only in Evil's insert mode
	      ;; org-startup-folded                       'content
	      org-startup-truncated                    nil
	      org-blank-before-new-entry               '((heading . t) (plain-list-item . nil))
	      org-hide-emphasis-markers                t
	      org-confirm-babel-evaluate               nil
	      org-edit-src-content-indentation         2
	      org-hide-block-startup                   nil
	      org-src-fontify-natively                 t
	      org-src-window-setup                     'current-window ; Edit src blocks in current window
	      org-src-preserve-indentation             t     ; stop adding spaces to code blocks!
	      org-src-tab-acts-natively                t     ; Is this saying to use Tab based on the blocks lang?
	      org-cycle-separator-lines                0
	      org-capture-bookmark                     nil
	      org-modules                              '(org-crypt
                                                   org-macs
						                                       org-habit
						                                       org-protocol)
	      org-refile-targets                       '((nil :maxlevel . 1)
						                                       (org-agenda-files :maxlevel . 1))
	      org-refile-allow-creating-parent-nodes   t
	      org-outline-path-complete-in-steps       nil
	      ;; org-refile-use-outline-path           'file
	      org-refile-use-outline-path              t
	      org-hide-leading-stars                   t
	      org-support-shift-select                 'always)


  ;; (if (eq system-type 'darwin)
  ;;    (load-file org-macs)
  ;;  nil)

  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
			                         (css . t)
			                         (sass . t)
			                         (makefile . t)
			                         (js . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

  (modify-syntax-entry ?' "'" org-mode-syntax-table))

;; @TODO - This needs to go into the correct Editing section.
(add-hook 'org-mode-hook '(lambda ()
                            (progn
                              (global-visual-line-mode -1)
                              (visual-line-mode -1)
                              (auto-fill-mode 1))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'~org-babel-tangle-dont-ask
                                              'run-at-end 'only-in-org-mode)))


#+end_src

*** Contributed Org

#+begin_src emacs-lisp :noweb-ref org-contribs
(use-package org-contrib
  :pin nongnu-elpa
  :straight t
  :config
  (use-package org-checklist
    :ensure nil
    :after org)
  (use-package org-learn
    :ensure nil
    :after org))
(use-package toc-org
  :after org
  :ensure nil)
#+end_src

*** Block templates

These templates enable you to type things like =<el= and then hit =Tab= to
expand the template.  More documentation can be found at the Org Mode
[[https://orgmode.org/manual/Easy-templates.html][Easy Templates]] documentation page.

#+begin_src emacs-lisp :noweb-ref pkg-org-tempo
(use-package org-tempo
  :straight (:type built-in)
  :after org-contrib
  :ensure nil
  :config
  (setq org-structure-template-alist '(("sh" . "src sh")
                                       ("el" . "src emacs-lisp")
                                       ("li" . "src lisp")
                                       ("sc" . "src scheme")
                                       ("ts" . "src typescript")
                                       ("py" . "src python")
                                       ("go" . "src go")
                                       ("json" . "src json"))))
#+end_src

** Web (HTML/CSS/Etc.)
=web-mode= is the primary mode for handling general web-stuff that
hasn't had its own package configured yet, it's very capable and good
for handling files with a variety of extensions.

Web-related files written in HTML, SCSS, Twig, etc... use this mode.

#+begin_src emacs-lisp :noweb yes :noweb-ref lang-web
<<pkg-web-mode>>
<<pkg-emmet-mode>>
#+end_src

#+begin_src emacs-lisp :noweb-ref pkg-web-mode
(use-package web-mode
  :after flycheck
  :defines flycheck-add-mode
  :mode (("\\.html?\\'" . web-mode)
         ("\\.scss\\'" . web-mode)
         ("\\.css\\'" . web-mode)
         ("\\.twig\\'" . web-mode)
         ("\\.vue\\'" . web-mode)
         ("\\.js\\'" . web-mode))
  :config
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-comment-style 2
        web-mode-style-padding 1
        web-mode-script-padding 1))
#+end_src

*** Emmet

The =emmet= package has been around for a long time. It provides
intuitive shorthand syntax for scaffolding HTML.

#+begin_src emacs-lisp :noweb-ref pkg-emmet-mode
(use-package emmet-mode
  :straight t
  :functions (emmet-mode)
  :hook
  (web-mode . emmet-mode))
#+end_src

** Typescript

#+begin_src emacs-lisp :noweb-ref lang-typescript
(use-package typescript-mode
  :straight t
  :config
  (setq typescript-indent-level 2))
#+end_src

** Python

#+begin_src emacs-lisp :noweb-ref lang-python
(use-package python-mode
  :defer t
  ;; :custom ((python-shell-interpreter . "ipython"))
  :mode (("\\.py\\'" . python-mode)))
#+end_src

** Yaml

#+begin_src emacs-lisp :noweb-ref lang-yaml
(use-package yaml-mode
  :straight t
  :defer t
  :mode ("\\.yaml\\'" . yaml-mode))
#+end_src

** Dockerfile

#+begin_src emacs-lisp :noweb-ref lang-dockerfile
(use-package dockerfile-mode
  :straight t)
#+end_src

** Markdown @TODO
#+begin_src emacs-lisp :noweb yes :noweb-ref lang-markdown
<<pkg-markdown-mode>>
<<func-org-clipboard-as-markdown>>
#+end_src

The =markdown-mode= package also comes with =gfm-mode= for stylizing Markdown content with GitHub
Flavored Markdown (GFM).

#+begin_src emacs-lisp :noweb-ref pkg-markdown-mode
(use-package markdown-mode
  :straight t
  :mode (("README\\.md'" . gfm-mode)
         ("\\.md\\'"     . markdown-mode)
         ("\\.markdown'" . markdown-mode)
         ("\\.mkd'"      . markdown-mode)
         ("\\.mdown'"    . markdown-mode)
         ("\\.mkdn'"     . markdown-mode)
         ("\\.mdwn'"     . markdown-mode)))
#+end_src

#+begin_src emacs-lisp :noweb-ref func-org-clipboard-as-markdown
(defun ~org-to-clipboard-as-markdown ()
  "Org-mode export to Markdown and copy to clipboard"
  (interactive)
  (save-window-excursion (let ((org-export-with-toc nil))
                           (with-current-buffer (org-md-export-as-markdown)
                             (with-no-warnings (mark-whole-buffer))
                             (simpleclip-copy (point-min) (point-max))
                             (kill-buffer-and-window)))))
#+end_src

* Custom Features

| =~calendar= | [[file:Calendar.org][./Calendar.org]]                                     |
| =+org-gcal= | [[file:Calendar.org][./Calendar.org]]                                     |
| =~workflow= | [[file+emacs:./Workflow.org][./Workflow.org]]                                     |
| =~mail=     | [[file+emacs:./Mail.org][./Mail.org]]                                         |
| =dashboard= | https://github.com/emacs-dashboard/emacs-dashboard |

Custom features get loaded last.

#+begin_src emacs-lisp :noweb yes :tangle (expand-file-name "init.el" user-emacs-directory)
<<feat-email>>
<<feat-workflow-notes>>
<<feat-calendar>>
<<feat-dashboard>>
#+end_src

** Email
#+begin_src emacs-lisp :noweb-ref feat-email
(require '~mail)
#+end_src

** Notes and Workflow
#+begin_src emacs-lisp :noweb-ref feat-workflow-notes
(require '~workflow)
#+end_src

** Calendar

#+begin_src emacs-lisp :noweb-ref feat-calendar
(require '~calendars)
(require '+org-gcal)
#+end_src

** Splash / Dash

Set up a dashboard to use as a starting point when Emacs' launches without a recoverable session.

#+begin_src emacs-lisp :noweb-ref feat-dashboard
(use-package dashboard-hackernews
  :straight (:type git
             :host github
             :repo "carwin/dashboard-hackernews.el"
             :branch "master")
  :config
  (require 'json))

(use-package dashboard
  :after dashboard-hackernews
  :init
  ;; (add-hook 'after-init-hook
  ;;           #'(lambda ()
  ;;               (progn (dashboard-insert-startupify-lists)
  ;;                      (dashboard-refresh-buffer))))
  :config
  ;; Set the title
  (setq dashboard-banner-logo-title "Carwin's Dashboard")
  ;; Show the logo in the banner
  (setq dashboard-startup-banner 'logo)
  ;; Show package load / init time
  (setq dashboard-set-init-info t)
  ;; Icons
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          (hackernews . 5)
                          ;; (projects . 5)
                          (agenda . 5)))
  ;; (add-to-list 'dashboard-items '(agenda) t)
  (setq dashboard-center-content t)
  ;; (setq dashboard-match-agenda-entry "org-gcal")
  (setq dashboard-filter-agenda-entry 'dashboard-filter-agenda-by-time)
  ;; (setq dashboard-filter-agenda t)
  (setq dashboard-match-agenda-entry nil)
  ;; (setq dashboard-filter-agenda-entry #'dashboard-filter-agenda-by-time)
  ;; (setq dashboard-org-agenda-categories '("@home"))
  (setq dashboard-week-agenda t)
  (dashboard-setup-startup-hook))

(set-face-attribute 'dashboard-items-face nil :foreground nil :inherit 'fixed-pitch)

#+end_src

Set the initial buffer to the =Dashboard=.

This is useful if you start Emacs as a server and connect through /emacsclient/.

#+begin_src emacs-lisp :noweb-ref feat-dashboard
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
