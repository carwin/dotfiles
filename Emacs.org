#+TITLE:   Carwin's Emacs settings file
#+AUTHOR:  Carwin Young
#+EMAIL:   cy@carw.in
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

This is Carwin's Emacs configuration. The goal is that it's portable enough to be moved around between machines.

* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:END:

* Bootstrap

| =cy-systems=                        | [[file:Systems.org][./Systems.org]] |
| =use-package=                       | @todo         |
| =auto-package-update=               | @todo         |
| =use-package-ensure-system-package= | @todo         |
| =package=                           | Built-in      |

Load paths from shell

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :custom
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  (when (daemonp)
    (exec-path-from-shell-initialize)))
#+end_src

Load settings for this particular system.

#+begin_src emacs-lisp
(load-file "~/.emacs.d/per-system-settings.el")
#+end_src

Set Emacs to run as a server to be connected to via =emacsclient=.

#+begin_src emacs-lisp
;; only start emacs server when it's not started, I hate warnings.
(setq server-socket-file (concat "/tmp/emacs" (format "%s" (user-real-uid)) "/server"))
(unless (file-exists-p server-socket-file)
  (server-start))

#+end_src

** Package Management

#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ;;("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package for non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

Auto-update packages when Emacs starts.

#+begin_src emacs-lisp
(use-package auto-package-update
   :ensure t
   :config
   (setq auto-package-update-delete-old-versions t
         auto-package-update-interval 4)
   (auto-package-update-maybe))
#+end_src

Extend =use-package= to allow /ensuring/ that system packages are present, and, if not, attempt to install them.

#+begin_src emacs-lisp
(use-package use-package-ensure-system-package
  :ensure t)
#+end_src

** Path Settings

| =exec-path-from-shell= | @todo |

Ensure Emacs' =PATH= is the same as the shell's

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :init
  (when (daemonp)
    (exec-path-from-shell-initialize)))
#+end_src

** Secrets

| =pass= | @todo |

Configure an interface for talking to the system's =pass= to manage secrets.

#+begin_src emacs-lisp
(use-package pass)
#+end_src

** Better Default Settings

#+begin_src emacs-lisp
(setq inhibit-startup-message t                ; Disable the startup message
      inhibit-startup-screen t                 ; Disable the startup screen
      display-time-format "%l:%M %p %b %y"     ; Set a nice display time format
      display-time-default-load-average nil    ; Don't display load average time in the modeline
      require-final-newline t                  ; Ensure files end with a single newline
      tab-always-indent 'complete              ; Tab always completes
      completion-cycle-threshold 3
      visible-bell 1                           ; Silence Emacs noises
      warning-minimum-level :emergency         ; Only warn about real problems
      ad-redefinition-action 'accept           ; Silence warnings for advice redefinition
      fill-column 80                           ; Set the fill-column, possibly move this to setq-default phrasing.
      vc-follow-symlinks t                     ; Don't warn about following symlinks
      indent-tabs-mode nil                     ; Stop using tabs to indent
      large-file-warning-threshold nil)        ; Don't warn for large files
(scroll-bar-mode -1)                           ; Disable scroll bar
(tool-bar-mode -1)                             ; Disable the toolbar
(tooltip-mode -1)                              ; Disable tooltips
(menu-bar-mode -1)                             ; Disable the menu bar
(set-default-coding-systems 'utf-8)           ; Default to utf-8 encoding
#+end_src

Change a few indenting behaviors.

#+begin_src emacs-lisp
(put 'add-function 'lisp-indent-function 2)
(put 'advice-add 'lisp-indent-function 2)
(put 'plist-put 'lisp-indent-function 2)
#+end_src

Keep the emacs configuration directory clean.

#+begin_src emacs-lisp
(setq custom-file
  (if (boundp 'server-socket-dir)
      (expand-file-name "custom.el" server-socket-dir)
      (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src

Avoid creating backup files. Don't regret this later.

#+begin_src emacs-lisp
;; Avoid #file.org#
(auto-save-visited-mode)
(setq create-lockfiles nil)
;; Avoid filename.ext~
(setq make-backup-files nil)
#+end_src

** Cache

Use =.cache/= to contain local data and avoid cluttering the Emacs directory.

#+begin_src emacs-lisp
(defconst cy/cache-directory
  (expand-file-name ".cache/")
  "Directory where all cache files should be saved.")

(defun cy/cache-concat (name)
  "Return the absolute path of NAME under `cy/cache-directory'."
  (let* ((directory (file-name-as-directory cy/cache-directory))
         (path (convert-standard-filename (concat directory name))))
    (make-directory (file-name-directory path) t)
    path))
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'request
  (setq-default request-storage-directory (cy/cache-concat "request/")))
(with-eval-after-load 'tramp
  (setq-default tramp-persistency-file-name (cy/cache-concat "tramp.eld")))
(with-eval-after-load 'url
  (setq-default url-configuration-directory (cy/cache-concat "url/")))
#+end_src

Run garbage collection on focus-out, Emacs /should/ feel snappier overall.

#+begin_src emacs-lisp
(add-function :after after-focus-change-function
  (defun cy/garbage-collect-maybe ()
    (unless (frame-focus-state)
      (garbage-collect))))
#+end_src


** Key Binding Adjustments

| =general=             | @todo |
| =evil=                | @todo |
| =evil-collection=     | @todo |
| =evil-surround=       | @todo |
| =evil-nerd-commenter= | @todo |
| =which-key=           | @todo |
| =evil-org=            | @todo |

Set the =ESC= key to cancel most things.

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboad-escape-quit)
#+end_src

Unbind the =<C-u>= ~universal-argument~ binding. This will allow =evil= to
provide =<C-u>='s typical =vim=-like behavior. Rebind to =<C-s-u>=.

#+begin_src emacs-lisp
(global-set-key (kbd "<C-u>") 'universal-argument)
#+end_srC

Set =<,>= AS the =<leader>= key with =general=. The =<leader>= will act as a launchpad
for keystroke combination based commands.

Set up a definer function that can be used
throughout the document to create new bindings off of the leader.

#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer cy/leader-key-def
    :keymaps `(normal insert visual emacs org-roam org-agenda term)
    :prefix ","
    :global-prefix "C-,"))
#+end_src

Configure =evil-mode=, which emulates and manages Vim states and motions in Emacs.

Additionally, disable arrow keys. They're a crutch that facilitates avoidance of
learning proper keystrokes for things.

#+begin_src emacs-lisp
(defun cy/dont-arrow-me-bro ()
  (interactive)
  (message "Arrow keys are bad, you're better than this."))

(setq evil-want-keybinding nil)
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-fine-undo 'fine)
  (setq-default evil-shift-width tab-width)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  ;; Set the undo system Evil should use.
  (evil-set-undo-system 'undo-redo)
  ;; Disable arrow keys in normal and visual modes.
  (define-key evil-normal-state-map (kbd "<left>") 'cy/dont-arrow-me-bro)
  (define-key evil-normal-state-map (kbd "<down>") 'cy/dont-arrow-me-bro)
  (define-key evil-normal-state-map (kbd "<up>") 'cy/dont-arrow-me-bro)
  (define-key evil-normal-state-map (kbd "<right>") 'cy/dont-arrow-me-bro)
  (evil-global-set-key 'motion (kbd "<left>") 'cy/dont-arrow-me-bro)
  (evil-global-set-key 'motion (kbd "<down>") 'cy/dont-arrow-me-bro)
  (evil-global-set-key 'motion (kbd "<up>") 'cy/dont-arrow-me-bro)
  (evil-global-set-key 'motion (kbd "<right>") 'cy/dont-arrow-me-bro)
  ;; Make sure we're in normal mode, not insert mode when we are in these Emacs modes.
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

Add keybindings for bits of Emacs which are not properly covered by =evil-mode=
using the =evil-collection= package.

#+begin_src emacs-lisp
(use-package evil-collection
    :after evil
    :init
    (setq evil-collection-company-use-tng nil)
    :ensure t
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (evil-collection-init)
    (evil-collection-init 'dashboard)) ; Make sure Evil bindings work on the Dashboard.
#+end_src

Add another collection of =evil= configurations specifically for navigating some =org-mode= areas like the Agenda.

#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

Rebind =evil='s ~q~ to have it quit the current buffer instead of exiting Emacs.

To quit Emacs, use ~:quit~.

#+begin_src emacs-lisp
(defun cy/ex-kill-buffer-and-close ()
  (interactive)
  (unless (char-equal (elt (buffer-name) 0) ?*)
    (kill-this-buffer)))

(defun cy/ex-save-kill-buffer-and-close ()
  (interactive)
  (save-buffer)
  (kill-this-buffer))

(evil-ex-define-cmd "q" 'cy/ex-kill-buffer-and-close)
(evil-ex-define-cmd "wq" 'cy/ex-save-kill-buffer-and-close)
(evil-ex-define-cmd "quit" 'evil-quit)
#+end_src

Emulate =vim-surround= to take actions with surrounding pairs.

The functionality I use the most is, when in [Normal] mode, finding a word or
function and typing ~ysw~ and then the character I want to surround the target
with. I've always remembered this keystroke from an older =vim= package called
YouSurroundWith (I think).

Another way to surround text is in [Visual] mode. The primary difference in
usage between it and [Normal] mode is that instead of the ~ysw~ train, simply
use ~S~.

#+begin_src emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src

Bind =<C-/>= to comment lines in a much better way than Emacs' default =comment-dwim= (bound to =<M-;>=)

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("C-/" . evilnc-comment-or-uncomment-lines))
#+end_src

Display a small popup to show the list of features available after starting a command.

This is particularly useful for defining long command strings starting from =<leader>=.


The =which-key= package displays a small popup to show the list of features
available after starting a command.

This is useful to me as I tend to define long command strings starting from
my leader key.

| =TODO= | Calling ~:ensure t~ shouldn't be necessary because ~use-package-always-ensure~ is non-nil |

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :ensure t
  :diminish which-key-mode
  :config
  (setq which-key-separator " "
        which-key-prefix "+"
        which-key-idle-delay 0.2))
#+end_src

Provide a leader based key binding for evaluating a blocks.

#+begin_src emacs-lisp
(cy/leader-key-def
  "e" '(:ignore t :which-key "evaluate")
  "eh" '(eval-last-sexp :which-key "here")
  "eb" '(eval-buffer :which-key "buffer")
  "er" '(eval-region :which-key "region"))
#+end_src

Set a general parent binding for UI toggling. On its own, it will do nothing,
but it acts as a grouping method for later key bindings related to UI toggling.

#+begin_src emacs-lisp
(cy/leader-key-def
  "t" '(:ignore t :which-key "toggle"))
#+end_src

** Theme

I primarily use the =doom-themes= package to get some very nice themes. Some of
these themes need explicit bold / italic display support turned on as part of
the package's configuration.

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (doom-themes-org-config))
#+end_srC

FOR themes outside of =doom-themes=, this section configures a personal custom
themes directory within the dotfiles repository for keeping themes together.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path
             (concat
              "~/Projects/home/dotfiles/" "emacs-themes"))
#+end_src

Enable one of the themes, either from the custom theme directory or from the
themes provided by =doom-themes=.

#+begin_src emacs-lisp
;; (load-theme 'doom-horizon t)
;; (load-theme 'doom-wilmersdorf t)
(load-theme 'doom-monokai-spectrum t)
#+end_src

Prettify fringe bitmaps.

#+begin_src emacs-lisp
(define-fringe-bitmap 'left-curly-arrow [255] nil nil '(center t))
#+end_src

Configure a leader based key binding for choosing and toggling theemes under the =<leader>-t= parent.

#+begin_src emacs-lisp
(cy/leader-key-def
  "tc" '(consult-theme :which-key "choose theme"))
#+end_src

Set the background of HTML color strings in buffers to the color they represent.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :defer t
  :hook (org-mode
         emacs-lisp-mode
         web-mode
         typescript-mode
         js2-mode))
#+end_src

** Import Sibling Dotfiles

| =cy-workflow= | [[file:Workflow.org][./Workflow.org]] |
| =cy-mail=     | [[file:Mail.org][./Mail.org]]     |
| =cy-calendar= | [[file:Calendar.org][./Calendar.org]] |

Provide agenda workflows, =mu4e= configuration, and calendar integration from sibling files.

#+begin_src emacs-lisp
(require 'cy-workflow (concat user-emacs-directory "cy-workflow.el"))
(require 'cy-mail (concat user-emacs-directory "cy-mail.el"))
(require 'cy-calendar (concat user-emacs-directory "cy-calendar.el"))
#+end_src

* Features

** Buffers and Windows

| =olivetti=     | https://github.com/rnkn/olivetti        |
| =winner=       | Built-in                                |
| =centaur-tabs= | https://github.com/ema2159/centaur-tabs |

Apply system-specific configurations for font sizes and dpi, among other things provided in =./Systems.org=.

#+begin_src emacs-lisp
;; (set-frame-parameter (selected-frame) 'alpha cy/frame-transparency)
;; (add-to-list 'default-frame-alist `(alpha . ,cy/frame-transparency))
;; (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'default-frame-alist '(cy/system-settings-get 'desktop/dpi))
(add-to-list 'default-frame-alist '(cy/system-settings-get 'emacs/default-face-size))
#+end_src

Define a toggle function that can be called to turn transparency on and off.

#+begin_src emacs-lisp
(defun cy/toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(92 . 92) '(100 . 100)))))
(global-set-key (kbd "C-c t") 'cy/toggle-transparency)
#+end_src

Bind the transparency toggle to the =toggle= parent of the =<leader>= key.

#+begin_src emacs-lisp
(cy/leader-key-def
  "tT" '(cy/toggle-transparency :which-key "transparency"))
#+end_src

=Olivetti= allows the centering of buffers for aesthetics. This configuration
turns it on automatically when visiting a single buffer, and disables itself
otherwise.

The configuration conveniently silences left clicks on each of the two margins.

#+begin_src emacs-lisp
(use-package olivetti
   :config
   (add-hook 'text-mode-hook 'olivetti-mode)
   ;(add-hook 'text-mode-hook (lambda () (setq indent-line-function #'indent-relative)))
   (setq-default olivetti-body-width 140))
#+end_src

Configure window history with =winner-mode=.

#+begin_src emacs-lisp
(winner-mode)
(define-key evil-window-map "u" 'winner-undo)
;; (define-key evil-window-map "???" 'winner-redo)
#+end_src

Configure line numbers. Some modes don't need them.

#+begin_src emacs-lisp
;; Turn on column number mode and display line numbers for everything by default.
(column-number-mode)

;; Enable line numbers for certain modes.
(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

;; Disable line numbers for certain modes that are sub-modes of the above.
(dolist (mode '(org-mode-hook
                term-mode-hook
                treemacs-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Enable proper Unicode glyph support.

#+begin_src emacs-lisp
(use-package unicode-fonts
  :ensure t
  :custom
  (unicode-fonts-skip-font-groups '(low-quality-glyphs))
  (unicode-fonts-setup))
#+end_src

Configure =centaur-tabs= to make grouping buffers a little more simple.

#+begin_src emacs-lisp
  ;; (use-package centaur-tabs
  ;;   :demand
  ;;   :config
  ;;   (centaur-tabs-mode t)
  ;;   (centaur-tabs-group-by-projectile-project)
  ;;   (centaur-tabs-headline-match)
  ;;   (setq centaur-tabs-style "rounded"
  ;; 	  centaur-tabs-height 32
  ;; 	  centaur-tabs-set-icons t
  ;; 	  centaur-tabs-set-modified-marker t
  ;; 	  centaur-tabs-set-bar 'under
  ;; 	  x-underline-at-descent-line t
  ;; 	  centaur-tabs-adjust-buffer-order 'left)
  ;;   ;; (defun centaur-tabs-buffer-groups ()
  ;;     ;; (list
  ;;      ;; (cond
  ;; 	;; ((or
  ;; 	  ;; (and
  ;; 	   ;; (and
  ;; 	    ;; (string-equal "*" (substring (buffer-name) 0 1))
  ;; 	    ;; (not (string-equal "*mu4e-headers*" buffer-name)))
  ;; 	   ;; (memq major-mode '(magit-process-mode
  ;; 			      ;; magit-status-mode
  ;; 			      ;; magit-diff-mode
  ;; 			      ;; magit-log-mode
  ;; 	  ;; 		      magit-file-mode
  ;; 	  ;; 		      magit-blob-mode
  ;; 	  ;; 		      magit-blame-mode)))
  ;; 	  ;;  "Emacs")
  ;; 	  ;; ((derived-mode-p 'prog-mode)
  ;; 	   ;; "Editing")
  ;; 	  ;; ((derived-mode-p 'mu4e-main-mode)
  ;; 	  ;;  ;; "Mail")
  ;; 	  ;; ((derived-mode-p 'dired-mode)
  ;; 	  ;;  "Dired")
  ;; 	  ;; ((memq major-mode '(helpful-mode
  ;; 	  ;; 		      help-mode))
  ;; 	  ;;  "Help")
  ;; 	  ;; ((memq major-mode '(org-mode
  ;; 	  ;; 		      org-agenda-clockreport-mode
  ;; 	  ;; 		      org-src-mode
  ;; 	  ;; 		      org-agenda-mode
  ;; 	  ;; 		      org-beamer-mode
  ;; 	  ;; 		      org-indent-mode
  ;; 	  ;; 		      org-bullets-mode
  ;; 	  ;; 		      org-cdlatex-mode
  ;; 	  ;; 		      org-agenda-log-mode
  ;; 	  ;; 		      diary-mode))
  ;; 	  ;;  "OrgMode")
  ;; 	  ;; (t
  ;; 	   ;; (centaur-tabs-get-group-name (current-buffer))))))

  ;;   :hook
  ;;   (dashboard-mode . centaur-tabs-local-mode)
  ;;   (vterm-mode . centaur-tabs-local-mode)
  ;;   (term-mode . centaur-tabs-local-mode)
  ;;   (calendar-mode . centaur-tabs-local-mode)
  ;;   ;; (mu4e-view-mode . centaur-tabs-local-mode)
  ;;   (org-agenda-mode . centaur-tabs-local-mode))
#+end_src

Provide leader based key bindings for Emacs 27+'s tab bar feature.
Use =,-.= to move to the next tab and =,-'= to move the the previous tab.

#+begin_src emacs-lisp
(cy/leader-key-def
  "." '(tab-bar-switch-to-next-tab :which-key "next tab")
  "'" '(tab-bar-switch-to-prev-tab :which-key "prev tab"))
#+end_src



# Add a minor mode for rendering bracket links from =org-mode= files in other buffers.

#+begin_src emacs-lisp
;; (use-package org-link-minor-mode
  ;; :hook (dashboard-mode . org-link-minor-mode))
#+end_src

** Mode Line
| =diminish=             | @todo                                              |
| =minions=              | @todo                                              |
| =doom-modeline=        | @todo                                              |

Enable diminishing in modelines to hide excessive content.

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

Add a menu to the modeline to visualize and change enabled common minor-modes.

#+begin_src emacs-lisp
(use-package minions
  :diminish
  :hook (doom-modeline-mode . minions-mode)
  :custom
  (minions-mode-line-lighter ""))
#+end_src

Configure and prettify the modeline(s).

#+begin_src emacs-lisp
;; Run (all-the-icons-install-fonts) after this.
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom-face
  (mode-line ((t (:height 0.85))))
  (mode-line-inactive ((t (:height 0.85))))
  :custom
  (doom-modeline-height 15)
  (doom-modeline-bar-width 6)
  (doom-modeline-lsp t)
  (doom-modeline-github nil)
  (doom-modeline-mu4e t)
  (doom-modeline-irc nil)
  (doom-modeline-minor-modes t)
  (doom-modeline-persp-name nil)
  (doom-modeline-buffer-file-name-style 'truncate-except-project)
  (doom-modeline-major-mode-icon nil))
#+end_src

** File Browsing
| =dired=                | Built-in                                |
| =deft=                 | @todo                                   |
| =neotree=              | https://github.com/jaypei/emacs-neotree |

Configure preferred settings for =dired=, the primary built-in file browsing mechanism for Emacs.

@todo: The current configuration works, but uses nested =use-package= statements. Fix it.

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :defer 1
  :commands (dired dired-jump)
  :config
  (setq dired-listing-switches "-agho --group-directories-first"
        dired-omit-files "^\\.[^.].*"
        dired-omit-verbose nil)

  (autoload 'dired-omit-mode "dired-x")

  (add-hook 'dired-load-hook
    (lambda ()
     (interactive)
     (dired-collapse)))

  (add-hook 'dired-mode-hook
    (lambda ()
      (interactive)
       (dired-omit-mode 1)
       (expand-file-name default-directory)
       (all-the-icons-dired-mode 1)
       (hl-line-mode 1)))

 ;; @todo Had to run this once to get the icons.
 (use-package all-the-icons-dired
   :hook (dired-mode . all-the-icons-dired-mode))

 (add-hook 'dired-mode-hook
   (lambda ()
    (interactive)
    (dired-omit-mode 1)
    (unless
          (s-equals? "/gnu/store/" (expand-file-name default-directory))
          (all-the-icons-dired-mode 1))
    (hl-line-mode 1)))

  (use-package dired-rainbow
    :defer 2
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

  (use-package dired-single
    :ensure t
    :defer t)

  (use-package dired-ranger
    :defer t)

  (use-package dired-collapse
    :defer t)

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "H" 'dired-omit-mode
    "l" 'dired-single-buffer
    "y" 'dired-ranger-copy
    "X" 'dired-ranger-move
    "p" 'dired-ranger-paste)) ;; End of use-package dired

(defun cy/dired-link (path)
  (lexical-let ((target path))
    (lambda () (interactive) (message "Path: %s" target) (dired target))))

(cy/leader-key-def
  "d"   '(:ignore t :which-key "dired")
  "dd"  '(dired :which-key "Here")
  "dh"  `(,(cy/dired-link "~") :which-key "Home")
  "di"  `(,(cy/dired-link "~/Notes/Inbox.org") :which-key "Inbox")
  "dj"  `(,(cy/dired-link "~/Notes/Journal.org") :which-key "Journal")
  "dn"  `(,(cy/dired-link "~/Notes") :which-key "Notes")
  "do"  `(,(cy/dired-link "~/Downloads") :which-key "Downloads")
  "dp"  `(,(cy/dired-link "~/Projects") :which-key "Projects")
  "dv"  `(,(cy/dired-link "~/Videos") :which-key "Videos")
  "dm"  `(,(cy/dired-link "~/Projects/work/mobomo") :which-key "Mobomo Projects")
  "d."  `(,(cy/dired-link "~/Projects/home/dotfiles") :which-key "dotfiles"))
#+end_src

Setup =deft= as a nice alternative way to browse files, specifically installed for =org-roam=.

If this ever gets super slow, look into installing the Notdeft fork.

#+begin_src emacs-lisp
(use-package deft
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "~/Notes/Roam"))

(cy/leader-key-def
  "<SPC>" '(deft :which-key "deft"))
#+end_src

Configure =neotree=, a file browser and project explorer like =NerdTree= for =vim= that displays in a side window.

#+begin_src emacs-lisp
(use-package neotree
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src

Configure =treemacs=. Like =neotree=, =treemacs= is a file browser, but with
better integration with other plugins like =projectile=. It also
provides a number of interesting functionalities like swapping
workspaces.

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winup-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay        0.5
	    treemacs-directory-name-transformer      #'identity
	    treemacs-display-in-side-window          t
	    treemacs-eldoc-display                   t
	    treemacs-file-event-delay                2000
	    treemacs-file-extension-regex            treemacs-last-period-regex-value
	    treemacs-file-follow-delay               0.2
	    treemacs-file-name-transformer           #'identity
	    treemacs-follow-after-init               t
	    treemacs-expand-after-init               t
	    treemacs-git-command-pipe                ""
	    treemacs-goto-tag-strategy               'refetch-index
	    treemacs-indentation                     2
	    treemacs-indentation-string              " "
	    treemacs-is-never-other-window           nil
	    treemacs-max-git-entries                 5000
	    treemacs-missing-project-action          'ask
	    treemacs-move-forward-on-expand          nil
	    treemacs-no-png-images                   nil
	    treemacs-no-delete-other-windows         t
	    treemacs-project-follow-cleanup          nil
	    treemacs-persist-file                    ('cy/cache-concat treemacs-persist)
	    treemacs-position                        'left
	    treemacs-read-string-input               'from-child-frame
	    treemacs-recenter-distance               0.1
	    treemacs-recenter-after-file-follow      nil
	    treemacs-recenter-after-tag-follow       nil
	    treemacs-recenter-after-project-jump     'always
	    treemacs-recenter-after-project-expand   'on-distance
	    treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	    treemacs-show-cursor                     nil
	    treemacs-show-hidden-files               t
	    treemacs-silent-filewatch                nil
	    treemacs-silent-refresh                  nil
	    treemacs-sorting                         'alphabetic-asc
	    treemacs-space-between-root-nodes        t
	    treemacs-tag-follow-cleanup              t
	    treemacs-tag-follow-delay                0.5
	    treemacs-user-mode-line-format           nil
	    treemacs-user-header-line-format         nil
	    treemacs-width                           40
	    treemacs-width-is-initially-locked       t
	    treemacs-workspace-switch-cleanup        nil)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
	  ("M-0"        . treemacs-select-window)
	  ("C-x t 1"    . treemacs-delete-other-windows)
	  ("C-x t t"    . treemacs)
	  ("C-x t B"    . treemacs-bookmark)
	  ("C-x t C-t"  . treemacs-find-file)
	  ("C-x t M-t"  . treemacs-find-tag)))


  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
#+end_src

Set leader based keybindings for =neotree=. The key should be a sub-key of the general UI Toggles binding of =<leader>-t=, i.e.: /toggle/-> /tree/.

#+begin_src emacs-lisp
(cy/leader-key-def
  "tt" '(treemacs :which-key "tree"))
#+end_src

** Completion

| =vertico=    | https://github.com/minad/vertico    |
| =marginalia= | https://github.com/minad/marginalia |
| =corfu=      | https://github.com/minad/corfu      |
| =consult=    | consult                             |

Provide various commands to quickly select items from lists of candidates with completion. Replace =counsel=.

#+begin_quote
Consult offers in particular an advanced buffer switching command consult-buffer
to switch between buffers and recently opened files. Multiple search commands
are provided, an asynchronous consult-grep and consult-ripgrep, and
consult-line, which resembles Swiper.
#+end_quote

#+begin_src emacs-lisp
(use-package consult
  :after (vertico)
  :hook
  (org-mode . (lambda () (setq-local consult-fontify-preserve nil)))
  :init
  (with-eval-after-load 'evil
    (evil-global-set-key 'motion "gm" 'consult-mark)
    (evil-global-set-key 'motion "gM" 'consult-imenu)
    (evil-global-set-key 'motion "go" 'consult-outline)))

(use-package consult-flycheck
  :after (consult))

(use-package consult-lsp
  :after (consult))

(cy/leader-key-def
  "b"   '(:ignore t :which-key "buffer")
  "bs"  '(consult-buffer :which-key "switch"))
#+end_src

Use a performant vertical completion UI. =vertico= and =corfu= together seem to be a
decent replacement for =Ivy=.

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  (setq vertico-resize t) ;; Grow and shrink the vertico buffer
  (setq vertico-cycle t))  ;; Enable cycling for `vertico-next' and `vertico-previous'.
#+end_src

Minimal completion-at-point. Everyone else seems to be doing it with =corfu=, why not Zoidburg?

#+begin_src emacs-lisp
;; (use-package company
;;   :hook (after-init . global-company-mode))
(use-package corfu
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-quit-at-boundary t)
  (corfu-quit-no-match t)
  (corfu-commit-predicate nil)
  ;; (corfu-echo-documentation t)
  :bind (:map corfu-map
	      ("TAB" . corfu-next)
	      ([tab] . corfu-next)
	      ("S-TAB" . corfu-previous)
	      ([backtab] . corfu-previous))
  :init
  (corfu-global-mode))
#+end_src

Provide rich minibuffer annotations via =marginalia=.

#+begin_src emacs-lisp
(use-package marginalia
  :bind
  (:map minibuffer-local-map
        ("s-T" . marginalia-cycle))
  :hook
  (vertico-mode . marginalia-mode)
  :init ( marginalia-mode ))
#+end_src

Use an advanced completion style that allows completion based on space-separated tokens, out of order.

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless))
  (orderless-component-separator 'orderless-escapable-split-on-space))
#+end_src

** Text Editing Features

Auto-save files when buffers are changed.

The exclusion list excludes the entire dotfiles directory, since auto-save in these files may be quite cumbersome due to the large amount of tangling and script running that happens throughout.

#+begin_src emacs-lisp
(defun cy/auto-save-exclude-dir-list ()
  (directory-files "~/Projects/home/dotfiles" t "\\.org$"))
#+end_src

#+begin_src emacs-lisp
(use-package super-save
  :ensure t
  :defer 1
  :diminish super-saver-mode
  :config
  (super-save-mode +1)
  ;; (setq super-save-exclude (concat (file-name-directory buffer-file-name) "*.org"))
  (setq super-save-exclude (cy/auto-save-exclude-dir-list))
  (setq super-save-auto-save-when-idle t))
#+end_src

Automatically revert files in open buffers that have been changed elsewhere.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
;; This can support messages if they get annoying
;; (setq auto-revert-verbose nil)
#+end_src

Highlight matching braces in text.

#+begin_src emacs-lisp
(use-package paren
  :config
  (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
  (show-paren-mode 1))
#+end_src

Colorize nested parenthesis and brackets according to nesting depth.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

Using the =ws-butler= package, automatically remove trailing whitespace.

#+begin_src emacs-lisp
(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
  (prog-mode . ws-butler-mode)))
#+end_src

Automatically tangle when saved without having to worry about
=org-confirm-babel-evaluate-all=. Instead, do it some time around the =after-save=
hook.

#+begin_src emacs-lisp
(defun cy/org-babel-tangle-dont-ask ()
  ;; Dynamic scoping to the rescue
  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle)))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'cy/org-babel-tangle-dont-ask
                                              'run-at-end 'only-in-org-mode)))
#+end_src

Stateful Keymaps with Hydra

#+begin_src emacs-lisp
(use-package hydra
  :defer 1)
#+end_src

Support scaling text with =hydra-text-scale=.

#+begin_src emacs-lisp
(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))
#+end_src

| =smartparens= | https://github.com/Fuco1/smartparens |

Automatically complete pairs of parenthesis.

#+begin_src emacs-lisp
(use-package smartparens
  :init
  (require 'smartparens-config)
  :hook (prog-mode . smartparens-mode)) ;; Automatically enable smartparens-mode for prog-mode.
#+end_src

Highlight matching parenthesis pairs.

#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

| =flyspell=               | Built-in                                       |
| =flyspell-correct=       | https://github.com/d12frosted/flyspell-correct |
| =flyspell-correct-popup= | https://github.com/d12frosted/flyspell-correct |

Set up spell checking using the system's =aspell= command.

#+begin_src emacs-lisp
(use-package flyspell
  :init
  (flyspell-mode 1)
  :config
  (setq ispell-program-name "aspell")
  (setq ispell-list-command "aspell --list"))

(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
#+end_src

Use the =flyspell-correct-popup= package to provide a spell correction interface =flyspell-correct= similar to =corfu=.

#+begin_src emacs-lisp
(use-package flyspell-correct-popup
  :after flyspell)
#+end_src

** Projects

*** Directory-Local Variables

Define standard setups for projects that I use on a daily basis.

In order to customize specifics directories recursively and without polluting
the Emacs Lisp configuration, one can provide directory-local variables through
a strategically positioned .dir-locals.el file or resort to directory classes
for reusability.

#+begin_src emacs-lisp
(dir-locals-set-class-variables 'python
  '((python-mode . ((eval . (eglot-ensure))))))
#+end_src

#+begin_src emacs-lisp
;; (dir-locals-set-class-variables 'react
;;  '((js-mode . ((eval . (prettier-mode))))
;;    (js2-mode . ((eval . (prettier-mode))))
;;    (js2-minor-mode . ((eval . (prettier-mode))))
;;    (json-mode . ((eval . (prettier-mode))))
;;    (rjsx-mode . ((eval . (prettier-mode))))
;;    (scss-mode . ((eval . (prettier-mode))))
;;    (web-mode . ((eval . (eglot-ensure))
;;                 (eval . (prettier-mode))
;;                 (prettier-parsers . (typescript))))))
#+end_src


*** Projectile

Projectile brings project-level facilities to Emacs such as grep, find, and replace.

#+begin_quote
Projectile is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies (when feasible). For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find
(but for performance sake an indexing mechanism backed by external commands
exists as well).

    — Bozhidar Batsov
#+end_quote

#+begin_src emacs-lisp
(use-package projectile
  :hook
  (after-init . projectile-mode)
  :init
  (setq-default
   projectile-cache-file (cy/cache-concat "projectile/cache")
   projectile-known-projects-file (cy/cache-concat "projectile/projects.eld"))
  :custom
  (projectile-dynamic-mode-line nil)
  (projectile-enable-caching t)
  (projectile-indexing-method 'hybrid)
  (projectile-track-known-projects-automatically nil)
  (projectile-switch-project-action #'projectile-commander))
#+end_src

** Dashboard

| =dashboard=            | https://github.com/emacs-dashboard/emacs-dashboard |

Set up a dashboard to use as a starting point when Emacs' launches without a recoverable session.

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  ;;:mode ("\\*dashboard*\\" . dashboard-mode)
  ;;:interpreter ("dashboard" . dashboard-mode)
  :config
  ;; Set the title
  (setq dashboard-banner-logo-title "Carwin's Dashboard")
  ;; Show the logo in the banner
  (setq dashboard-startup-banner 'logo)
  ;; Show package load / init time
  (setq dashboard-set-init-info t)
  ;; Icons
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)))
  ;; (setq dashboard-match-agenda-entry "org-gcal")
  ;; (setq dashboard-filter-agenda 'dashboard-no-filter-agenda)
  ;; (setq dashboard-filter-agenda t)
  (setq dashboard-filter-agenda-entry #'dashboard-filter-agenda-by-time)
  (setq dashboard-org-agenda-categories '("@home"))
  (setq dashboard-week-agenda t)
  (dashboard-setup-startup-hook))

(set-face-attribute 'dashboard-items-face nil :foreground nil :inherit 'fixed-pitch)

#+end_src

Set the initial buffer to the =Dashboard=.

This is useful if you start Emacs as a server and connect through /emacsclient/.

#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** Version Control With Magit

| =magit=              | https://github.com/magit/magit                                |
| =git-gutter-fringe=  | https://github.com/emacsorphanage/git-gutter-fringe           |
| =git-commit=         | https://github.com/magit/magit/blob/master/lisp/git-commit.el |
| =gitattributes-mode= | https://github.com/magit/git-modes#gitattributes-mode         |
| =gitconfig-mode=     | https://github.com/magit/git-modes#gitconfig-mode             |
| =gitignore-mode=     | https://github.com/magit/git-modes#gitignore-mode             |
| =transient=          | https://github.com/magit/transient                            |

Auto-fill commit messages.

#+begin_src emacs-lisp
(use-package git-commit
  :hook
  (git-commit-mode . (lambda () (setq-local fill-column 72))))
#+end_src

Display indicators for =git= related things in the fringe.

#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :preface
  (defun cy/git-gutter-enable ()
    (when-let* ((buffer (buffer-file-name))
                (backend (vc-backend buffer)))
      (require 'git-gutter)
      (require 'git-gutter-fringe)
      (git-gutter-mode 1)))
  :hook
  (after-change-major-mode . cy/git-gutter-enable)
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [255] nil nil '(center t))
  (define-fringe-bitmap 'git-gutter-fr:deleted [255 255 255 255] nil nil 'bottom)
  (define-fringe-bitmap 'git-gutter-fr:modified [255] nil nil '(center t)))
#+end_src

Provide major-modes for =git= specific files.

#+begin_src emacs-lisp
(use-package gitattributes-mode)
(use-package gitconfig-mode)
(use-package gitignore-mode)
#+end_src

Magit provides Git facilities directly from within Emacs.

#+begin_quote
    Magit is an interface to the version control system Git, implemented as an Emacs package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains.

    — Jonas Bernoulli
#+end_quote

#+begin_src emacs-lisp
(use-package magit
  :after transient
  :bind
  (:map magit-file-section-map
   ("<return>" . magit-diff-visit-file-other-window)
   :map magit-hunk-section-map
   ("<return>" . magit-diff-visit-file-other-window)
   :map magit-status-mode-map
   ("M-1" . nil)
   ("M-2" . nil)
   ("M-3" . nil)
   ("M-4" . nil))
  :hook
  (magit-post-stage-hook . me/magit-recenter)
  :custom
  (epg-pinentry-mode 'loopback)
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (magit-diff-highlight-hunk-region-functions
   '(magit-diff-highlight-hunk-region-using-face))
  (magit-diff-refine-hunk 'all)
  (magit-module-sections-nested nil)
  (magit-section-initial-visibility-alist
   '((modules . show) (stashes . show) (unpulled . show) (unpushed . show)))
  :config
  (magit-add-section-hook
   'magit-status-sections-hook 'magit-insert-modules-overview 'magit-insert-merge-log)
  (remove-hook 'magit-section-highlight-hook #'magit-section-highlight))
#+end_src

Add prerequisite for =magit= package.

#+begin_src emacs-lisp
(use-package transient
  :init
  (setq-default
   transient-history-file (cy/cache-concat "transient/history.el")
   transient-levels-file (cy/cache-concat "transient/levels.el")
   transient-values-file (cy/cache-concat "transient/values.el"))
  :custom
  (transient-default-level 5)
  (transient-mode-line-format nil))
#+end_src

* Diagnostics

Try out =eglot= for a while to compare it with trusty =lsp-mode=.

#+begin_src emacs-lisp
(use-package eglot
  :hook ((typescript-mode . eglot-ensure))
  :commands (eglot)
  :custom
  (eglot-autoshutdown t)
  :config
  (add-to-list 'eglot-server-programs '(js-mode . ("typescript-language-server" "--stdio")))
  (add-to-list 'eglot-server-programs '(js2-mode . ("typescript-language-server" "--stdio"))))
  ;; (add-to-list 'eglot-stay-out-of 'eldoc-documentation-strategy))
#+end_src
* Linters

#+begin_src emacs-lisp
(use-package prettier
  :config
  (add-to-list 'prettier-enabled-parsers 'json-stringify))
#+end_src

* Languages


#+begin_src emacs-lisp
(use-package aggressive-indent
  :hook
  (css-mode . aggressive-indent-mode)
  (emacs-lisp-mode . aggressive-indent-mode)
  (js-mode . aggressive-indent-mode)
  (typescript-mode . aggressive-indent-mode)
  (lisp-mode . aggressive-indent-mode)
  :custom
  (aggressive-indent-comments-too t)
  :config
  (add-to-list 'aggressive-indent-protected-commands 'comment-dwim))
#+end_src

** CSS

| =css-mode=  | Built-in |
| =scss-mode= | Built-in |

#+begin_src emacs-lisp
(use-package css-mode
  :ensure nil
  :custom
  (css-indent-offset 2))
#+end_src

** JavaScript

Use =js-doc= package to support js-doc style commenting.

#+begin_src emacs-lisp
(use-package js-doc)
#+end_src

Configure the typescript mode

#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :config
  (setq typescript-indent-level 2))
#+end_src

Create a handy function to apply js indention preferences to various modes through hooks.

#+begin_src emacs-lisp
(defun cy/set-js-indentation ()
  (setq js-indent-level 2)
  (setq evil-shift-width 2)
  (setq-default tab-width 2))
#+end_src

Configure the js-mode

#+begin_src emacs-lisp
(use-package js2-mode
  :mode (rx ".js" eos)
  :config
  (add-hook 'js-mode-hook 'eglot-ensure)
  (add-hook 'js2-mode-hook #'cy/set-js-indentation)
  (add-hook 'js2-minor-mode-hook #'cy/set-js-indentation)
  (add-hook 'js-mode-hook #'cy/set-js-indentation)
  (add-hook 'web-mode-hook #'cy/set-js-indentation)
  (add-hook 'json-minor-mode-hook #'cy/set-js-indentation)
  (setq js2-mode-show-strict-warnings nil)
  :custom
  (add-to-list 'exec-path (expand-file-name "~/.nvm/go/bin"))

  (js-switch-indent-offset 2)
  (js2-highlight-level 3)
  (js2-idle-timer-delay 0)
  (js2-mode-show-parse-errors nil)
  (js2-mode-show-strict-warnings nil))
#+end_src

Tell js-mode to use j2-mode's js2-minor-mode.

#+begin_src emacs-lisp
(add-hook 'js-mode-hook 'js2-minor-mode)
#+end_src

Attempt to add the add-node-modules-path package to the js modes.
@todo This doesn't appear to work when looking for binaries like prettier. Disabled for now, but needs a solution.

#+begin_src emacs-lisp
(use-package add-node-modules-path
  :disabled
  :after js2-mode
  :hook (js2-mode . add-node-modules-path)
        (js-mode . add-node-modules-path))
#+end_src


** TypeScript

Make .ts files activate typescript-mode when opened. Also adds a hook to typescript-mode-hook to call lsp-deferred so that lsp-mode is activated and the file gets LSP features every time TypeScript code is edited.

#+begin_src emacs-lisp

#+end_src

For lsp-mode to work with TypeSript (and JavaScript) you need to install a language server on your machine. If you have Node.js installed, this is the easy way:

#+begin_src shell
npm install -g typescript-language-server typescript
#+end_src

This will install the typescript-language-server and the TypeScript compiler package.

** Emacs Lisp

#+begin_src emacs-lisp
  ;; (add-hook 'emacs-lisp-mode-hook 'flycheck-mode)

  ;; Improved help in Emacs.
  (use-package helpful
    :ensure t)
    ;; :custom
    ;; (counsel-describe-function-function #'helpful-callable)
    ;; (counsel-describe-variable-function #'helpful-variable)
    ;; Remap whatever key is bound to these functions to go to these other functions instead.
    ;; This doesn't change the keybinding itself, only its target.
    ;; :bind
    ;; ([remap describe-function] . counsel-describe-function)
    ;; ([remap describe-command] . helpful-command)
    ;; ([remap describe-variable] . counsel-describe-variable)
    ;; ([remap describe-key] . helpful-key))

  (cy/leader-key-def
    "e"   '(:ignore t :which-key "eval")
    "eb"  '(eval-buffer :which-key "eval buffer")
    "eh"  '(eval-last-sexp :which-key "eval this"))

  (cy/leader-key-def
    :keymaps 'visual
    "er"  '(eval-region :which-key "eval region"))

#+end_src

@todo: =,er= for evaluating a visual-mode region doesn't seem to work.

** JSON

#+begin_src emacs-lisp
(use-package json-mode)
(add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
(add-to-list 'auto-mode-alist '("\\.esdoc\\.json\\'" . json-mode))
(add-to-list 'auto-mode-alist '("\\.*\\.json\\'" . json-mode))
#+end_src

** PHP

I do a ton of PHP work, but oddly don't have much configuration for it here. I still fall back to IntelliJ, but it would be nice to some day move entirely into Emacs.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\.twig\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.module\\'" . php-mode))

(add-hook 'php-mode-hook '(lambda ()
                            (setq c-basic-offset 2)))
(add-hook 'php-mode-hook '(lambda ()
                            (setq display-line-numbers 'absolute)))

(use-package php-mode
  :ensure t
  :hook (php-mode-hook 'php-enable-drupal-coding-style))

(eval-after-load 'php-mode
  '(progn
     (setq php-mode-coding-style 'drupal)
     ))

(use-package drupal-mode
  :after (php-mode))
#+end_src

** Python

=lsp-mode= and dap-mode again, this time for Python.

Ensure the ~pyls~ language server is installed before using =lsp-mode=.

#+begin_src shell
pip install --user "python-language-server[all]"
#+end_src

There are many others, but this one is as good as any for now.

#+begin_src emacs-lisp
(use-package python-mode
  :ensure t
  :hook (python-mode . lsp-deferred)
  :custom
  ;; Set these if python3 is called "python3" on the system.
  ;; (python-shell-interpreter "python3")
  ;; (dap-python-executable "python3")
  (dap-python-debugger 'debugpy)
  :config
  (require 'dap-python))
#+end_src

You can use pyvenv package to use virtualenv environments in Emacs. The pyvenv-activate command should configure Emacs to cause lsp-mode and dap-mode to use the virtual environment when they are loaded, just select the path to your virtual environment before loading the project.

** Golang

#+begin_src emacs-lisp
(defun cy/lsp-go-install-save-hooks()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'cy/lsp-go-install-save-hooks)

(use-package go-mode
  :init
  (add-to-list 'exec-path (expand-file-name "~/go/bin"))
  (add-to-list 'exec-path (expand-file-name "~/go/src/golang.org/x/lint/misc/emacs"))
(add-hook 'go-mode-hook 'lsp-deferred)) ;; Do this for golang support, it's built-in to lsp.

#+end_src

** HTML

#+begin_src emacs-lisp
(use-package web-mode
  :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
  :config
  (setq-default web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-attribute-indent-offset 2))

;; 1. Start the server with `httpd-start'
;; 2. Use `impatient-mode' on any buffer
(use-package impatient-mode
  :ensure t)
(use-package skewer-mode
  :ensure t)
#+end_src

** YAML

#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml\\'")
#+end_src

** Systemd

Really useful for editing Systemd  timers and configurations.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.service\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.timer\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.target\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.mount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.slice\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.socket\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.path\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.netdev\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.network\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.link\\'" . conf-unix-mode))
#+end_src

** Markdown

Assuming the command =multimarkdown= is available to the system, Markdown can be previewed with ~C-c C-c p~.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

#+begin_src emacs-lisp
(defun cy/markdown-html (buffer)
  (princ (with-current-buffer buffer
    (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://strapdownjs.com/v/0.2/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
  (current-buffer)))
#+end_src

With this function defined, impatient mode needs to be instructed to use it via: ~M-x imp-set-user-filter RET cy/markdown-html RET~.

For =markdown-preview-mode= to work, the =websocket.el= dependency is required. This package is not part of melpa/elpa and needs to be installed manually via ~M-x package-install-file <path-to-zip>~. =websocket.el= can be found here: https://github.com/ahyatt/emacs-websocket.

#+begin_src emacs-lisp
(use-package markdown-preview-mode)
#+end_src

** Rust

This is a newish section. Expect changes.

#+begin_src emacs-lisp
(use-package rust-mode
  :after (flycheck)
  :bind ( :map rust-mode-map
          (("C-c C-t" . racer-describe)))
  :config
  (progn
    ;; add flycheck support for Rust.
    ;; https://github.com/flycheck/flycheck-rust
    (use-package flycheck-rust)

    ;; cargo mode for all cargo related operations
    (use-package cargo
      :hook (rust-mode . cargo-minor-mode)
      :bind
      ("C-c C-c C-n" . cargo-process-new))

    ;; racer mode for IDE-esque features.
    (use-package racer
      :hook (rust-mode . racer-mode)
      :config
      (progn
        ;; set racer rust source path env var
        (setq racer-rust-path (getenv "RUST_SRC_PATH"))
        (defun cy/racer-mode-hook ()
          ;; (set (make-local-variable 'company-backends)
               ;; '((company-capf company-files)))
        ;; enable company and eldoc minor modes in rust-mode
        ;; (add-hook 'racer-mode-hook 'company-mode)
        (add-hook 'racer-mode-hook 'eldoc-mode)))
    ;; (add-hook 'rust-mode-hook 'flycheck-mode)
    (add-hook 'rust-mode-hook 'flycheck-rust-setup)

    ;; format Rust buffers on save using rustfmt
    (add-hook 'before-save-hook
              (lambda ()
                (when (eq major-mode 'rust-mode)
                  (rust-format-buffer)))))))
#+end_src

** Dockerfile

| =dockerfile-mode= | https://github.com/spotify/dockerfile-mode |

Add syntax highlighting for Dockerfiles and allow the building of images from the buffer via =(C-c C-b)=.

#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src

** Org Mode

| =org=       | Built-in                             |
| =org-roam=  | https://github.org/org-roam/org-roam |
| =org-tempo= | @todo                                |

Set up =org='s basic configuration, then expand on it in other sections.

#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :bind
  (:map org-mode-map
        ("<C-return>" . nil))
  :custom
  (org-indent-mode)
  (org-adapt-indentation nil)
  (org-confirm-babel-evaluate nil)
  (org-cycle-separator-lines 0)
  (org-descriptive-links t)
  (org-edit-src-content-indentation 0)
  (org-edit-src-persistent-message nil)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t) ;; Relates to Tab in source block edit mode(s).
  (org-image-actual-width nil) ;; Useful for inline images that are huge.
  (org-return-follows-link t) ;; @todo - this only sort of works with evil, and only in Evil's insert mode.
  (org-src-tab-acts-natively t)
  (org-src-window-setup 'current-window)
  (org-startup-folded 'content)
  (org-startup-truncated nil)
  (org-support-shift-select 'always)
  :custom-face
  (org-ellipsis ((t (:foreground "#5396f8" :underline nil))))
  :config
  (setq org-hide-leading-stars nil)
  (setq org-ellipsis " ▾"
        org-blank-before-new-entry '((heading . t) (plain-list-item . nil))
        org-hide-block-startup nil
        org-hide-emphasis-markers t)
  (setq org-modules
        '(org-habit
          ol-bookmark
          ol-bibtex
          org-refile))
  (setq org-refile-targets '((nil :maxlevel . 1)
                            (org-agenda-files :maxlevel . 1)))
  (require 'ob-shell)
  (add-to-list 'org-babel-load-languages '((shell . t)
                                          (emacs-lisp . t)
                                          (php . t)
                                          (css . t)
                                          (sass . t)
                                          (js . t)
                                          (makefile . t)
                                          (python . t)))
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  (modify-syntax-entry ?' "'" org-mode-syntax-table))
#+end_src

Display inline images in =Org= files by default.

#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
(add-hook
  'org-babel-after-execute-hook
  (lambda ()
    (when org-inline-image-overlays
      (org-redisplay-inline-images))))
#+end_src

Rebind =S-<return>= to make it easier to continue lists or headings while in =evil='s insert mode because forwarded X sessions of Emacs can't always capture the =M-= key bindings properly in all cases.

#+begin_src emacs-lisp
(define-key org-mode-map (kbd "S-<return>") nil)
(define-key org-mode-map (kbd "S-<return>") 'org-meta-return)
#+end_src

Add =<leader>=-based keybindings for =org= documents.

#+begin_src emacs-lisp
(cy/leader-key-def
  "o"    '(:ignore t :which-key "org-mode")
  "oi"   '(:ignore t :which-key "insert")
  "oil"  '(org-insert-link :which-key "insert link")
  "oo"   '(org-open-at-point :which-key "open")
  "on"   '(org-toggle-narrow-to-subtree :which-key "narrow to subtree")
  "oa"   '(org-agenda :which-key "agenda")
  "ot"   '(org-todo-list :which-key "todos")
  "a"    '(org-archive-subtree :which-key "archive"))
#+end_src

#+begin_src emacs-lisp
(defun cy/capture-roam (choice)
  "Capture template shortcuts from org-roam-capture"
  (lexical-let ((key choice))
    (lambda ()
      (interactive)
      (message "chose: %s" key)
      (let ((org-roam-directory (expand-file-name org-roam-dailies-directory org-roam-directory)))
	(org-roam-capture-
	 :templates org-roam-dailies-capture-templates
	 :keys key
	 :node (org-roam-node-create))))))

(defun cy/capture-org (choice)
  "Capture template shortcuts from org-capture"
  (lexical-let ((key choice))
    (lambda () (interactive)(org-capture nil key))))
#+end_src

#+begin_src emacs-lisp
(cy/leader-key-def
  "c"   '(:ignore t :which-key "capture")
  "ct"  `(,(cy/capture-org "t") :which-key "task")
  "cM"  `(,(cy/capture-org "m") :which-key "mail")
  "cc"  `(,(cy/capture-org "c") :which-key "contact")
  "cp"  `(,(cy/capture-org "T") :which-key "people")
  "ci"  `(,(cy/capture-roam "i") :which-key "idea")
  "cm"  `(,(cy/capture-roam "m") :which-key "meeting")
  "cj"  `(,(cy/capture-roam "j") :which-key "journal"))
#+end_src

#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :hook (org-mode . (lambda () (org-superstar-mode 1)))
  :config
  ;; (setq org-superstart-leading-bullet "​")
  (setq org-superstar-remove-leading-stars t))
  ;; (setq org-superstart-leading-bullet ?\s)
;; )
#+end_src

Automatically show/hide markup symbols.

Now characters won't disappear for stuff like === and =*= text.

#+begin_src emacs-lisp
(use-package org-appear
  :hook (org-mode . org-appear-mode))
#+end_src

*** Structure Templates

Org Mode's structure templates feature enables you to quickly insert code blocks
into your org files in combination with =org-tempo= by typing a ~<~ followed by
the template name (e.g.: ~el~, ~py~) and pressing ~TAB~.

#+begin_src emacs-lisp
;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("js" . "src javascript"))
(add-to-list 'org-structure-template-alist '("jsn" . "src json"))
(add-to-list 'org-structure-template-alist '("php" . "src php"))
#+end_src

Update any Table of Content drawers on buffer save.

It's nice to have a table of contents section for long literate config files (like this one) and for really long documents and long-running notes about various topics that only continue to grow. =org-make-toc= can do this.

#+begin_src emacs-lisp
(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))
#+end_src

*** org-roam

This is the interface I use primarily for notes in a Zettelkasten style. I found
this before I even understood what Org mode was, it's my origin story.


  ;; (set-face-attribute 'org-roam-link nil :foreground "#ee9419")
  ;; (set-face-attribute 'org-roam-link-invalid nil :foreground "#fe4000")

#+begin_src emacs-lisp
(setq org-roam-v2-ack t) ;; Tell org-roam I know what I'm doing.
(use-package org-roam
  :ensure t
  ;; :load-path "~/Projects/home/org-roam"  ;; For testing the latest changes.
  :after org
  :init
  (setq org-roam-directory (file-truename "~/Notes/Roam-v2")
        org-roam-db-gc-threshold most-positive-fixnum
        org-id-link-to-org-use-id 'create-if-interactive)
  ;; (add-to-list 'display-buffer-alist
  ;;              '("\\*org-roam\\*"
  ;;                (display-buffer-in-direction)
  ;;                (direction . right)
  ;;                (window-width . 0.33)
  ;;                (window-height . fit-window-to-buffer)))
  :config
  (org-roam-setup)
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 0)
                 (window-width . 0.20)
                 (preserve-size . (t . nil))
                 (window-parameters . ((other-window . t)
                                       (no-delete-other-windows . t)))))
  (setq org-roam-completion-anywhere t)
  (setq org-roam-completion-system 'corfu)
  (setq org-roam-mode-section-functions
	(list #'org-roam-backlinks-section
              #'org-roam-unlinked-references-section
	      #'org-roam-reflinks-section))
  (setq cy/type-categories
      '("info" "concept" "project" "quote" "person" "character" "writing" "event" "place" "stub"))
  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    "Return the node's TITLE, as well as it's HIERACHY."
    (let* ((title (org-roam-node-title node))
          (olp (mapcar (lambda (s) (if (> (length s) 10) (concat (substring s 0 10)  "...") s)) (org-roam-node-olp node)))
          (level (org-roam-node-level node))
          (filetitle (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
          (shortentitle (if (> (length filetitle) 10) (concat (substring filetitle 0 10)  "...") filetitle))
          (separator (concat " " (all-the-icons-material "chevron_right") " ")))
      (cond
       ((= level 1) (concat (propertize (format "=level:%d=" level) 'display (all-the-icons-material "list" :face 'all-the-icons-green)) " "
                            (propertize shortentitle 'face 'org-roam-dim) separator title))
       ((= level 2) (concat (propertize (format "=level:%d=" level) 'display (all-the-icons-material "list" :face 'all-the-icons-dpurple)) " "
                             (propertize (concat shortentitle separator (string-join olp separator)) 'face 'org-roam-dim) separator title))
       ((> level 2) (concat (propertize (format "=level:%d=" level) 'display (all-the-icons-material "list" :face 'all-the-icons-dsilver)) " "
                             (propertize (concat shortentitle separator (string-join olp separator)) 'face 'org-roam-dim) separator title))
       (t (concat (propertize (format "=level:%d=" level) 'display (all-the-icons-material "insert_drive_file" :face 'all-the-icons-yellow)) " " title)))))

  (cl-defmethod org-roam-node-functiontag ((node org-roam-node))
    "Return the FUNCTION TAG for each node. These tags are intended to be unique to each file, and represent the note's function."
    (let* ((specialtags cy/type-categories)
           (tags (seq-filter (lambda (tag) (not (string= tag "ATTACH"))) (org-roam-node-tags node)))
           (functiontag (seq-intersection specialtags tags 'string=)))
      (concat
       (if functiontag
           (propertize "=has:functions=" 'display (all-the-icons-octicon "gear" :face 'all-the-icons-silver :v-adjust 0.02))
         (propertize "=not-functions=" 'display (all-the-icons-octicon "gear" :face 'org-roam-dim :v-adjust 0.02)))
       " " (string-join functiontag ", "))))

  (cl-defmethod org-roam-node-othertags ((node org-roam-node))
    "Return the OTHER TAGS of each notes."
    (let* ((tags (seq-filter (lambda (tag) (not (string= tag "ATTACH"))) (org-roam-node-tags node)))
           (specialtags cy/type-categories)
           (othertags (seq-difference tags specialtags 'string=)))
      (concat
       (if othertags
           (propertize "=has:tags=" 'display (all-the-icons-faicon "tags" :face 'all-the-icons-dgreen :v-adjust 0.02))) " "
                   (propertize (string-join othertags ", ") 'face 'all-the-icons-dgreen))))

  (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
    (let* ((count (caar (org-roam-db-query
                         [:select (funcall count source)
                          :from links
                          :where (= dest $s1)
                          :and (= type "id")]
                         (org-roam-node-id node)))))
      (if (> count 0)
        (concat (propertize "=has:backlinks=" 'display (all-the-icons-material "link" :face 'all-the-icons-dblue)) (format "%d" count))
        (concat (propertize "=not-backlinks=" 'display (all-the-icons-material "link" :face 'org-roam-dim))  " "))))

  (setq org-roam-node-display-template
        (concat  "${backlinkscount:16} ${functiontag:27} ${hierarchy} ${othertags}"))

  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "${slug}-%<%Y%m%d%H%M%S>.org"
                              "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)))
  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain
           "%?"
           :if-new (file+head "${slug}-%<%Y%m%d%H%M%S>.org"
                              "#+title: ${title}\n")
           :unnarrowed t)))
  (setq org-roam-dailies-directory "Journal/")
  (setq org-roam-dailies-capture-templates
        '(("j" "journal" entry
  	  "\n** Journal Entry - %<%I:%M %p> :journal:\n\n%?\n\n"
  	  :if-new (file+head+olp "%<%Y-%m-%d>.org"
  				 "#+title: %<%Y-%m-%d %a>\n#+filetags: dailies\n\n- parent :: [[roam:%<%Y-%B>]]\n\n"
  	                         ("Journal"))
           :empty-lines 1)
  	 ("t" "task" entry
  		"\n** TODO %?\n %U\n %a\n %i"
  	  :if-new (file+head+olp "%<%Y-%m-%d>.org"
  				 "#+title: %<%Y-%m-%d %a>\n#+filetags: dailies\n\n- parent :: [[roam:%<%Y-%B>]]\n\n"
  				 ( "Tasks" ))
           :empty-lines-before 0
           :empty-lines-after 0)
  	 ("m" "meeting" entry
  	  "\n** %<%I:%M %p> - %^{Meeting Title} :meetings:\n\n%?\n\n"
  	  :if-new (file+head+olp "%<%Y-%m-%d>.org"
  				 "#+title: %<%Y-%m-%d %a>\n#+filetags: dailies\n\n- parent :: [[roam:%<%Y-%B>]]\n\n"
  				 ("Meeting Notes"))
  	  :empty-lines 1
           :prepend t)
  	 ("i" "idea" item
  	  "- %?"
  	  :if-new (file+head+olp "%<%Y-%m-%d>.org"
  				 "#+title: %<%Y-%m-%d %a>\n#+filetags: dailies\n\n- parent :: [[roam:%<%Y-%B>]]\n\n"
  				 ("Ideas"))
  	  :empty-lines 0
           :prepend t)))
  :bind
  (:map org-roam-mode-map
        (("C-c r l" . org-roam-buffer-toggle)
         ("C-c r f" . org-roam-node-find)
         ("C-c r g" . org-roam-graph)))
  (:map org-mode-map
              (("C-c n i" . org-roam-node-insert)
               ("C-c n I" . org-roam-node-insert-immediate))))
#+end_src

~("C-<return>" . (lambda () (interactive) '(org-roam-node-visit t)))~

Configure leader key bindings for =org-roam=:

#+begin_src emacs-lisp
(cy/leader-key-def
  "or"      '(:ignore t :which-key "roam")
  "orc"     '(org-roam-dailies-capture-today :which-key "capture")
  "ori"     '(org-roam-node-insert :which-key "insert")
  "orf"     '(org-roam-node-find :which-key "find")
  "orb"     '(org-roam-buffer-toggle :which-key "backlinks window")
  "ort"     '(org-roam-tag-add :which-key "add tag")
  "ora"     '(org-roam-alias-add :which-key "add alias")
  "orr"     '(org-roam-ref-add :which-key "add reference")
  "ord"     '(:ignore t :which-key "dailies")
  "ordy"    '(org-roam-dailies-find-yesterday :which-key "yesterday")
  "ordt"    '(org-roam-dailies-goto-today :which-key "today")
  "ordT"    '(org-roam-dailies-find-tomorrow :which-key "tomorrow")
  "ordc"    '(:ignore t :which-key "capture")
  "ordct"   '(org-roam-dailies-capture-today :which-key "today")
  "ordcT"   '(org-roam-dailies-capture-tomorrow :which-key "tomorrow")
  "org"     '(org-roam-graph :which-key "show graph"))
#+end_src

*** Org Roam Protocol

Allows opening notes from external applications in Emacs.

#+begin_src emacs-lisp
(require 'org-protocol)
#+end_src

*** Org Roam UI

Configure a replacemnt for the old =org-roam-server= that was used with roam v1.

#+begin_src emacs-lisp
(use-package websocket
  :after org-roam)

(use-package org-roam-ui
  :after org-roam
  :load-path "~/Projects/pkgs/org-roam-ui/"
  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

** Tools

** LaTeX / PDFs

Force a page break after table of contents

#+begin_src emacs-lisp
(setq org-latex-toc-command "\\tableofcontents \\clearpage")
#+end_src

* Applications

** Terminal

| =vterm= | https://github.com/akermu/emacs-libvterm |

#+begin_src emacs-lisp
(use-package vterm
  :ensure t)
#+end_src

** Calendar

=calfw= is a calendar UI that is able to show all my scheduled Org Agenda items.

#+begin_src emacs-lisp
(use-package calfw
  :commands cfw:open-org-calendar
  :config
  (setq cfw:fchar-junction ?╋
        cfw:fchar-vertical-line ?┃
        cfw:fchar-horizontal-line ?━
        cfw:fchar-left-junction ?┣
        cfw:fchar-right-junction ?┫
        cfw:fchar-top-junction ?┯
        cfw:fchar-top-left-corner ?┏
        cfw:fchar-top-right-corner ?┓)

  (use-package calfw-org
    :config
    (setq cfw:org-agenda-schedule-args '(:timestamp))))

(cy/leader-key-def
  "Cv"  '(cfw:open-org-calendar :which-key "view"))
#+end_src

* Desktop Setup

| =pinentry= | https://elpa.gnu.org/packages/pinentry.html |

Start pinentry in order for Emacs to be able to prompt for passphrases when necessary.

I'm not sure which of the two following blocks is the one that actually ended up working for =mu4e= and =magit= but it needs to be sorted out.

#+begin_src emacs-lisp
(use-package pinentry
  :hook
  (after-init . pinentry-start))
#+end_src

#+begin_src emacs-lisp
(use-package pinentry
    :config
    (pinentry-start))
(setq epa-pinentry-mode 'loopback)
#+end_src

In the case of GPG-signed commits use the below configuration files.

E.g: In =~./profile=:

#+begin_src shell
export GPG_TTY=$TTY
#+end_src

In =~/.gnupg/gpg-agent.conf=

#+begin_src conf
allow-emacs-pinentry
allow-loopback-pinentry
pinentry-program /usr/local/bin/pinentry
#+end_src

In =~/path/to/my/project/.git/config=

#+begin_src conf
[user]
    signingkey = 1234567890ABCDEF
[commit]
    gpgsign = true
#+end_src

* Auto-tangling and running shell scripts.

@todo: Deprecated.

Some test paths for regex:
=/home/narwic/Projects/home/dotfiles/tangled/application-post-tangle.sh=
=/home/narwic/Projects/home/dotfiles/tangled/environment-post-tangle.sh=
=/home/narwic/Projects/home/dotfiles/tangled/systemd-post-tangle.sh=

Only auto-tangle on =guts=, =punchy=, or =buster=. Windows machines are too difficult to deal with.

#+begin_src emacs-lisp
(defun cy/run-tangles ()
  (when (string-match "\\(dotfiles/\\)$" (file-name-directory buffer-file-name))
    (shell-command-to-string (concat (file-name-directory buffer-file-name) "tangled/*.sh"))))

(if
  (or (equal system-name "guts")
      (equal system-name "punchy")
      (equal system-name "buster"))
    (add-hook 'after-save-hook 'cy/run-tangles))
#+end_src


* Font Size Check

|abcdef ghijkl|
|ABCDEF GHIJKL|
|'";:-+ =/\~`?|
|∞≤≥∏∑∫ ×±⊆⊇|
|αβγδεζ ηθικλμ|
|ΑΒΓΔΕΖ ΗΘΙΚΛΜ|
|日本語 の美観|
|あいう えおか|
|アイウ エオカ|
|ｱｲｳｴｵｶ ｷｸｹｺｻｼ|

| hoge                 | hogeghoe | age               |
|----------------------+----------+-------------------|
| 今日もいい天気ですね | お、     | 等幅になった 👍 |
