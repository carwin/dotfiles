#+TITLE:   Carwin's Emacs settings file
#+AUTHOR:  Carwin Young
#+EMAIL:   carwinyoung@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

This is Carwin's Emacs configuration. The goal is that it's portable enough to be moved around between machines.


#+begin_src emacs-lisp
(load-file "~/.emacs.d/per-system-settings.el")
#+end_src

#+begin_src emacs-lisp
;; (setq debug-on-error t)
  (defvar cy/frame-transparency '(90 . 90))
  (setq evil-want-keybinding nil)
#+end_src

* Package Management

#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ;;("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package for non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Configure Emacs paths

** Ensure Emacs' PATH is the same as my shell's

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :init
  (when (daemonp)
    (exec-path-from-shell-initialize)))
#+end_src

* Start the server on launch

@TODO: I don't think this is really necessary anymore now that I'm using the systemd setup and attaching through a client but I'm not sure.

#+begin_src emacs-lisp
#+end_src

* Keep .emacs.d Clean

#+begin_src emacs-lisp
(setq custom-file
  (if (boundp 'server-socket-dir)
      (expand-file-name "custom.el" server-socket-dir)
      (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src

* Emacs Backend

** Start the Emacs server on first launch

@todo: This seems like a duplicate entry, above I do the same thing but with use-package.

#+begin_src emacs-lisp
;; (require 'server)
;; (unless (server-running-p)
;;   (server-start))
;; (setq org-image-actual-width nil)
#+end_src


#+begin_src emacs-lisp

#+end_src

** Auto-update packages
#+begin_src emacs-lisp
(use-package auto-package-update
   :ensure t
   :config
   (setq auto-package-update-delete-old-versions t
         auto-package-update-interval 4)
   (auto-package-update-maybe))
#+end_src

** Extend use-package

#+begin_src emacs-lisp
(use-package use-package-ensure-system-package
  :ensure t)
#+end_src

* Keyboard Bindings

** ESC Cancels Everything

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboad-escape-quit)
#+end_src

** Rebind C-u

Since I prefer the =vim= binding of <C-u>, the original binding for `universal-agreement` needs to be rebound to something.

#+begin_src emacs-lisp
(global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

** Configure `,` as a leader key

I've been using the comma (,) key as my leader key for almost a decade in vim. This sets it up as a definer function using [[https://github.com/noctuid/general.el][general.el]] that I can use throughout the document to create new bindings off of it.

#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer cy/leader-key-def
    :keymaps `(normal insert visual emacs org-roam org-agenda)
    :prefix ","
    :global-prefix "C-,"))
#+end_src

** Turn on Evil mode

Evil mode is essentially vim keybindings for Emacs. Emacs is essentially unusable for me without this.

=evil-collection= essentially just adds supports for more modes to make sure we keep those vim bindings wherever we are and whatever we're doing in Emacs.

I don't remember what org-evil does, but I've had it in my config since I started using Org. Probably pretty important.

#+begin_src emacs-lisp
;; Tell me when I do a bad thing.
(defun cy/dont-arrow-me-bro ()
  (interactive)
  (message "Arrow keys are bad, m'kay?"))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-C-u-scroll t)
  ;(setq evil-want-C-i-jump t)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  ;; Disable arrow keys in normal and visual modes.
  (define-key evil-normal-state-map (kbd "<left>") 'cy/dont-arrow-me-bro)
  (define-key evil-normal-state-map (kbd "<down>") 'cy/dont-arrow-me-bro)
  (define-key evil-normal-state-map (kbd "<up>") 'cy/dont-arrow-me-bro)
  (define-key evil-normal-state-map (kbd "<right>") 'cy/dont-arrow-me-bro)
  (evil-global-set-key 'motion (kbd "<left>") 'cy/dont-arrow-me-bro)
  (evil-global-set-key 'motion (kbd "<down>") 'cy/dont-arrow-me-bro)
  (evil-global-set-key 'motion (kbd "<up>") 'cy/dont-arrow-me-bro)
  (evil-global-set-key 'motion (kbd "<right>") 'cy/dont-arrow-me-bro)
  ;; Make sure we're in normal mode, not insert mode when we are in these Emacs modes.
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))


(use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init 'dashboard)) ;;Make sure Evil bindings work on the Dashboard.

#+end_src

** Rebind Evil's q

By default, the normal =:q= and =:wq= expressions actually quit Emacs entirely. This binding change ensures it only quits the current buffer.

I keep =:quit= acting as it normally does in case I really want to quit.

#+begin_src emacs-lisp
(defun cy/ex-kill-buffer-and-close ()
  (interactive)
  (unless (char-equal (elt (buffer-name) 0) ?*)
    (kill-this-buffer)))

(defun cy/ex-save-kill-buffer-and-close ()
  (interactive)
  (save-buffer)
  (kill-this-buffer))

(evil-ex-define-cmd "q" 'cy/ex-kill-buffer-and-close)
(evil-ex-define-cmd "wq" 'cy/ex-save-kill-buffer-and-close)
(evil-ex-define-cmd "quit" 'evil-quit)
#+end_src

** Which Key

Displays a small buffer to show the list of features you can do next after starting a command.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish (which-key-mode)
  :config
  (setq which-key-separator " "
        which-key-prefix-prefix "+"
        which-key-idle-delay 0.2))
#+end_src

* General Configuration
** User Interface

Get rid of all the chrome. I don't want to remember I'm in a GUI.

#+begin_src emacs-lisp
;; No startup message.
(setq inhibit-startup-message t)

(scroll-bar-mode -1)      ; Disable scroll bar.
(tool-bar-mode -1)        ; Disable the toolbar.
(tooltip-mode -1)         ; Disable tooltips.
(menu-bar-mode -1)        ; Disable the menu bar.
(set-fringe-mode 0)       ; Define the width of the fringe. Useful for breakpoints, but not much else.
#+end_src

Set frame transparency and maximize windows by default.

#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha cy/frame-transparency)
(add-to-list 'default-frame-alist `(alpha . ,cy/frame-transparency))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Define a toggle function that can be called to turn transparency on and off.

#+begin_src emacs-lisp
(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(90 . 90) '(100 . 100)))))
(global-set-key (kbd "C-c t") 'toggle-transparency)
#+end_src

Configure line numbers. Some modes don't need them.

,#+begin_src emacs-lisp
;; Turn on column number mode and display line numbers for everything by default.
(column-number-mode)

;; Enable line numbers for certain modes.
(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

;; Disable line numbers for certain modes that are sub-modes of the above.
(dolist (mode '(org-mode-hook
                term-mode-hook
                treemacs-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Don't warn for large files

#+begin_src emacs-lisp
(setq large-file-warning-threshold nil)
#+end_src

Don't warn for following symlinks

#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

Don't warn when advice is added for functions. This can get annoying.

#+begin_src emacs-lisp
(setq ad-redefinition-action 'accept)
#+end_src

** Theme

Configure a personal custom themes directory using a directory within the dotfiles repository.

@TODO: I would like to have a handy way to figure out the dotfiles directory's path. Possibly set some kind of global variable that can be referenced in all the places I need to use it.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path
  (concat
    "~/Projects/Home/dotfiles/" "emacs-themes"))
#+end_src

Use the =doom-themes= package to get some very nice themes. Some of these themes need explicit bold / italic display support turned on as part of the package's configuration.

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
             doom-themes-enable-italic t)
  (doom-themes-org-config))
#+end_src

Enable one of the themes, either from the custom theme directory or from the themes provided by =doom-themes=.
#+begin_src emacs-lisp
(load-theme 'doom-laserwave t)
#+end_src

** Font
*** Set the font

Dank Mono is really interesting, but I've been mostly using the really excellent [[https://mplus-fonts.osdn.jp/about-en.html][M+]] font set as it has full support for Latin and Japanese glyphs with half-width, full-width, and proportional options.

#+begin_src emacs-lisp

;; (set-face-attribute 'default nil
;;                     :font "Dank Mono"
;;                     :height (cy/system-settings-get 'emacs/default-face-size))
;; (set-face-attribute 'fixed-pitch nil
;;                     :font "Dank Mono"
;;                     :height (cy/system-settings-get 'emacs/fixed-face-size))
;; (set-face-attribute 'variable-pitch nil
;;                     :font "M+ 1c"
;;                     :height (cy/system-settings-get 'emacs/variable-face-size)
;;                     :weight 'normal)

(defun cy/init-faces (&optional frame)
  (unless frame
    (setq frame (selected-frame)))
  (when frame
    (with-selected-frame frame
      (set-face-attribute 'default (selected-frame)
                          :font "Dank Mono"
                          :height (cy/system-settings-get 'emacs/default-face-size))
      (set-face-attribute 'fixed-pitch (selected-frame)
                          :font "Dank Mono"
                          :height (cy/system-settings-get 'emacs/fixed-face-size))
      (set-face-attribute 'variable-pitch (selected-frame)
                          :font "M+ 1c"
                          :height (cy/system-settings-get 'emacs/variable-face-size)
                          :weight 'normal))))

(add-hook 'after-make-frame-functions #'cy/init-faces t)
#+end_src

*** Use UTF-8 for everything

We should always use UTF-8.

@TODO: I need to figure out what to do here in regards to Windows. I keep running into issues with windows-2512 encoding and I'm not really sure what it's all about.

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
#+end_src

*** Enable proper Unicode glyph support

#+begin_src emacs-lisp
(use-package unicode-fonts
  :ensure t
  :custom
  (unicode-fonts-skip-font-groups '(low-quality-glyphs))
  (unicode-fonts-setup))
#+end_src

** Mode Line

*** Basic Customization

#+begin_src emacs-lisp
(setq display-time-format "%l:%M %p %b %y"
      display-time-default-load-average nil)
#+end_src

*** Enable Diminishing

The diminish package hides stuff in the modelines. I think use-package can do this out of the box, but for some things, we need to use a separate package.

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

*** Doom Modeline

Comparing this with Smart Mode Line

#+begin_src emacs-lisp
;; Run (all-the-icons-install-fonts) after this.

(use-package minions
  :diminish
  :hook (doom-modeline-mode . minions-mode)
  :custom
  (minions-mode-line-lighter ""))

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom-face
  (mode-line ((t (:height 0.85))))
  (mode-line-inactive ((t (:height 0.85))))
  :custom
  (doom-modeline-height 15)
  (doom-modeline-bar-width 6)
  (doom-modeline-lsp t)
  (doom-modeline-github nil)
  (doom-modeline-mu4e t)
  (doom-modeline-irc nil)
  (doom-modeline-minor-modes t)
  (doom-modeline-persp-name nil)
  (doom-modeline-buffer-file-name-style 'truncate-except-project)
  (doom-modeline-major-mode-icon nil))
#+end_src

** Auto-Save Changed Files

Here automatic saving of buffers is enabled. The exclusion list excludes the entire dotfiles directory, since auto-save in these files may be quite cumbersome due to the large amount of tangling and script running that happens throughout.

#+begin_src emacs-lisp
(defun cy/auto-save-exclude-dir-list ()
  (directory-files "~/Projects/Home/dotfiles" t "\\.org$"))
#+end_src

#+begin_src emacs-lisp
(use-package super-save
  :ensure t
  :defer 1
  :diminish super-saver-mode
  :config
  (super-save-mode +1)
  ;; (setq super-save-exclude (concat (file-name-directory buffer-file-name) "*.org"))
  (setq super-save-exclude (cy/auto-save-exclude-dir-list))
  (setq super-save-auto-save-when-idle t))
#+end_src

** Auto-Revert Changed Files

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
;; This can support messages if they get annoying
;; (setq auto-revert-verbose nil)
#+end_src

** UI Toggles

Assign some shortcuts using the leader key defined earlier.
Requires the use-package-chords package setup in the Keybindings section.

#+begin_src emacs-lisp
;(cy/leader-key-def
;  "e" 'find-file)
#+end_src

#+begin_src emacs-lisp
(cy/leader-key-def
  "t"  '(:ignore t :which-key "toggle")
  "tt" '(treemacs :which-key "treemacs")
  "tw" 'whitespace-mode
  "tc" '(counsel-load-theme :which-key "choose theme"))
#+end_src

** Highlight Matching Braces
#+begin_src emacs-lisp
(use-package paren
  :config
  (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
  (show-paren-mode 1))
#+end_src

** Pinentry

Emacs can be prompted for the PIN of a GPG private key, we just need to set epa-pinentry-mode.

@todo: I don't have this working currently. I think the pinentry package needs to be installed, and I need to add "allow-emacs-pinentry" to "~/.gnupg/gpg-agent.conf" and then reload the configuration with "gpgconf --reload gpg-agent."

#+begin_src emacs-lisp
;(setq epa-pinentry-mode 'loopback)
;(pinentry start)
#+end_src

* Editing Configuration

** Tab widths

Tabs should default to a width of 2 spaces. I don't know why everyone loves 4 so much.

#+begin_src emacs-lisp
(setq custom-tab-width 2)
(setq-default evil-shift-width tab-width)
#+end_src

** Spaces instead of tabs

Obviously.

I hope I never have to write any python or this might end up being a problem.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

** Commenting with a shortcut

Binds <C-/> to comment lines in a much better way than Emacs' default comment-dwim (bound to M-;).

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("C-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Automatically clean whitespace

Keep it clean, automatically remove excess whitespace.

#+begin_src emacs-lisp
(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
  (prog-mode . ws-butler-mode)))
#+end_src

** Require files to end with a newline

This is important for projects tracked with Git.

#+begin_src emacs-lisp
(setq require-final-newline t)
#+end_src

* Configuration Files

** Helper Functions

#+begin_src emacs-lisp
(defun cy/org-file-jump-to-heading (org-file heading-title)
  (interactive)
  (find-file (expand-file-name org-file))
  (goto-char (point-min))
  (search-forward (concat "* " heading-title))
  (org-overview)
  (org-reveal)
  (org-show-subtree)
  (forward-line))

(defun cy/org-file-show-headings (org-file)
  (interactive)
  (find-file (expand-file-name org-file))
  (counsel-org-goto)
  (org-overview)
  (org-reveal)
  (org-show-subtree)
  (forward-line))
#+end_src

** Bindings for Configuration Files

This is where I define keybindings to quickly jump to settings files.

#+begin_src emacs-lisp
  (cy/leader-key-def
    "fd" '(:ignore t :which-key "dotfiles")
    "fde" '((lambda () (interactive) (find-file (expand-file-name "~/Projects/Home/dotfiles/Emacs.org"))) :which-key "edit config")
    "fdE" '((lambda () (interactive) (cy/org-file-show-headings "~/Projects/Home/dotfiles/Emacs.org")) :which-key "edit config")
    "fdW" '((lambda () (interactive) (find-file (expand-file-name "~/Projects/Home/dotfiles/Workflow.org"))) :which-key "workflow"))
#+end_src

* Stateful Keymaps with Hydra

#+begin_src emacs-lisp
(use-package hydra
  :defer 1)
#+end_src

** Text Scaling

@todo - dig into what this does exactly, it's pretty cool but I don't super understand Hydra.

#+begin_src emacs-lisp
(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))
#+end_src

* Ivy and Counsel

Ivy is a completion framework for emacs, much like Helm. I keep switching between the two.

Ivy provides a more minimal (but still powerful) selection menu that appears when you open files, switch buffers, etc... Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc... which provides useful commands for each of the default completion commands.

ivy-rich adds extra columns to some Counsel commands to provide more information.

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)  ; Maybe remove this, I think I use C-l for something else.
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :init
  (ivy-mode 1)
  :config
  (setq ivy-user-virtual-buffers t)
  (setq ivy-wrap t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  ;; Use different regex strategies per completion command.
  (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist) ;; this doesn't seem to work.
  (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
  (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)
  ;; Set minibuffer height for different commands.
  (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
  (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
  (setf (alist-get 'swiper ivy-height-alist) 15)
  (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

(use-package ivy-hydra
  :defer t
  :after hydra)

(use-package ivy-rich
  :init
  (ivy-rich-mode 1)
  :config
  (setq ivy-format-function #'ivy-format-function-line)
  (setq ivy-rich-display-transformers-list
      (plist-put ivy-rich-display-transformers-list
                 'ivy-switch-buffer
                 '(:columns
                   ((ivy-rich-candidate (:width 40))
                    (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
                    (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
                    (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
                    (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
                   :predicate
                   (lambda (cand)
                     (if-let ((buffer (get-buffer cand)))
                         ;; Don't mess with EXWM buffers if there are any.
                         (with-current-buffer buffer
                           (not (derived-mode-p 'exwm-mode)))))))))




(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
  (counsel-mode 1))

(use-package flx ;; Improves sorting for fuzzy-matched results.
  :defer t
  :init
  (setq ivy-flx-limit 10000))

(use-package smex ;; Adds M-x recent command sorting for counsel-M-x
  :defer 1
  :after counsel)

(use-package wgrep)

;(use-package ivy-posframe
;  :custom
;  (ivy-posframe-width       115)
;  (ivy-posframe-min-width   115)
;  (ivy-posframe-height      10)
;  (ivy-posframe-min-height  10)
;  :config
;  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
;  (setq ivy-posframe-parameters '((parent-frame . nil)
;                                   (left-fringe . 8)
;                                   (right-fringe . 8)))
;
;
;
;;;(defun wrappee (num str)
;;;  "Nontrivial wrappee."
;;;  ;; (interactive "nNumber:\nsString:")
;;;  (message "The number is %d.\nThe string is \"%s\"." num str))
;
;(fset 'cy/fix-ivy-posframe-mode-i3 (list 'lambda
;                               '(&rest args)
;                               (concat (documentation 'ivy-posframe-mode t) "\n WEEE.")
;                               (interactive-form 'ivy-posframe-mode)
;                               '(prog1 (apply 'ivy-posframe-mode args)
;                               (message "The wrapper does more. \"%s\"." args)
;                               (x-change-window-property "WM_CLASS" "ZOWIE" (selected-frame) nil nil t))))
;
;
;(cy/fix-ivy-posframe-mode-i3))
  ;; (x-change-window-property "WM_CLASS" "ZOWIE" (selected-frame) nil nil t))

(cy/leader-key-def
  ;; "y"  #'(,(cy/fix-ivy-posframe-mode-i3) :which-key "WTF")
  "r"   '(ivy-resume :which-key "ivy resume")
  "f"   '(:ignore t :which-key "files")
  "ff"  '(counsel-find-file :which-key "open file")
  "C-f" 'counsel-find-file
  "fr"  '(counsel-recentf :which-key "recent files")
  "fR"  '(revert-buffer :which-key "revert file")
  "fj"  '(counsel-file-jump :which-key "jump to file"))

#+end_src

* Window Management

** Window Selection with ace-window

#+begin_src emacs-lisp
(use-package ace-window
  :bind (("M-o" . ace-window))
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

** Window History with winner-mode

#+begin_src emacs-lisp
(winner-mode)
(define-key evil-window-map "u" 'winner-undo)
;; (define-key evil-window-map "???" 'winner-redo)
#+end_src

** Set Margins for Modes

#+begin_src emacs-lisp
(defun cy/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :defer t
  :hook (org-mode . cy/org-mode-visual-fill))
#+end_src

* Expand Region

This is a really great selection tool. Basically it starts at the pointer then /expands/ to select the word, then the next boundary, then the next boundary, and so on.

#+begin_src emacs-lisp
(use-package expand-region
  :bind (("C-e" . er/expand-region)
         ("C-(" . er/mark-outside-pairs)))
#+end_src

* File Browsing

** Dired

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :defer 1
  :commands (dired dired-jump)
  :config
  (setq dired-listing-switches "-agho --group-directories-first"
        dired-omit-files "^\\.[^.].*"
        dired-omit-verbose nil)

  (autoload 'dired-omit-mode "dired-x")

  (add-hook 'dired-load-hook
    (lambda ()
     (interactive)
     (dired-collapse)))

  (add-hook 'dired-mode-hook
    (lambda ()
      (interactive)
       (dired-omit-mode 1)
       (expand-file-name default-directory)
       (all-the-icons-dired-mode 1)
       (hl-line-mode 1)))

 ;; @todo Had to run this once to get the icons.
 (use-package all-the-icons-dired
   :hook (dired-mode . all-the-icons-dired-mode))

 (add-hook 'dired-mode-hook
   (lambda ()
    (interactive)
    (dired-omit-mode 1)
    (unless
          (s-equals? "/gnu/store/" (expand-file-name default-directory))
          (all-the-icons-dired-mode 1))
    (hl-line-mode 1)))

  (use-package dired-rainbow
    :defer 2
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

  (use-package dired-single
    :ensure t
    :defer t)

  (use-package dired-ranger
    :defer t)

  (use-package dired-collapse
    :defer t)

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "H" 'dired-omit-mode
    "l" 'dired-single-buffer
    "y" 'dired-ranger-copy
    "X" 'dired-ranger-move
    "p" 'dired-ranger-paste)) ;; End of use-package dired

(defun cy/dired-link (path)
  (lexical-let ((target path))
    (lambda () (interactive) (message "Path: %s" target) (dired target))))

(cy/leader-key-def
  "d"   '(:ignore t :which-key "dired")
  "dd"  '(dired :which-key "Here")
  "dh"  `(,(cy/dired-link "~") :which-key "Home")
  "di"  `(,(cy/dired-link "~/OneDrive/Notes/Inbox.org") :which-key "Inbox")
  "dj"  `(,(cy/dired-link "~/OneDrive/Notes/Journal.org") :which-key "Journal")
  "dn"  `(,(cy/dired-link "~/OneDrive/Notes") :which-key "Notes")
  "do"  `(,(cy/dired-link "~/Downloads") :which-key "Downloads")
  "dp"  `(,(cy/dired-link "~/Pictures") :which-key "Pictures")
  "dv"  `(,(cy/dired-link "~/Videos") :which-key "Videos")
  "d."  `(,(cy/dired-link "~/Projects/Home/dotfiles") :which-key "dotfiles"))
#+end_src

** Opening Files Externally

@todo I need a way to make sure this only applies in certain modes. It causes the dashboard to crash when it boots up because there's a png logo.

#+begin_src emacs-lisp
;;(use-package openwith
;;  :config
;;  (setq openwith-associations
;;    (list
;;      (list (openwith-make-extension-regexp
;;             '("mpg" "mpeg" "mp3" "mp4"
;;               "avi" "wmv" "wav" "mov" "flv"
;;               "ogm" "ogg" "mkv"))
;;             "mpv"
;;             '(file))
;;      (list (openwith-make-extension-regexp
;;             '("xbm" "pbm" "pgm" "ppm" "pnm"
;;               "png" "gif" "bmp" "tif" "jpeg" "jpg"))
;;             "feh"
;;             '(file))
;;      (list (openwith-make-extension-regexp
;;             '("pdf"))
;;             "google-chrome-stable"
;;             '(file))))
;;  (openwith-mode 1))
#+end_src

** Deft

A nice way to browse files, specifically installed for org-roam. If this ever gets super slow, look into installing the Notdeft fork.

#+begin_src emacs-lisp
;;(use-package deft
;;  :after org
;;  :bind
;;  ("C-c n d" . deft)
;;  :custom
;;  (deft-recursive t)
;;  (deft-use-filter-string-for-filename t)
;;  (deft-default-extension "org")
;;  (deft-directory "~/OneDrive/Notes/"))
;;  (evil-leader/set-key
;;    "d" 'deft)
#+end_src

* Org Mode

Set up Org Mode's basic configuration, then expand on it in other sections.

#+begin_src emacs-lisp
;; @todo: Move this to another section.
(setq-default fill-column 800)

;; Turn on indentation and auto-fill mode for Org files.
(defun cy/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil)
  (diminish org-indent-mode))

(global-set-key (kbd "C-c q") 'auto-fill-mode)

(use-package org
  :defer t
  :hook (org-mode . cy/org-mode-setup)
  :config
  (setq org-ellipses " ▾"
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-src-tab-acts-natively t ;; Really? @todo
        org-edit-src-content-indentation 0
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-startup-folded 'content
        org-image-actual-width nil ;; Useful for inline org images that are huge.
        org-cycle-separator-lines 2)
  (setq org-modules
    '(org-habit))
  ;; @todo: Investigate this.
  (setq org-refile-targets '((nil :maxlevel . 3)
                            (org-agenda-files :maxlevel . 3)))
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t) ;; @todo: This seems dangerous.

  ;; A little evil tweaking.
  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "s-j") 'org-metadown)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "s-k") 'org-metaup)

  ;; @IMPORTANT: Subsequent sections are still part of this use-package block.
#+end_src

**  Configure Babel Languages

To execute or export code in org-mode code blocks, you'll need to set up org-babel-load-languages for each language you'd like to use. This [[https://orgmode.org/worg/org-contrib/babel/languages.html][page]] documents all of the languages you can use with org-babel.

#+begin_src emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (shell .t)
      (python .t)
      (ledger . t))) ; @todo: Ledger for accounting, forgot about that program.
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

** Workflow Configuration

I don't have a workflow configuration yet, but, if I did - I'd define it in a separate Workflow.org file like daviwil does.

#+begin_src emacs-lisp
  ;(require 'cy-org)
  (require 'cy-workflow "~/Projects/Home/dotfiles/.emacs.d/elisp/cy-workflow.el")
#+end_src

** Automatically "Tangle" on Save

#+begin_src emacs-lisp
  ;; Automatically tangle when saved without having to worry about org-confirm-babel-evaluate all.
  ;; Instead, do it around the after-save hook.
  (defun cy/org-babel-tangle-dont-ask ()
    ;; (when (string-equal (file-name-directory (buffer-file-name))
    ;;                     (expand-file-name user-emacs-directory))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'cy/org-babel-tangle-dont-ask
                                                'run-at-end 'only-in-org-mode)))
#+end_src

** Fonts and Bullets

Uses org-superstar. I switch between this and org-bullets mode. org-bullets sometimes gives me weird issues.

#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-remove-leading-stars t)
  (org-superstar-headline-bullets-list '("☰" "☷" "☵" "☲"  "☳" "☴"  "☶"  "☱")))

;; Turn the list hyphen into a dot.
(font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

;; Set faces for heading levels
(dolist (face '((org-level-1 . 1.35)
                (org-level-2 . 1.2)
                (org-level-3 . 1.15)
                (org-level-4 . 1.1)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.0)))
    (set-face-attribute (car face) nil :font "M+ 1p" :weight 'regular :height (cdr face)))

;; Make sure org-indent face is available.
(require 'org-indent)
;; '(org-indent ((t (:inherit (org-hide fixed-pitch)))))

;; Ensure that anything that should be fixed-pitch in Org files appears that way.
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :foreground nil :inherit '(shadow fixed-pitch))
;; (set-face-attribute 'org-table nil :foreground nil :inherit '(fixed-pitch))
(set-face-attribute 'org-table nil :inherit 'fixed-pitch :foreground "#83a598")
(set-face-attribute 'org-verbatim nil :foreground nil :inherit '(shadow-fixed-pitch))
(set-face-attribute 'org-special-keyword nil :foreground nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :foreground nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :foreground nil :inherit 'fixed-pitch)


;; Technically this belongs with the rest of the face attributes above. But
;; I actually sort of like having some more breating room in my text.
;; (set-face-attribute 'org-indent nil :foreground nil :inherit '(org-hide variable-pitch))

;; @todo: Others to consider
;; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
;; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
;; '(org-property-value ((t (:inherit fixed-pitch))) t)
;; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
;; (set-face-attribute '(org-table ((t (:inherit fixed-pitch :foreground "#83a598")))))
;; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
;; '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))


;; Using org-bullets
;; (use-package org-bullets
;;   :after org
;;   :hook (org-mode . org-bullets-mode)
;;   :custom
;;   (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Structure Templates
Org Mode’s structure templates feature enables you to quickly insert code blocks into your Org files in combination with org-tempo by typing "<" followed by the template name like el or py and then press TAB. For example, to insert an empty emacs-lisp block below, you can type "<" el and press TAB to expand into such a block.

You can add more src block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language as it is known by Org Babel.

#+begin_src emacs-lisp
;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("js" . "src javascript"))
(add-to-list 'org-structure-template-alist '("jsn" . "src json"))
(add-to-list 'org-structure-template-alist '("php" . "src php"))
#+end_src

** Pomodoro
:LOGBOOK:
CLOCK: [2020-12-06 Sun 16:46]--[2020-12-06 Sun 17:11] =>  0:25
:END:

I use a Pomodoro timer when working to chunk my work into manageable blocks of time. This is a lot better than having to use the various terrible options for i3 that I've found in the past.

#+begin_src emacs-lisp
(use-package org-pomodoro
  :after org
  :config
  (setq org-pomodoro-start-sound "~/.emacs.d/sounds/focus_bell.wav")
  (setq org-pomodoro-short-break-sound "~/.emacs.d/sounds/three_beeps.wav")
  (setq org-pomodoro-long-break-sound "~/.emacs.d/sounds/three_beeps.wav")
  (setq org-pomodoro-finished-sound "~/.emacs.d/sounds/meditation_bell.wav")

  (cy/leader-key-def
    "op" '(org-pomodoro :which-key "pomodoro")))
#+end_src

** Protocol

#+begin_src emacs-lisp
(require 'org-protocol)
#+end_src

** Searching

#+begin_src emacs-lisp
(defun cy/search-org-files ()
  (interactive)
  (counsel-rg "" "~/OneDrive/Notes" nil "Search Notes: "))
#+end_src

** Bindings

Originally when I started using Org and Evil, I was using a package called `org-evil` for some nice relevant bindings. That package doesn't interfere or make any assumptions about what your leader key is. It doesn't use it at all.

I'm trying out daviwil's bindings using evil-org.

#+begin_src emacs-lisp
(use-package evil-org
  :after org
  :hook ((org-mode . evil-org-mode)
         (org-agenda-mode . evil-org-mode)
         (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(cy/leader-key-def
  "o"   '(:ignore t :which-key "org-mode")
  "oi"  '(:ignore t :which-key "insert")
  "oil" '(:ignore t :which-key "insert link")
  "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")
  "os"  '(cy/counsel-rg-org-files :which-key "search notes")
  "oa"  '(org-agenda :which-key "status")
  "oc"  '(org-capture t :which-key "capture")
  "ox"  '(org-export-dispatch t :which-key "export"))

;(use-package org-evil
;  :after evil
;  :ensure t)
#+end_src

** End use-package org-mode

All the previous configuration, up to the parent header, has been inside one giant use-package block! Wild.

#+begin_src emacs-lisp
;; This ends the use-package org-mode block.
)
#+end_src

** Update Table of Contents on Save

It's nice to have a table of contents section for long literate config files (like this one) and for really long documents and long-running notes about various topics that only continue to grow. org-make-toc can do this.

#+begin_src emacs-lisp
(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))
#+end_src

** Avoid creating backup files

I really dislike the litter, and I haven't yet needed a backup file. Here's hoping I don't regret this.

#+begin_src emacs-lisp
;; Avoid #file.org#
(auto-save-visited-mode)
(setq create-lockfiles nil)
;; Avoid filename.ext~
(setq make-backup-files nil)
#+end_src

** Display Images

#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
(add-hook
  'org-babel-after-execute-hook
  (lambda ()
    (when org-inline-image-overlays
      (org-redisplay-inline-images))))
#+end_src

** Highlight and indent source code blocks
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src

** Roam

This is the interface I use primarily for notes in a Zettelkasten style.

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/OneDrive/Notes/org-roam")
  (org-roam-index "~/OneDrive/Notes/org-roam/Index.org")
  (org-roam-graph-executable "neato")
  (org-roam-buffer-window-parameters '((no-delete-other-windows . t)))
  (org-roam-dailies-directory "daily/")
  (org-roam-dailies-capture-templates
      '(("d" "default" entry
         #'org-roam-capture--get-point
         "* %?"
         :file-name "daily/%<%Y-%m-%d>"
         :head "#+title: %<%Y-%m-%d>\n"
         :olp ("%<%Y>"))
        ("j" "journal" entry
         #'org-roam-capture--get-point
         "* %?"
         :file-name "daily/%<%Y-%m-%d>"
         :head "#+title: %<%Y-%m-%d>\n"
         :olp ("Journal"))))

  (org-roam-graph-exclude-matcher '("dailies"))
  ; (org-roam-graph-viewer 'eww-open-file)
  :bind (:map org-roam-mode-map
      (("C-c n l" . org-roam)
       ("C-c n f" . org-roam-find-file)
       ("C-c n g" . org-roam-graph-show))
      :map org-mode-map
      (("C-c n i" . org-roam-insert))
      (("C-c n I" . org-roam-insert-immediate))))

  (cy/leader-key-def
    "or"    '(:ignore t :which-key "roam")
    "orl"   '(org-roam :which-key "backlinks window")
    "ord"   '(:ignore t :which-key "dailies")
    "ordt"  'org-roam-dailies-find-today
    "ordT"  'org-roam-dailies-find-tomorrow
    "ordy"  'org-roam-dailies-find-yesterday
    "ordc"  '(:ignore t :which-key "capture")
    "ordcT" 'org-roam-dailies-capture-tomorrow
    "ordct" 'org-roam-dailies-capture-today
    "orf"   'org-roam-find-file
    "org"   'org-roam-show-graph-show
    "ori"   'org-roam-insert
    "orf"   'org-roam-find-file)
#+end_src

*** Org Roam Server

@todo needs a description. Roam server lets me preview my files and see the big map of connected concepts in a browser.

#+begin_src emacs-lisp
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src

*** Org Roam Protocol

Allows opening notes from external applications in Emacs.

#+begin_src emacs-lisp
(require 'org-roam-protocol)
#+end_src

* Development

** Git

*** Git Gutter


#+begin_src emacs-lisp
;; @todo Git gutter fringe doesn't get pulled in from MELPA unless I grab it with `use-package' first.
(use-package git-gutter-fringe)
(use-package git-gutter
  :diminish
  :hook ((text-mode . git-gutter-mode)
         (prog-mode . git-gutter-mode))
  :config
  (setq git-gutter:update-interval 2)
    (require 'git-gutter-fringe)
    (set-face-foreground 'git-gutter-fr:added "LightGreen")
    (fringe-helper-define 'git-gutter-fr:added nil
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX")

    (set-face-foreground 'git-gutter-fr:modified "LightGoldenrod")
    (fringe-helper-define 'git-gutter-fr:modified nil
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX")

    (set-face-foreground 'git-gutter-fr:deleted "LightCoral")
    (fringe-helper-define 'git-gutter-fr:deleted nil
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX")

  ;; These characters are used in terminal mode
  (setq git-gutter:modified-sign "≡")
  (setq git-gutter:added-sign "≡")
  (setq git-gutter:deleted-sign "≡")
  (set-face-foreground 'git-gutter:added "LightGreen")
  (set-face-foreground 'git-gutter:modified "LightGoldenrod")
  (set-face-foreground 'git-gutter:deleted "LightCoral"))
#+end_src

** Projectile

Projectile is a project management library for Emacs.

Many other packages integrate with Projectile.

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy)) ; Possibly swap to helm
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; Note: Set this to the folder where you keep your Git repos.
  (when (file-directory-p "~/Projects/")
    (setq projectile-project-search-path '("~/Projects")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile)

(cy/leader-key-def
  "pf" 'counsel-projectile-find-file
  "ps" 'counsel-projectile-switch-project
  "pF" 'counsel-projectile-rg
  "pp" 'counsel-projectile
  "pc" 'projectile-compile-project
  "pd" 'projectile-dired)  ;; @todo: Consider switching to deft for this.

; Old configuration
;(projectile-mode +1)
;(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
;(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

*** Project Configurations

This section contains project configurations for specific projects that I can't drop a .dir-locals.el file into. Documentation on this approach can be found in the Emacs manual.

Below is an example.

#+begin_src emacs-lisp
;; (dir-locals-set-class-variables 'Atom
;;   `((nil . ((projectile-project-name . "Atom")
;;             (projectile-project-compilation-dir . nil)
;;             (projectile-project-compilation-cmd . "script/build")))))
;;
;; (dir-locals-set-directory-class (expand-file-name "~/Projects/Home/atom") 'Atom)
#+end_src

** Languages


*** Language Server Support

LSP is "Language Server Protocol"

lsp-keymap-prefix setting enables the ability to define a prefix for where lsp-mode's default keybindings will be added.

which-key integration is important.

#+begin_src emacs-lisp
(use-package ivy-xref
  :init (if (< emacs-major-version 27)
          (setq xref-show-xrefs-function #'ivy-xref-show-xrefs )
          (setq xref-show-definitions-function #'ivy-xref-show-defs )))

(use-package lsp-mode
  :commands lsp
  :hook
  ((typescript-mode js2-mode web-mode) . lsp)
  :bind (:map lsp-mode-map
         ("TAB" . completion-at-point))
  :config (setq lsp-headerline-breadcrumb-enable t
                lsp-enable-on-type-formatting nil
                lsp-enable-indentation nil
                lsp-enable-semantic-highlighting t ; experimental
                lsp-keep-workspace-alive t
                lsp-enable-completion-at-point
                lsp-enable-xref))

(cy/leader-key-def
  "l"   '(:ignore t :which-key "lsp")
  "ld"  'xref-find-definitions
  "lr"  'xref-find-references
  "ln"  'lsp-ui-find-next-reference
  "lp"  'lsp-ui-find-prev-reference
  "ls"  'counsel-imenu
  "le"  'lsp-ui-flycheck-list
  "lS"  'lsp-ui-sideline-mode
  "lX"  'lsp-execute-code-action)

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))
#+end_src

**** lsp-treemacs

Provides tree views for different aspects of code, like symbols in a file, references of a symbol, diagnostics, etc...

It's built on Treemacs, but it doesn't require Treemacs.

#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after lsp)
#+end_src

**** lsp-ivy

Integrates lsp-mode and Ivy. 

#+begin_src emacs-lisp
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src

**** LSP Company Completion
#+begin_src emacs-lisp
;;(add-to-list 'company-backends 'company-lsp)
(use-package company-lsp
  :config (setq company-lsp-cache-candidates 'auto
                company-lsp-async nil
                company-lsp-enable-snippet t ; Set to non-nil if you want snippet expansion on completion.
                company-lsp-enable-recompletion nil))
;; (add-hook 'js2-mode-hook (lambda ()
                           ;; (tern-mode)
                           ;; (company-mode)))
#+end_src

*** Debugging with dap-mode
DAP (Debug Adapter Protocol). This is some thing that I guess comes from VSCode but seems like the de facto way to debug code using Language Servers.
This is essentially the debug client.

#+begin_src emacs-lisp
(use-package dap-mode
  :ensure t
  :hook (lsp-mode . dap-mode)
  :config
  (dap-mode 1)
  (dap-ui-mode 1)
  (dap-tooltip-mode 1)
  (tooltip-mode 1)
  (dap-ui-controls-mode 1)

  (require 'dap-node)
  (dap-node-setup)
  (require 'dap-php)
  (dap-php-setup)
  (require 'dap-firefox)
  (dap-firefox-setup)
  (require 'dap-chrome)
  (dap-chrome-setup))

  ;; Example template.
  ;(dap-register-debug-template: "Node: Attach"
  ;  (list :type "node"
  ;        :cwd nil
  ;        :request "attach"
  ;        :program "nil"
  ;        :port 9002 ;9229?
  ;        :name "Node::Run")))
#+end_src

*** JavaScript & TypeScript

Set up nvm so Node versions may be managed.

#+begin_src emacs-lisp
(use-package nvm
   :defer t)
#+end_src

Attempt to add the add-node-modules-path package to the js modes.
@todo This doesn't appear to work when looking for binaries like prettier. Disabled for now, but needs a solution.

#+begin_src emacs-lisp
(use-package add-node-modules-path
  :disabled
  :after js2-mode
  :hook (js2-mode-hook . add-node-modules-path)
        (js-mode-hook . add-node-modules-path))
#+end_src

Configure JavaScript and TypeScript language modes.

#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :config
  (setq typescript-indent-level 2))

(defun cy/set-js-indentation ()
  (setq js-indent-level 2)
  (setq evil-shift-width js-indent-level)
  (setq default-tab-width 2))

(use-package js2-mode
  :mode "\\.jsx?\\'"
  :config

  ;; Use js2-mode for Node scripts
  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

  ;; Don't use built-in syntax checking.
  ;; @todo Why not?
  (setq js2-mode-show-strict-warnings nil)

  ;; Set up proper indentation in JavaScript and JSON files
  (add-hook 'js2-mode-hook #'cy/set-js-indentation)
  (add-hook 'json-mode-hook #'cy/set-js-indentation))

;; I can't get prettier to work, it won't find my global install or the node_modules bin.
;;(use-package prettier-js
;;  :after add-node-modules-path
;;  :hook ((js2-mode . prettier-js-mode)
;;         (typescript-mode . prettier-js-mode))
;;  :config
;;  (setq prettier-js-show-errors nil))

#+end_src

*** TypeScript
Make .ts files activate typescript-mode when opened. Also adds a hook to typescript-mode-hook to call lsp-deferred so that lsp-mode is activated and the file gets LSP features every time TypeScript code is edited.

#+begin_src emacs-lisp

#+end_src

For lsp-mode to work with TypeSript (and JavaScript) you need to install a language server on your machine. If you have Node.js installed, this is the easy way:

#+begin_src shell
npm install -g typescript-language-server typescript
#+end_src

This will install the typescript-language-server and the TypeScript compiler package.

*** Emacs Lisp

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

;; Improved help in Emacs.
(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  ;; Remap whatever key is bound to these functions to go to these other functions instead.
  ;; This doesn't change the keybinding itself, only its target.
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

(cy/leader-key-def
  "e"   '(:ignore t :which-key "eval")
  "eb"  '(eval-buffer :which-key "eval buffer"))

(cy/leader-key-def
  :keymaps   '(visual)
  "er"  '(eval-region :which-key "eval region"))

#+end_src

*** JSON
#+begin_src emacs-lisp
(use-package json-mode)
(add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
(add-to-list 'auto-mode-alist '("\\.esdoc\\.json\\'" . json-mode))
(add-to-list 'auto-mode-alist '("\\.*\\.json\\'" . json-mode))
#+end_src

*** PHP

I do a ton of PHP work, but oddly don't have much configuration for it here. I still fall back to IntelliJ, but it would be nice to some day move entirely into Emacs.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\.twig\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.module\\'" . php-mode))

(add-hook 'php-mode-hook '(lambda ()
                            (setq c-basic-offset 2)))
(add-hook 'php-mode-hook '(lambda ()
                            (setq display-line-numbers 'absolute)))
#+end_src

*** Python

lsp-mode and dap-mode again, this time for Python.

Ensure the pyls language server is installed before using lsp-mode.

#+begin_src shell
pip install --user "python-language-server[all]"
#+end_src

There are many others, but this one is as good as any for now.

#+begin_src emacs-lisp
(use-package python-mode
  :ensure t
  :hook (python-mode . lsp-deferred)
  :custom
  ;; Set these if python3 is called "python3" on the system.
  ;; (python-shell-interpreter "python3")
  ;; (dap-python-executable "python3")
  (dap-python-debugger 'debugpy)
  :config
  (require 'dap-python))
#+end_src

You can use pyvenv package to use virtualenv environments in Emacs. The pyvenv-activate command should configure Emacs to cause lsp-mode and dap-mode to use the virtual environment when they are loaded, just select the path to your virtual environment before loading the project.

#+begin_src emacs-lisp

#+end_src

*** Golang

#+begin_src emacs-lisp
(defun cy/lsp-go-install-save-hooks()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'cy/lsp-go-install-save-hooks)

(use-package go-mode
  :init
  (add-to-list 'exec-path (expand-file-name "~/go/bin"))
  (add-to-list 'exec-path (expand-file-name "~/go/src/golang.org/x/lint/misc/emacs"))
(add-hook 'go-mode-hook 'lsp-deferred)) ;; Do this for golang support, it's built-in to lsp.

#+end_src

*** HTML

#+begin_src emacs-lisp
(use-package web-mode
  :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
  :config
  (setq-default web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-attribute-indent-offset 2))

;; 1. Start the server with `httpd-start'
;; 2. Use `impatient-mode' on any buffer
(use-package impatient-mode
  :ensure t)
(use-package skewer-mode
  :ensure t)
#+end_src

*** YAML

#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml\\'")
#+end_src

*** Meta Lisp

Useful packages across different Lisp and Scheme implementations

#+begin_src emacs-lisp
(use-package lispy
  :hook ((emacs-lisp-mode . lispy-mode)
         (scheme-mode . lispy-mode)))

(use-package lispyville
  :disabled
  :hook ((lispy-mode . lispyville-mode))
  :config
  (lispyville-set-key-theme '(operators c-w additional)))
#+end_src

*** Systemd

Really useful for editing Systemd  timers and configurations.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.service\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.timer\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.target\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.mount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.slice\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.socket\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.path\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.netdev\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.network\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.link\\'" . conf-unix-mode))
#+end_src

*** Markdown

Assuming the command =multimarkdown= is available to the system, Markdown can be previewed with ~C-c C-c p~.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

#+begin_src emacs-lisp
(defun cy/markdown-html (buffer)
  (princ (with-current-buffer buffer
    (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://strapdownjs.com/v/0.2/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
  (current-buffer)))
#+end_src

With this function defined, impatient mode needs to be instructed to use it via: ~M-x imp-set-user-filter RET cy/markdown-html RET~.

For =markdown-preview-mode= to work, the =websocket.el= dependency is required. This package is not part of melpa/elpa and needs to be installed manually via ~M-x package-install-file <path-to-zip>~. =websocket.el= can be found here: https://github.com/ahyatt/emacs-websocket.

#+begin_src emacs-lisp
(use-package markdown-preview-mode)
#+end_src

*** Rust

This is a newish section. Expect changes.

#+begin_src emacs-lisp
(use-package rust-mode
  :bind ( :map rust-mode-map
          (("C-c C-t" . racer-describe)))
  :config
  (progn
    ;; add flycheck support for Rust.
    ;; https://github.com/flycheck/flycheck-rust
    (use-package flycheck-rust)

    ;; cargo mode for all cargo related operations
    (use-package cargo
      :hook (rust-mode . cargo-minor-mode)
      :bind
      ("C-c C-c C-n" . cargo-process-new))

    ;; racer mode for IDE-esque features.
    (use-package racer
      :hook (rust-mode . racer-mode)
      :config
      (progn
        ;; set racer rust source path env var
        (setq racer-rust-path (getenv "RUST_SRC_PATH"))
        (defun cy/racer-mode-hook ()
          (set (make-local-variable 'company-backends)
               '((company-capf company-files)))
        ;; enable company and eldoc minor modes in rust-mode
        (add-hook 'racer-mode-hook 'company-mode)
        (add-hook 'racer-mode-hook 'eldoc-mode)))
    (add-hook 'rust-mode-hook 'flycheck-mode)
    (add-hook 'rust-mode-hook 'flycheck-rust-setup)

    ;; format Rust buffers on save using rustfmt
    (add-hook 'before-save-hook
              (lambda ()
                (when (eq major-mode 'rust-mode)
                  (rust-format-buffer)))))))
#+end_src

** Productivity

*** Flycheck

#+begin_src emacs-lisp
(use-package flycheck
 :ensure t
 :init (global-flycheck-mode))
#+end_src

*** Snippets

#+begin_src emacs-lisp
(use-package yasnippet
  :hook (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all))
#+end_src

*** Smart Parenthesis

#+begin_src emacs-lisp
(use-package smartparens
  :hook (prog-mode . smartparens-mode))
#+end_src

*** Parenthesis Match Highlighting

#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

*** Rainbow Delimiters

Colorize nested parens and brackets according to nesting depth.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Rainbow Mode

Set the background of HTML color strings in buffers to the color they represent.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :defer t
  :hook (org-mode
         emacs-lisp-mode
         web-mode
         typescript-mode
         js2-mode))
#+end_src

** Tools

*** Company Mode

Company Mode provides a nice in-buffer completion interface, makes Emacs feel more IDE-like.

Company Box enhances the look with icons and stuff.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :after lsp-mode
  ;:init (global-company-mode)     ;; This gets pretty annoying when you're writing regular files and notes.
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
              ("<tab>" . company-select-next)
              ("<tab>" . company-select-previous))
  :config (setq company-idle-delay 0.0
                company-tooltip-align-annotations t
                company-minimum-prefix-length 1
                create-lockfiles nil   ;; Lock file creation can crash debuggers.
                ;; Easy navigation to candidates with M-<n>
                company-show-numbers t
                company-dabbrev-downcase nil)
  :diminish company-mode)

(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

*** Treemacs

Like NeoVim but Emacs-y-er.

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs               3
          treemacs-deferred-git-apply-delay    0.5
          treemacs-display-in-side-window      t
          treemacs-indentation                 2
          treemacs-indentation-string          " "
          treemacs-no-delete-other-windows     t
          treemacs-position                    'left
          treemacs-width                       45
          treemacs-sorting                     'alphabetic-asc
          treemacs-resize-icons                44
          treemacs-follow-mode                 t
          treemacs-filewatch-mode              t
          treemacs-fringe-indicator-mode       'always)
          (pcase (cons (not (null (executable-find "git")))
                       (not (null treemacs-python-executable)))
            (`(t . t)
              (treemacs-git-mode 'deferred))
            (`(t . _)
              (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+end_src

**** Evil Tree
#+begin_src emacs-lisp
(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

(with-eval-after-load 'treemacs
  (define-key evil-treemacs-state-map (kbd "?") #'treemacs-common-helpful-hydra)
  (define-key evil-treemacs-state-map (kbd "C-?") #'treemacs-advanced-helpful-hydra))
#+end_src

**** Projectile Tree
#+begin_src emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+end_src

**** Icons Tree
#+begin_src emacs-lisp
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))
#+end_src


** Reference

*** HTTP

This is a really nice package that helps when you need to get to some HTTP documentation really quickly.

#+begin_src emacs-lisp
(use-package know-your-http-well
  :defer t)
#+end_src

* Writing

** Olivetti
#+begin_src emacs-lisp
(use-package olivetti
   :config
   (add-hook 'text-mode-hook 'olivetti-mode)
   ;(add-hook 'text-mode-hook (lambda () (setq indent-line-function #'indent-relative)))
   (setq-default olivetti-body-width 120))
#+end_src

** LaTeX / PDFs

*** Force a page break after table of contents

#+begin_src emacs-lisp
(setq org-latex-toc-command "\\tableofcontents \\clearpage")
#+end_src

* Applications

** Dashboard
*** Set page break line mode globally

#+begin_src emacs-lisp
(use-package page-break-lines)
(global-page-break-lines-mode)
#+end_src

*** Enable the dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  ;;:mode ("\\*dashboard*\\" . dashboard-mode)
  ;;:interpreter ("dashboard" . dashboard-mode)
  :config
  ;; Set the title
  (setq dashboard-banner-logo-title "Carwin's Dashboard")
  ;; Show the logo in the banner
  (setq dashboard-startup-banner 'logo)
  ;; Show package load / init time
  (setq dashboard-set-init-info t)
  ;; Icons
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (registers . 5)
                          (agenda . 5)))
  ;; (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)
  (dashboard-setup-startup-hook))

(set-face-attribute 'dashboard-items-face nil :foreground nil :inherit 'fixed-pitch)

#+end_src

*** Set the initial buffer to the Dashboard.

This is useful if you start Emacs as a server and connect through /emacsclient/.

#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** term-mode

term-mode is a built-in terminal emulator in Emacs.

#+begin_src emacs-lisp
(use-package term
  :config
  (setq explicit-shell-file-name "zsh")
  ;;(setq explicit-zsh-args '())        ;; Use explicit-<shell>-args for shell-specific configs

  ;; Set up the prompt:
 (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src

*** Better term-mode colors

#+begin_src emacs-lisp
(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))
#+end_src

** Finance

#+begin_src emacs-lisp
(use-package ledger-mode
  :mode "\\.lgr\\'"
  :bind (:map ledger-mode-map
              ("TAB" . completion-at-point)))
#+end_src

** Calendar

calfw is a calendar UI that is able to show all my scheduled Org Agenda items.

#+begin_src emacs-lisp
(use-package calfw
  :commands cfw:open-org-calendar
  :config
  (setq cfw:fchar-junction ?╋
        cfw:fchar-vertical-line ?┃
        cfw:fchar-horizontal-line ?━
        cfw:fchar-left-junction ?┣
        cfw:fchar-right-junction ?┫
        cfw:fchar-top-junction ?┯
        cfw:fchar-top-left-corner ?┏
        cfw:fchar-top-right-corner ?┓)

  (use-package calfw-org
    :config
    (setq cfw:org-agenda-schedule-args '(:timestamp))))

(cy/leader-key-def
  "cc"  '(cfw:open-org-calendar :which-key "calendar"))


;; ;; Google Calendar
(use-package org-gcal
  :ensure t
  :config
  (setq org-gcal-client-id "367256572210-m73qcnfg3v1eiknjrtgk8runc6emmov5.apps.googleusercontent.com"
        org-gcal-client-secret "zzNMaXuX6CWpF3iLArSgy85W"
        org-gcal-fetch-file-alist '(("carwinyoung@gmail.com" .  "~/OneDrive/Notes/cal-personal.org")
                                    ("carwin@mobomo.com" .  "~/OneDrive/Notes/cal-mobomo.org"))))

(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+end_src

** Mail

#+begin_src emacs-lisp
;; (use-package notmuch
;;   :config
;;   (setq notmuch-show-logo nil))
#+end_src

*** mu4e

#+begin_src emacs-lisp :noweb yes
;; (defun cy/run-tangles ()
;;   (when (string-match "\\(dotfiles/\\)$" (file-name-directory buffer-file-name))
;;     (shell-command-to-string (concat (file-name-directory buffer-file-name) "tangled/*.sh"))))

(defun cy/work-sig ()
  (shell-command-to-string "cat ~/Mail/Work/signature.sig"))

(use-package mu4e
  :ensure nil
  :config
  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t
        ;; Refresh mail using isync every 10 minutes
        mu4e-update-interval (* 10 60)
        mu4e-compose-in-new-frame t
        mu4e-view-show-images t
        mu4e-get-mail-command "mbsync -a"
        mu4e-maildir "~/Mail")
  (setq mu4e-contexts
       (list
       ;; Personal account
       (make-mu4e-context
        :name "Personal"
        :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/Home" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address . "cy@carw.in")
                (user-full-name    . "Carwin Young")
                (mu4e-drafts-folder  . "/Home/drafts")
                (mu4e-sent-folder    . "/Home/sent")
                (mu4e-refile-folder  . "/Home/archive")
                (mu4e-trash-folder   . "/Home/trash")
                (mu4e-maildir-shortcuts .  (("/Home/inbox"         . ?i)
                                            ("/Home/sent"          . ?s)
                                            ("/Home/quarantine"    . ?q)
                                            ("/Home/trash"         . ?t)
                                            ("/Home/drafts"        . ?d)
                                            ("/Home/archive"       . ?a)))))
         ;; Work account
       (make-mu4e-context
        :name "Work"
        :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/Work" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address . "carwin@mobomo.com")
                (user-full-name    . "Carwin Young")
                (mu4e-compose-signature . cy/work-sig)
                (mu4e-drafts-folder  . "/Work/drafts")
                (mu4e-sent-folder    . "/Work/sent")
                (mu4e-refile-folder  . "/Work/archive")
                (mu4e-trash-folder   . "/Work/trash")
                (mu4e-maildir-shortcuts . (("/Work/inbox"     . ?i)
                                            ("/Work/sent"     . ?s)
                                            ("/Work/trash"    . ?t)
                                            ("/Work/drafts"   . ?d)
                                            ("/Work/archive"  . ?a))))))))

#+end_src

#+begin_src emacs-lisp
(require 'mu4e-contrib)
(setq mu4e-html2text-command 'mu4e-shr2text)
(add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

(setq mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum)
(add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
(setq mu4e-compose-format-flowed t)
(setq fill-flowed-encode-column 998)

(setq mail-user-agent 'message-user-agent)
#+end_src

*** msmtp

#+begin_src emacs-lisp
(setq sendmail-program "/usr/bin/msmtp"
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      send-mail-function 'smtpmail-send-it
      message-send-mail-function 'message-send-mail-with-sendmail)
#+end_src

* Desktop Setup


Some test paths for regex:
=/home/narwic/Projects/Home/dotfiles/tangled/application-post-tangle.sh=
=/home/narwic/Projects/Home/dotfiles/tangled/environment-post-tangle.sh=
=/home/narwic/Projects/Home/dotfiles/tangled/systemd-post-tangle.sh=

Only auto-tangle on =guts=, =punchy=, or =buster=. Windows machines are too difficult to deal with.

#+begin_src emacs-lisp
(defun cy/run-tangles ()
  (when (string-match "\\(dotfiles/\\)$" (file-name-directory buffer-file-name))
    (shell-command-to-string (concat (file-name-directory buffer-file-name) "tangled/*.sh"))))

(if
  (or (equal system-name "guts")
      (equal system-name "punchy")
      (equal system-name "buster"))
    (add-hook 'after-save-hook 'cy/run-tangles))
#+end_src
